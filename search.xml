<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CDH的搭建</title>
      <link href="/zwhblog.cn/2021/01/18/cdh/centos7-chi-xian-an-zhuang-cdh5.16-ji-qun/"/>
      <url>/zwhblog.cn/2021/01/18/cdh/centos7-chi-xian-an-zhuang-cdh5.16-ji-qun/</url>
      
        <content type="html"><![CDATA[<p>手里有三台服务器，每台16内存，磁盘大小100G，搭建CDH集群<br>版本如下：</p><blockquote><p>Centos7.6.1810<br>Mysql5.6.50<br>Cloudera-manager5.16.2</p></blockquote><p>本文参考了网络上的CDH安装的文章<br><a href="https://blog.csdn.net/czz1141979570/article/details/86658416">https://blog.csdn.net/czz1141979570/article/details/86658416)</a><br><a href="https://blog.csdn.net/weixin_40079336/article/details/86648553">https://blog.csdn.net/weixin_40079336/article/details/86648553</a><br><a href="https://blog.csdn.net/u012448904/article/details/103702433">https://blog.csdn.net/u012448904/article/details/103702433</a><br><a href="https://yq.aliyun.com/articles/341408">https://yq.aliyun.com/articles/341408</a><br>以及自己搭建时遇到的一些问题，进行说明</p><h1 id="搭建CDH过程："><a href="#搭建CDH过程：" class="headerlink" title="搭建CDH过程："></a>搭建CDH过程：</h1><blockquote><p>这里前提是默认已经配置好centos的ip，关闭防火墙，ssh免疫，ntp同步，hosts映射和连接外网等一些配置了<br>因为服务器上的是最小化安装，什么都没带，自己还得安装很多东西，个人安装centos时不推荐最小化安装</p></blockquote><p>安装使用的root用户来安装</p><h2 id="1、-安装JDK"><a href="#1、-安装JDK" class="headerlink" title="1、 安装JDK"></a>1、 安装JDK</h2><p>安装jdk1.8以上版本，安装的目录<strong>必须</strong>要在/usr/java下面，因为CDH默认会从这里找<br>第一次安装时我安装在/opt下面，CDH会报错 检测不到jdk</p><p>查看机器是否自带jdk，进行卸载</p><pre class="line-numbers language-none"><code class="language-none">1.创建这个文件夹，存放jdkmkdir -p /usr/java/jdk1.8tar -zxvf jdk-8u161-linux-x64.tar.gz -C  /usr/java/必须存放在这个目录，否则后期机器默认找不到jdk，还得手动指定，挺麻烦的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">1.配置环境变量vim /etc/profile    2./etc/profile中添加下面配置项export JAVA_HOME=/usr/java/jdk1.8export CLASSPATH=.:${JAVA_HOME}/jre/lib/rt.jar:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jarexport PATH=$PATH:${JAVA_HOME}/bin3.刷新环境变量使配置立即生效    source /etc/profile    4.检查JDK是否配置成功    java -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、安装Mysql"><a href="#2、安装Mysql" class="headerlink" title="2、安装Mysql"></a>2、安装Mysql</h2><p>先安装Mysql，CHD集群的初始化数据和后续的组件(hive，oozie，cm的监控器和hue)的数据都会存放到Mysql中</p><pre class="line-numbers language-none"><code class="language-none">1、先查看linux是否带有mariadbrpm -qa|grep -i mariadb2、 卸载mariadbrpm -e --nodeps mariadb-libs3、如果之前安装过mysql，需要卸载干净rpm -qa |grep -i mysqlyum remove  **********find / -name mysqlrm -rf rm -rf /etc/my.cnfrm -rf /var/log/mysqld.log4、安装mysqlyum install mysqlyum install mysql-serveryum install mysql-devel这里安装mysql-server时可能会报错，这里我安装的是Mysql5.6.5，可以通过select version();查看可以参考下面https://www.cnblogs.com/yowamushi/p/8043054.html安装完成后启动mysql服务，首次没有密码service mysql startmysql##注意点，网上查找的mysql赋值语句可能因为Mysql版本的问题导致不支持。5、//首先更改root的密码update user set Password = password('123456') where user='root';   //查看用户密码和权限select host, user, authentication_string, plugin from user;    //刷新权限，下次登陆就使用'123456'flush privileges;6、开启远程登录grant all privileges on *.* to 'root'@'%' identified by '123456' with grant option;FLUSH PRIVILEGES;//grant 赋值的权限(这里是全部特权) on 授权的数据库 to 在任何主机上登录 密码为 '123456' 查看当前数据库的用户配置：7、授权root用户在主节点拥有所有数据库的访问权限grant all privileges on *.* to 'root'@'hadoop1' identified by '123456' with grant option;//这里是赋值了root本地登录权限8、创建数据库#hivecreate database hive DEFAULT CHARSET utf8 COLLATE utf8_general_ci; #activity monitorcreate database amon DEFAULT CHARSET utf8 COLLATE utf8_general_ci; #huecreate database hue DEFAULT CHARSET utf8 COLLATE utf8_general_ci; #ooziecreate database oozie DEFAULT CHARSET utf8 COLLATE utf8_general_ci;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果Mysql因为权限配置问题导致无法登录问题，处理方法：</p><pre class="line-numbers language-none"><code class="language-none">//关闭Mysql服务systemctl stop mysqld//修改my.cnf文件vim /etc/my.cnf//新增内容skip-grant-tables #添加这句话，这时候登入mysql就不需要密码symbolic-links=0//然后再开启Mysql服务，这时候登陆就不需要密码了修改完数据库之后，再重新启动Mysql服务service mysqld start # 启动mysql服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、安装依赖-所有机器"><a href="#3、安装依赖-所有机器" class="headerlink" title="3、安装依赖(所有机器)"></a>3、安装依赖(所有机器)</h2><p>CDH安装需要python的依赖，我没有安装，之后报错了，需要提前安装</p><pre class="line-numbers language-yum" data-language="yum"><code class="language-yum">yum -y install chkconfig python bind-utils psmisc libxslt zlib sqlite cyrus-sasl-plain cyrus-sasl-gssapi fuse fuse-libs redhat-lsb httpd mod_ssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4、CM下载"><a href="#4、CM下载" class="headerlink" title="4、CM下载"></a>4、CM下载</h2><p>  CM下载地址：<a href="http://archive.cloudera.com/cm5/cm/5/">http://archive.cloudera.com/cm5/cm/5/</a><br>  <img src="/zwhblog.cn/2021/01/18/cdh/centos7-chi-xian-an-zhuang-cdh5.16-ji-qun/20201103105948599.png" alt="CM下载界面"><br>  下载完毕后上传，解压到/opt下面，解压后会生成两个文件夹cloudera和cm-5.16.2</p><pre class="line-numbers language-none"><code class="language-none">tar -zxvf /opt/software/cloudera-manager-centos7-cm5.16.2_x86_64.tar.gz  -C /opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5、添加系统用户-所有机器"><a href="#5、添加系统用户-所有机器" class="headerlink" title="5、添加系统用户(所有机器)"></a>5、添加系统用户(所有机器)</h2><p><code>cloudera-scm</code>用户是CM的配置文件中的系统默认用户，新建这个名称的用户就不用修改CM的配置文件了，是最简单的方式</p><pre class="line-numbers language-none"><code class="language-none">useradd --system --home=/opt/module/cloudera-manager/cm-5.12.1/run/cloudera-scm-server --no-create-home --shell=/bin/false --comment "Cloudera SCM User" cloudera-scm//Cloudera Manager默认用户为cloudera-scm，安装完成后，将自动使用此用户。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6、配置-opt-cloudera-manager-cm-5-16-2-etc-cloudera-scm-agent-config-ini"><a href="#6、配置-opt-cloudera-manager-cm-5-16-2-etc-cloudera-scm-agent-config-ini" class="headerlink" title="6、配置/opt/cloudera-manager/cm-5.16.2/etc/cloudera-scm-agent/ config.ini"></a>6、配置/opt/cloudera-manager/cm-5.16.2/etc/cloudera-scm-agent/ config.ini</h2><p>server_host改成主节点名称，server_port不用动</p><pre class="line-numbers language-none"><code class="language-none">vim /opt/cloudera-manager/cm-5.16.2/etc/cloudera-scm-agent/ config.ini[General]# Hostname of the CM server.server_host=hadoop1# Port that the CM server is listening on.server_port=7182<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、获取mysql的连接包"><a href="#7、获取mysql的连接包" class="headerlink" title="7、获取mysql的连接包"></a>7、获取mysql的连接包</h2><p>我这里用的是mysql5.1.28的连接包<br>下载地址：<a href="https://downloads.mysql.com/archives/get/p/3/file/mysql-connector-java-5.1.28.tar.gz">https://downloads.mysql.com/archives/get/p/3/file/mysql-connector-java-5.1.28.tar.gz</a></p><p>这里我并没有修改jar包的名称，网上说需要修改名称变为 <code>mysql-connector-java.jar</code></p><pre class="line-numbers language-none"><code class="language-none">cp /opt/software/mysql-connector-java-5.1.28/mysql-connector-java-5.1.28-bin.jar /opt/cm-5.16.2cm/share/cmf/lib/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将mysql连接的包放到这个/cm/share/cmf/lib目录下<br>网上两种方案存放这个包，一种是放在/usr/java/，一种是存放在/cm-5.16.2/share/cmf/lib/</p><p>这里经过这几天，证明只用放在/cm-5.16.2/share/cmf/lib/即可</p><h2 id="8、分发解压后的文件到其他节点上"><a href="#8、分发解压后的文件到其他节点上" class="headerlink" title="8、分发解压后的文件到其他节点上"></a>8、分发解压后的文件到其他节点上</h2><pre class="line-numbers language-none"><code class="language-none">scp -r cm5.16.2 hadoop2:/opt/scp -r cm5.16.2 hadoop3:/opt/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>传过去文件确认一下你的权限</p><pre class="line-numbers language-none"><code class="language-none">//给传过去的文件赋值给cloudera-scm用户chown -R cloudera-scm:cloudera-scm /opt/cm5.16.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="9、初始化CM数据库"><a href="#9、初始化CM数据库" class="headerlink" title="9、初始化CM数据库"></a>9、初始化CM数据库</h2><pre class="line-numbers language-none"><code class="language-none">/opt/cm-5.16.2/share/cmf/schema/scm_prepare_database.sh mysql cm -h hadoop1 -u root -p 123456 --scm-host localhost scm scm scm//这里的scm用户，数据库中如果没有它会自动创建此用户，所以前面没有新建立用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是数据库初始化语句，scm用户会在mysql冲初始化一个cm的数据库</p><p>如果初始化失败，还发现本地mysql登陆不成功等问题，可以在修改/etc/my.conf文件</p><p>进入mysql后修改mysql数据库的user表</p><blockquote><p>参考文章：</p><p><a href="https://blog.csdn.net/weixin_40079336/article/details/86648553">https://blog.csdn.net/weixin_40079336/article/details/86648553</a><br><img src="/zwhblog.cn/2021/01/18/cdh/centos7-chi-xian-an-zhuang-cdh5.16-ji-qun/20190125162936470.png" alt="初始化cm数据库的语句含义"></p></blockquote><pre class="line-numbers language-none"><code class="language-none">//这里并没有使用root用来初始化，使用的scm用户，root用户的配置只是为了未来方便root的远程操作如果已经增加权限还是不能登录可使用下面语句，执行完是结果是user表会增加记录，mysql的user表条数有12条//这里的grant 语句可以用来新增用户或者调整用户的权限和密码grant all privileges on *.* to 'root'@'localhost' identified by '123456' with grant option;grant all privileges on *.* to 'root'@'hadoop1' identified by '123456' with grant option;grant all privileges on *.* to 'root'@'127*.*0*.*0*.*1' identified by '123456' with grant option;grant all privileges on *.* to 'root'@'%' identified by '123456' with grant option;grant all privileges on *.* to 'scm'@'localhost' identified by 'scm' with grant option;grant all privileges on *.* to 'scm'@'hadoop1' identified by 'scm' with grant option;grant all privileges on *.* to 'scm'@'127*.*0*.*0*.*1' identified by 'scm' with grant option;grant all privileges on *.* to 'scm'@'%' identified by 'scm' with grant option;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10、CDH离线包下载"><a href="#10、CDH离线包下载" class="headerlink" title="10、CDH离线包下载"></a>10、CDH离线包下载</h2><p>这里的版本跟你的CM版本对应上，后面的el，指的是Centos的版本，这里是7，所以选择el7</p><p><a href="http://archive.cloudera.com/cdh5/parcels/latest/">http://archive.cloudera.com/cdh5/parcels/latest/</a></p><p><img src="/zwhblog.cn/2021/01/18/cdh/centos7-chi-xian-an-zhuang-cdh5.16-ji-qun/20201103103318108.png" alt="CDH下载内容"><br>下载三个文件</p><h2 id="11、创建Parcel-repo-目录（主节点操作）"><a href="#11、创建Parcel-repo-目录（主节点操作）" class="headerlink" title="11、创建Parcel-repo 目录（主节点操作）"></a>11、创建Parcel-repo 目录（主节点操作）</h2><pre class="line-numbers language-none"><code class="language-none">mkdir -p /opt/cloudera/parcel-repochown -R cloudera-scm:cloudera-scm /opt/cloudera/parcel-repo/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>将下载好的3个CDH文件放到parcel-repo这个目录中</code></p><p>SPARK2-2.4.0.cloudera2-1.cdh5.13.3.p0.1041012-el7.parcel.sha1</p><p>需要改名</p><p>SPARK2-2.4.0.cloudera2-1.cdh5.13.3.p0.1041012-el7.parcel.sha</p><p>把1去掉就行了</p><h2 id="12、所有节点创建parcels目录-所有节点"><a href="#12、所有节点创建parcels目录-所有节点" class="headerlink" title="12、所有节点创建parcels目录(所有节点)"></a>12、所有节点创建parcels目录(所有节点)</h2><pre class="line-numbers language-none"><code class="language-none">mkdir -p /opt/cloudera/parcelschown -R cloudera-scm:cloudera-scm /opt/cloudera/parcels<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="13、启动CM服务"><a href="#13、启动CM服务" class="headerlink" title="13、启动CM服务"></a>13、启动CM服务</h2><pre class="line-numbers language-none"><code class="language-none">hadoop1:/opt/cloudera-manager/cm-5.16.2/etc/init.d/cloudera-scm-server start/opt/cloudera-manager/cm-5.16.2/etc/init.d/cloudera-scm-agent starthadoop2:/opt/cloudera-manager/cm-5.16.2/etc/init.d/cloudera-scm-agent starthadoop3:/opt/cloudera-manager/cm-5.16.2/etc/init.d/cloudera-scm-agent start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14、访问WebUI"><a href="#14、访问WebUI" class="headerlink" title="14、访问WebUI"></a>14、访问WebUI</h2><pre class="line-numbers language-none"><code class="language-none">hadoop1:7180<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动命令后等一会，会有个启动过程，可能比较慢，到这里应该就能正常访问了，默认的用户名和密码都是<code>admin</code><br>进去添加服务组件，配置他们的节点位置和他们的存储目录</p><p>也可以点击集群-&gt;操作-&gt;添加服务<br><img src="/zwhblog.cn/2021/01/18/cdh/centos7-chi-xian-an-zhuang-cdh5.16-ji-qun/20201106092122174.png" alt="在这里插入图片描述"></p><p>到此，CDH安装完成，文章有不足之处还请告知<br>CDH安装遇到问题可以参考以下连接<br><a href="https://blog.csdn.net/BalaBalaYi/article/details/76904274">https://blog.csdn.net/BalaBalaYi/article/details/76904274</a><br><a href="https://blog.csdn.net/qq_39680564/article/details/100013275">https://blog.csdn.net/qq_39680564/article/details/100013275</a></p>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK的安装</title>
      <link href="/zwhblog.cn/2021/01/18/elk/elasticsearch7.10-an-zhuang/"/>
      <url>/zwhblog.cn/2021/01/18/elk/elasticsearch7.10-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="下载es的包"><a href="#下载es的包" class="headerlink" title="下载es的包"></a>下载es的包</h2><p>官网地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><h2 id="解压es包"><a href="#解压es包" class="headerlink" title="解压es包"></a>解压es包</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tar -zxvf elasticsearch-7.10.0-linux-x86_64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h2><p>进入解压完毕后的包，查看目录，进入到config目录下，修改<code>elasticsearch.yml</code>文件<br><img src="https://img-blog.csdnimg.cn/20201130142309621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201130142429381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="启动es"><a href="#启动es" class="headerlink" title="启动es"></a>启动es</h2><p>按照上图修改完毕后，<strong>切换到非root用户</strong>，然后启动es</p><pre class="line-numbers language-none"><code class="language-none">bin/elasticsearch命令行启动bin/elasticsearch -d后台启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>可以访问ip:9200<br>查看返回值，返回下方返回值就正确</p><pre class="line-numbers language-none"><code class="language-none">{    "name": "node-1",    "cluster_name": "my-application",    "cluster_uuid": "9R_huW9yRcmGpH-fIcioAQ",    "version": {        "number": "7.10.0",        "build_flavor": "default",        "build_type": "tar",        "build_hash": "51e9d6f22758d0374a0f3f5c6e8f3a7997850f96",        "build_date": "2020-11-09T21:30:33.964949Z",        "build_snapshot": false,        "lucene_version": "8.7.0",        "minimum_wire_compatibility_version": "6.8.0",        "minimum_index_compatibility_version": "6.0.0-beta1"    },    "tagline": "You Know, for Search"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关闭es"><a href="#关闭es" class="headerlink" title="关闭es"></a>关闭es</h2><pre class="line-numbers language-none"><code class="language-none">命令行启动的  退出时就关闭了后台启动的可以查询进程  来关闭进程ps -ef | grep elasticsearchkill -9 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> ES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDH5.16卸载</title>
      <link href="/zwhblog.cn/2021/01/16/cdh/cdh5.16-xie-zai/"/>
      <url>/zwhblog.cn/2021/01/16/cdh/cdh5.16-xie-zai/</url>
      
        <content type="html"><![CDATA[<p>集群卸载，因为一些搞不定的问题，所以卸载重装一遍</p><p>本文参考<br><a href="https://blog.csdn.net/weixin_35852328/article/details/81774627">https://blog.csdn.net/weixin_35852328/article/details/81774627</a></p><h2 id="1、停掉你的所有服务，包括cm"><a href="#1、停掉你的所有服务，包括cm" class="headerlink" title="1、停掉你的所有服务，包括cm"></a>1、停掉你的所有服务，包括cm</h2><p><img src="https://img-blog.csdnimg.cn/2020110609233197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201106092615880.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2、停止完毕服务后，把之前安装的parcel的包-停用-删除"><a href="#2、停止完毕服务后，把之前安装的parcel的包-停用-删除" class="headerlink" title="2、停止完毕服务后，把之前安装的parcel的包 停用-删除"></a>2、停止完毕服务后，把之前安装的parcel的包 停用-删除</h2><p><img src="https://img-blog.csdnimg.cn/20201106092948211.png#pic_center" alt="在这里插入图片描述"><br>下面的图是开头博主的图<br><img src="https://img-blog.csdnimg.cn/20201106093025338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="3、删除你的cluster"><a href="#3、删除你的cluster" class="headerlink" title="3、删除你的cluster"></a>3、删除你的cluster</h2><p><img src="https://img-blog.csdnimg.cn/20201106093201361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="4、停止你的进程"><a href="#4、停止你的进程" class="headerlink" title="4、停止你的进程"></a>4、停止你的进程</h2><pre class="line-numbers language-none"><code class="language-none">/opt/cm-5.16.2/etc/init.d/cloudera-scm-server stop/opt/cm-5.16.2/etc/init.d/cloudera-scm-agent stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5、查看又没有相关的进程"><a href="#5、查看又没有相关的进程" class="headerlink" title="5、查看又没有相关的进程"></a>5、查看又没有相关的进程</h2><pre class="line-numbers language-none"><code class="language-none">ps -ef |grep clouderakill 掉查出来的进程信息ps -ef | grep supervisordkill 掉查出来的进程信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、开始删除你的配置文件"><a href="#6、开始删除你的配置文件" class="headerlink" title="6、开始删除你的配置文件"></a>6、开始删除你的配置文件</h2><pre class="line-numbers language-none"><code class="language-none">rm -rf /var/lib/flume-ng /var/lib/hadoop* /var/lib/hue  /var/lib/navigator /var/lib/oozie /var/lib/solr /var/lib/sqoop*  /var/lib/zookeeper /var/lib/kudu /var/lib/kafka/ /var/lib/impala/ /var/lib/cloudera-scm-*rm -rf /etc/cloudera*umount /opt/cm-5.16.2/run/cloudera-scm-agent/process  rm -rf /var/run/hdfs-socketsrm -rf /usr/lib/huerm -rf /usr/bin/hadoop* /usr/bin/zookeeper* /usr/bin/hbase* /usr/bin/hive* /usr/bin/hdfs /usr/bin/mapred /usr/bin/yarn /usr/bin/sqoop* /usr/bin/oozie /usr/bin/impala /usr/bin/spark*rm -rf /etc/alternatives/hadoop* /etc/alternatives/flume-ng* /etc/alternatives/hbase* /etc/alternatives/hdfs /etc/alternatives/hive* /etc/alternatives/hue* /etc/alternatives/impala* /etc/alternatives/mahout* /etc/alternatives/mapred /etc/alternatives/oozie /etc/alternatives/pig* /etc/alternatives/solr* /etc/alternatives/spark* /etc/alternatives/sqoop* /etc/alternatives/yarn /etc/alternatives/zookeeper*rm -rf /var/cloudera-scm-serverrm -rf /var/lib/cloudera* /var/lib/yarn*rm -rf /dfsrm -rf /tmp/.scm_prepare_node.lockrm -rf /opt/cloudera/rm -rf /opt/cm-5.16.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除和卸载他们的相关数据和日志以及源文件存放的位置</p><pre class="line-numbers language-none"><code class="language-none">//下面是CDH的目录的说明/var/lib/cloudera-scm-server-db/data : 内嵌数据库目录。/etc/cloudera-scm-agent/ : agent的配置目录。/etc/cloudera-scm-server/ : server的配置目录。/var/run下面Hadoop生成的文件/var/log/cloudera-scm-installer : 安装日志目录。/var/log/* : 相关日志文件（相关服务的及CM的）。/usr/share/cmf/ : 程序安装目录。/usr/lib64/cmf/ : Agent程序代码。/usr/bin/postgres : 内嵌数据库程序。/opt/cloudera/parcels/ : Hadoop相关服务安装目录。/opt/cloudera/parcel-repo/ : 下载的服务软件包数据，数据格式为parcels。/opt/cloudera/parcel-cache/ : 下载的服务软件包缓存数据。/etc/hadoop/* : 客户端配置文件目录。/dfs:hadoop格式化的目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、-Mysql"><a href="#7、-Mysql" class="headerlink" title="7、 Mysql"></a>7、 Mysql</h2><p>mysql我的话没有遇到问题，也没有重新安装<br>如果只要要重新安装在mysql没有问题的情况下不需要动mysql，只需要把mysql的中的cm数据库和其他amon,oozie,hue和hive数据库删除就行</p><p>下面是删除数据库的过程</p><pre class="line-numbers language-none"><code class="language-none">service mysql stopps -ef |grep mysqlkill pidrpm -qa |grep -i mysqlyum remove  **********find / -name mysqlrm -rf rm -rf /etc/my.cnfrm -rf /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是说明的步骤和执行哪些，下面是整体需要执行的语句</p><pre class="line-numbers language-none"><code class="language-none">rm -rf /var/lib/flume-ng /var/lib/hadoop* /var/lib/hue  /var/lib/navigator /var/lib/oozie /var/lib/solr /var/lib/sqoop*  /var/lib/zookeeper /var/lib/kudu /var/lib/kafka/ /var/lib/impala/ /var/lib/cloudera-scm-*rm -rf /etc/cloudera*umount /opt/cm-5.16.2/run/cloudera-scm-agent/process  rm -rf /var/run/hdfs-socketsrm -rf /usr/lib/huerm -rf /usr/bin/hadoop* /usr/bin/zookeeper* /usr/bin/hbase* /usr/bin/hive* /usr/bin/hdfs /usr/bin/mapred /usr/bin/yarn /usr/bin/sqoop* /usr/bin/oozie /usr/bin/impala /usr/bin/spark*rm -rf /etc/alternatives/hadoop* /etc/alternatives/flume-ng* /etc/alternatives/hbase* /etc/alternatives/hdfs /etc/alternatives/hive* /etc/alternatives/hue* /etc/alternatives/impala* /etc/alternatives/mahout* /etc/alternatives/mapred /etc/alternatives/oozie /etc/alternatives/pig* /etc/alternatives/solr* /etc/alternatives/spark* /etc/alternatives/sqoop* /etc/alternatives/yarn /etc/alternatives/zookeeper*rm -rf /var/cloudera-scm-serverrm -rf /var/lib/cloudera* /var/lib/yarn*rm -rf /dfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kibana报：Driver class &#39;org.gjt.mm.mysql.Driver&#39; could not be found</title>
      <link href="/zwhblog.cn/2021/01/16/elk/kettle-an-zhuang-wan-bao-cuo-driver-class-org.gjt.mm.mysql.driver-could-not-be-found/"/>
      <url>/zwhblog.cn/2021/01/16/elk/kettle-an-zhuang-wan-bao-cuo-driver-class-org.gjt.mm.mysql.driver-could-not-be-found/</url>
      
        <content type="html"><![CDATA[<p>今天安装Kettle使用，下载解压到本地后双击<code>Spoon.bat</code> 打开应用<br>首先测试连接Mysql，但是报错，这时候知道他没有需要的Connection包，到Mysql官网下载后，这里我的Mysql是8.0.22的，下载的也是connect也是8.0.22的包<br>下载解压这个包之后<br><img src="https://img-blog.csdnimg.cn/20201124162623149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>把这个包放入到  <code> pdi-ce-8.2.0.0-342\data-integration\lib</code>    目录下<br>再次启动<br>还是报错，感觉没什么变化，还是依旧</p><p>仔细查看报错内容，发现要  ‘org.gjt.mm.mysql.Driver’  这个驱动</p><pre class="line-numbers language-none"><code class="language-none">Driver class 'org.gjt.mm.mysql.Driver' could not be found, make sure the 'MySQL' driver (jar file) is installed.org.gjt.mm.mysql.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个包在新版本中是没有的，而在老版本中有<br>Mysql官网下载5.1.49的connect包，解压后<br><img src="https://img-blog.csdnimg.cn/20201124162956846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>可以看到两个connect的包，把这两个都放入到 <code> pdi-ce-8.2.0.0-342\data-integration\lib</code>  目录下，重新启动kettle，再次尝试连接MySQL服务，成功！</p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kibana </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kibana的安装</title>
      <link href="/zwhblog.cn/2021/01/16/elk/kibana7.10.0-an-zhuang/"/>
      <url>/zwhblog.cn/2021/01/16/elk/kibana7.10.0-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p><strong>Kibana，数据可视化平台</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>官网地址: <a href="https://www.elastic.co/cn/downloads/kibana">https://www.elastic.co/cn/downloads/kibana</a></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tar -zxvf kibana-7.10.0-linux-x86_64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置-kibana-home"><a href="#配置-kibana-home" class="headerlink" title="配置  kibana_home"></a>配置  kibana_home</h2><p>config/kibana.yml<br><img src="https://img-blog.csdnimg.cn/2020113014380215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="启动kibana"><a href="#启动kibana" class="headerlink" title="启动kibana"></a>启动kibana</h2><p>完成上面配置后，进行启动</p><pre class="line-numbers language-none"><code class="language-none">bin/kibana后台启动：bin/kibana &amp;启动后等待一段时间这里报错，不影响使用，他在重复入值的时报的错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201130144217995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kibana </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql分库分表</title>
      <link href="/zwhblog.cn/2021/01/16/mysql/mysql-fen-ku-fen-biao/"/>
      <url>/zwhblog.cn/2021/01/16/mysql/mysql-fen-ku-fen-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要分库分表？"><a href="#为什么要分库分表？" class="headerlink" title="为什么要分库分表？"></a>为什么要分库分表？</h1><p><strong>原文链接</strong>：<a href="https://juejin.im/post/6844903992909103117">原文链接</a> </p><p>我没有用过分库分表，靠着这篇博客了解的</p><p>关系型数据库本身比较容易成为系统瓶颈，单机存储容量、连接数、处理能力都有限。当单表的数据量达到1000W或100G以后，由于查询维度较多，即使添加从库、优化索引，做很多操作时性能仍下降严重。此时就要考虑对其进行切分了，切分的目的就在于减少数据库的负担，缩短查询时间。</p><p>而切分数据库和表的方式就两种，垂直切分和水平切分</p><h1 id="数据库瓶颈产生原因和解决办法"><a href="#数据库瓶颈产生原因和解决办法" class="headerlink" title="数据库瓶颈产生原因和解决办法"></a>数据库瓶颈产生原因和解决办法</h1><p>不管是IO瓶颈还是CPU瓶颈，最终都会导致数据库的活跃连接数增加，进而逼近甚至达到数据库可承载的活跃连接数的阈值。在业务service来看， 就是可用数据库连接少甚至无连接可用，接下来就可以想象了（并发量、吞吐量、崩溃）。</p><h2 id="IO瓶颈"><a href="#IO瓶颈" class="headerlink" title="IO瓶颈"></a>IO瓶颈</h2><p>第一种：</p><p>磁盘读IO瓶颈，热点数据太多，数据库缓存放不下，每次查询会产生大量的IO，降低查询速度-&gt;分库和垂直分表</p><p>第二种：</p><p>网络IO瓶颈，请求的数据太多，网络带宽不够 -&gt;分库</p><h2 id="CPU瓶颈"><a href="#CPU瓶颈" class="headerlink" title="CPU瓶颈"></a>CPU瓶颈</h2><p>第一种：</p><p>SQl问题：如SQL中包含join,group by, order by，非索引字段条件查询等，增加CPU运算的操作-&gt;SQL优化，建立合适的索引，在业务Service层进行业务计算。</p><p>第二种：</p><p>单表数据量太大，查询时扫描的行太多，SQl效率低，增加CPU运算的操作。-&gt;水平分表。</p><h1 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h1><h2 id="水平分库"><a href="#水平分库" class="headerlink" title="水平分库"></a>水平分库</h2><p><img src="https://img-blog.csdnimg.cn/20201111123353102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>一张表的数据通过不同的分发策略发送到不同的数据库中</p><ul><li>两个数据库中的表结构完全一致</li><li>他们的数据完全不同</li><li>两个库中的所有数据的并集是全部的数据</li></ul><p>适用场景：<br>库多了，并发就上去了，解决了你的并发量问题</p><h2 id="垂直分库"><a href="#垂直分库" class="headerlink" title="垂直分库"></a>垂直分库</h2><p><img src="https://img-blog.csdnimg.cn/20201111124105338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>根据表中业务的不同来进行划分不同字段到不同的库中</p><ul><li>每个库中表结构都不同</li><li>每个库中数据和字段不一样</li><li>所有库的并集是全量数据</li></ul><p>适用场景：</p><p>划分成多个库，提高了并发度，并且需要按照业务模块划分到不同表中</p><p>表中业务模块都定义好的情况下，才能够使用，否则后期使用是灾难</p><h2 id="水平分表"><a href="#水平分表" class="headerlink" title="水平分表"></a>水平分表</h2><p><img src="https://img-blog.csdnimg.cn/20201111124945960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>将一张表的数据按照某种策略拆分到多个表中</p><ul><li>每个表的字段结构都相同</li><li>每个表的数据不一样</li><li>所有表的并集是全部的数据</li></ul><p>适用场景：</p><p>系统并发量没有到瓶颈，就是单表数据过多，导致查询缓慢，加重了CPU的负担，这种情况可以使用水平分表</p><h2 id="垂直分表"><a href="#垂直分表" class="headerlink" title="垂直分表"></a>垂直分表</h2><p><img src="https://img-blog.csdnimg.cn/2020111112551481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>将一张表的字段按照字段的活跃性拆分到不同的表中</p><ul><li>每个表的字段结构不一样</li><li>每个表的数据没有相同的，但是会有一个交集，通常是一个主键，用于关联数据</li><li>所有表的并集是全部的数据</li></ul><p>适用场景：</p><p>并发量没有上来，表的记录并不多，但是字段多，并且热点数据和非热点数据在一起，单行数据所需的存储空间较大，以至于数据库缓存的数据行减少，查询时回去读磁盘数据产生大量随机读IO，产生IO瓶颈。<br>总结就是，字段太多，查询时产生大量io，产生io瓶颈，导致查询慢，可以使用这种方式</p><h2 id="分库分表工具"><a href="#分库分表工具" class="headerlink" title="分库分表工具"></a>分库分表工具</h2><ol><li>List item</li><li>sharding-jdbc（当当）</li><li>TSharding（蘑菇街）</li><li>Atlas（奇虎360）</li><li>Cobar（阿里巴巴）</li><li>MyCAT（基于Cobar）</li><li>Oceanus（58同城）</li><li>Vitess（谷歌） 各种工具的利弊自查</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 关系型数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql分库分表带来的问题</title>
      <link href="/zwhblog.cn/2021/01/16/mysql/shu-ju-ku-fen-ku-fen-biao-ke-neng-chan-sheng-de-wen-ti/"/>
      <url>/zwhblog.cn/2021/01/16/mysql/shu-ju-ku-fen-ku-fen-biao-ke-neng-chan-sheng-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>原文链接：<a href="https://juejin.im/post/6844903992909103117">https://juejin.im/post/6844903992909103117</a></p><h1 id="分库分表带来的问题"><a href="#分库分表带来的问题" class="headerlink" title="分库分表带来的问题"></a>分库分表带来的问题</h1><p>分库分表能有效缓解单机和单表带来的性能瓶颈和压力，突破网络IO、硬件资源、连接数的瓶颈，同时也带来一些问题，下面将描述这些问题和解决思路。</p><h2 id="事务一致性问题"><a href="#事务一致性问题" class="headerlink" title="事务一致性问题"></a>事务一致性问题</h2><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p>当更新内容同时存在于不同库找那个，不可避免会带来跨库事务问题。跨分片事务也是分布式事务，没有简单的方案，一般可使用“XA协议”和“两阶段提交”处理。<br>分布式事务能最大限度保证了数据库操作的原子性。但在提交事务时需要协调多个节点，推后了提交事务的时间点，延长了事务的执行时间，导致事务在访问共享资源时发生冲突或死锁的概率增高。随着数据库节点的增多，这种趋势会越来越严重，从而成为系统在数据库层面上水平扩展的枷锁。</p><h3 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h3><p>对于那些性能要求很高，但对一致性要求不高的系统，往往不苛求系统的实时一致性，只要在允许的时间段内达到最终一致性即可，可采用事务补偿的方式。与事务在执行中发生错误立刻回滚的方式不同，事务补偿是一种事后检查补救的措施，一些常见的实现方法有：对数据进行对账检查，基于日志进行对比，定期同标准数据来源进行同步等。</p><h2 id="跨节点关联查询join问题"><a href="#跨节点关联查询join问题" class="headerlink" title="跨节点关联查询join问题"></a>跨节点关联查询join问题</h2><p>切分之前，系统中很多列表和详情表的数据可以通过join来完成，但是切分之后，数据可能分布在不同的节点上，此时join带来的问题就比较麻烦了，考虑到性能，尽量避免使用Join查询。解决的一些方法：</p><h3 id="全局表"><a href="#全局表" class="headerlink" title="全局表"></a>全局表</h3><p>全局表，也可看做“数据字典表”，就是系统中所有模块都可能依赖的一些表，为了避免库join查询，可以将这类表在每个数据库中都保存一份。这些数据通常很少修改，所以不必担心一致性的问题。</p><h3 id="字段冗余"><a href="#字段冗余" class="headerlink" title="字段冗余"></a>字段冗余</h3><p>一种典型的反范式设计，利用空间换时间，为了性能而避免join查询。例如，订单表在保存userId的时候，也将userName也冗余的保存一份，这样查询订单详情顺表就可以查到用户名userName，就不用查询买家user表了。但这种方法适用场景也有限，比较适用依赖字段比较少的情况，而冗余字段的一致性也较难保证。</p><h3 id="数据组装"><a href="#数据组装" class="headerlink" title="数据组装"></a>数据组装</h3><p>在系统service业务层面，分两次查询，第一次查询的结果集找出关联的数据id，然后根据id发起器二次请求得到关联数据，最后将获得的结果进行字段组装。这是比较常用的方法。</p><h3 id="ER分片"><a href="#ER分片" class="headerlink" title="ER分片"></a>ER分片</h3><p>关系型数据库中，如果已经确定了表之间的关联关系（如订单表和订单详情表），并且将那些存在关联关系的表记录存放在同一个分片上，那么就能较好地避免跨分片join的问题，可以在一个分片内进行join。在1:1或1：n的情况下，通常按照主表的ID进行主键切分。</p><h2 id="跨节点分页、排序、函数问题"><a href="#跨节点分页、排序、函数问题" class="headerlink" title="跨节点分页、排序、函数问题"></a>跨节点分页、排序、函数问题</h2><p>跨节点多库进行查询时，会出现limit分页、order by 排序等问题。分页需要按照指定字段进行排序，当排序字段就是分页字段时，通过分片规则就比较容易定位到指定的分片；当排序字段非分片字段时，就变得比较复杂.需要先在不同的分片节点中将数据进行排序并返回，然后将不同分片返回的结果集进行汇总和再次排序，最终返回给用户如下图：<br><img src="https://img-blog.csdnimg.cn/2020111113254786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>上图只是取第一页的数据，对性能影响还不是很大。但是如果取得页数很大，情况就变得复杂的多，因为各分片节点中的数据可能是随机的，为了排序的准确性，需要将所有节点的前N页数据都排序好做合并，最后再进行整体排序，这样的操作很耗费CPU和内存资源，所以页数越大，系统性能就会越差。<br>在使用Max、Min、Sum、Count之类的函数进行计算的时候，也需要先在每个分片上执行相应的函数，然后将各个分片的结果集进行汇总再次计算。</p><h2 id="全局主键避重问题"><a href="#全局主键避重问题" class="headerlink" title="全局主键避重问题"></a>全局主键避重问题</h2><p>在分库分表环境中，由于表中数据同时存在不同数据库中，主键值平时使用的自增长将无用武之地，某个分区数据库自生成ID无法保证全局唯一。因此需要单独设计全局主键，避免跨库主键重复问题。这里有一些策略：</p><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><p>UUID标准形式是32个16进制数字，分为5段，形式是8-4-4-4-12的36个字符。UUID是最简单的方案，本地生成，性能高，没有网络耗时，但是缺点明显，占用存储空间多，另外作为主键建立索引和基于索引进行查询都存在性能问题，尤其是InnoDb引擎下，UUID的无序性会导致索引位置频繁变动，导致分页。</p><h3 id="结合数据库维护主键ID表"><a href="#结合数据库维护主键ID表" class="headerlink" title="结合数据库维护主键ID表"></a>结合数据库维护主键ID表</h3><p>在数据库中建立sequence表：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE `sequence` (    `id` bigint(20) unsigned NOT NULL auto_increment,    `stub` char(1) NOT NULL default '',    PRIMARY KEY  (`id`),    UNIQUE KEY `stub` (`stub`)  ) ENGINE=MyISAM;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>stub字段设置为唯一索引，同一stub值在sequence表中只有一条记录，可以同时为多张表生辰全局ID。使用MyISAM引擎而不是InnoDb，已获得更高的性能。MyISAM使用的是表锁，对表的读写是串行的，所以不用担心并发时两次读取同一个ID。当需要全局唯一的ID时，执行：</p><pre class="line-numbers language-none"><code class="language-none">REPLACE INTO sequence (stub) VALUES ('a');  SELECT 1561439;  SELECT LAST_INSERT_ID();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此方案较为简单，但缺点较为明显：存在单点问题，强依赖DB，当DB异常时，整个系统不可用。配置主从可以增加<br>可用性。另外性能瓶颈限制在单台Mysql的读写性能。</p><p>另有一种主键生成策略，类似sequence表方案，更好的解决了单点和性能瓶颈问题。这一方案的整体思想是：建立2个以上的全局ID生成的服务器，每个服务器上只部署一个数据库，每个库有一张sequence表用于记录当前全局ID。表中增长的步长是库的数量，起始值依次错开，这样就能将ID的生成散列到各个数据库上<br><img src="https://img-blog.csdnimg.cn/20201111132949571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>这种方案将生成ID的压力均匀分布在两台机器上，同时提供了系统容错，第一台出现了错误，可以自动切换到第二台获取ID。但有几个缺点：系统添加机器，水平扩展较复杂；每次获取ID都要读取一次DB，DB的压力还是很大，只能通过堆机器来提升性能。</p><h2 id="Snowflake分布式自增ID算法"><a href="#Snowflake分布式自增ID算法" class="headerlink" title="Snowflake分布式自增ID算法"></a>Snowflake分布式自增ID算法</h2><p>Twitter的snowfalke算法解决了分布式系统生成全局ID的需求，生成64位Long型数字，组成部分：</p><p>第一位未使用</p><p>接下来的41位是毫秒级时间，41位的长度可以表示69年的时间</p><p>5位datacenterId,5位workerId。10位长度最多支持部署1024个节点</p><p>最后12位是毫秒内计数，12位的计数顺序号支持每个节点每毫秒产生4096个ID序列。</p><h2 id="数据迁移、扩容问题"><a href="#数据迁移、扩容问题" class="headerlink" title="数据迁移、扩容问题"></a>数据迁移、扩容问题</h2><p>当业务高速发展、面临性能和存储瓶颈时，才会考虑分片设计，此时就不可避免的需要考虑历史数据的迁移问题。一般做法是先读出历史数据，然后按照指定的分片规则再将数据写入到各分片节点中。此外还需要根据当前的数据量个QPS，以及业务发展速度，进行容量规划，推算出大概需要多少分片（一般建议单个分片的单表数据量不超过1000W）</p><h2 id="什么时候考虑分库分表"><a href="#什么时候考虑分库分表" class="headerlink" title="什么时候考虑分库分表"></a>什么时候考虑分库分表</h2><p>能不分就不分<br>并不是所有表都需要切分，主要还是看数据的增长速度。切分后在某种程度上提升了业务的复杂程度。不到万不得已不要轻易使用分库分表这个“大招”，避免“过度设计”和“过早优化”。分库分表之前，先尽力做力所能及的优化：升级硬件、升级网络、读写分离、索引优化等。当数据量达到单表瓶颈后，在考虑分库分表。</p><p>数据量过大，正常运维影响业务访问<br>这里的运维是指：</p><p>对数据库备份，如果单表太大，备份时需要大量的磁盘IO和网络IO</p><p>对一个很大的表做DDL，MYSQL会锁住整个表，这个时间会很长，这段时间业务不能访问此表，影响很大。</p><p>大表经常访问和更新，就更有可能出现锁等待。</p><p>随着业务发展，需要对某些字段垂直拆分<br>这里就不举例了。在实际业务中都可能会碰到，有些不经常访问或者更新频率低的字段应该从大表中分离出去。</p><p>数据量快速增长<br>随着业务的快速发展，单表中的数据量会持续增长，当性能接近瓶颈时，就需要考虑水平切分，做分库分表了。</p>]]></content>
      
      
      <categories>
          
          <category> 分库分表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本编写</title>
      <link href="/zwhblog.cn/2021/01/16/shell-bian-cheng/centos-bian-xie-shell-jiao-ben/"/>
      <url>/zwhblog.cn/2021/01/16/shell-bian-cheng/centos-bian-xie-shell-jiao-ben/</url>
      
        <content type="html"><![CDATA[<h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><p>部分转载自：<a href="https://www.cnblogs.com/jacktian-it/p/11556826.html">https://www.cnblogs.com/jacktian-it/p/11556826.html</a></p><h2 id="命令的语法"><a href="#命令的语法" class="headerlink" title="$命令的语法"></a>$命令的语法</h2><p>$0 shell命令本身</p><p>$1~$9    表示shell的第几个参数</p><p>$？    显示最后命令的执行情况</p><p>$#    传递到脚本的参数个数</p><p>$$    脚本运行的当前进程id号</p><p>$*     单字符串显示所有向脚本传递的参数</p><p>$!        后台运行的最后一个进程的 ID 号   </p><p>$-        显示 Shell 使用的当前选项 </p><h2 id="“”、’’、-的区别"><a href="#“”、’’、-的区别" class="headerlink" title="“”、’’、``的区别"></a>“”、’’、``的区别</h2> <pre class="line-numbers language-none"><code class="language-none"> `` 是命令替换，执行你的命令''   单引号是单纯的字符，不会引用""双引号是可以引用的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="bash环境变量配置"><a href="#bash环境变量配置" class="headerlink" title="bash环境变量配置"></a>bash环境变量配置</h1><p>在编写Shell脚本之前，首先要配置好<br>JDK1.8<br>/etc/profile 环境变量，否则用户没有权限就无法跨界点访问</p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME=/usr/java/jdk1.8export CLASSPATH=.:${JAVA_HOME}/jre/lib/rt.jar:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jarexport PATH=$PATH:${JAVA_HOME}/bin           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>~/bashrc文件   环境变量的设置只对用户自己生效，配置这个文件，使用bash命令，只要以该用户身份运行命令行就会读取到该文件。</p><p>在所有节点上执行这个命令</p><pre class="line-numbers language-none"><code class="language-none">cat /etc/profile &gt;&gt; ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="所有节点运行相同命令脚本"><a href="#所有节点运行相同命令脚本" class="headerlink" title="所有节点运行相同命令脚本"></a>所有节点运行相同命令脚本</h1><p>写的时候注意，中间没有逗号</p><pre class="line-numbers language-none"><code class="language-none">#! /bin/bashfor i in hadoop1 hadoop2 hadoop3do        echo --------- $i ----------        ssh $i "$*"done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>i  是循环的变量（hadoop1,hadoop2,hadoop3），do是要干的事情，done是结束语句，这三个是shell中for循环一体的</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM</title>
      <link href="/zwhblog.cn/2021/01/16/spring/spring-ssm-zheng-he-kuang-jia-si/"/>
      <url>/zwhblog.cn/2021/01/16/spring/spring-ssm-zheng-he-kuang-jia-si/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM开发环境搭建"><a href="#SSM开发环境搭建" class="headerlink" title="SSM开发环境搭建"></a>SSM开发环境搭建</h1><p>SSM是Spring为中心，来整合其他框架</p><h2 id="搭建Spring"><a href="#搭建Spring" class="headerlink" title="搭建Spring"></a>搭建Spring</h2><p>Mybatis会给你生成实现类，你只要写接口就好了.</p><p>编写dao层和service层的接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>    <span class="token comment">// 查询所有账户</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from account"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 保存帐户信息</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into account (name,money) values (#{name},#{money})"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token comment">// 查询所有账户</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 保存帐户信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring整合SpringMvc"><a href="#Spring整合SpringMvc" class="headerlink" title="Spring整合SpringMvc"></a>Spring整合SpringMvc</h2><ol><li>配置Spring配置文件  <strong>applicatiocontext.xml</strong></li></ol><p>创建 applicationcontext.xml 配置文件，导入他们的头部文件</p><p>因为service和dao层由Spring来管理，而Controller由SpringMvc来，所以在扫描的时候不需要让他去扫描</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsdhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsdhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--开启注解的扫描，希望处理service和dao，controller不需要Spring框架去处理--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--配置哪些注解不扫描  写了controller的全路径--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--Spring整合MyBatis框架--&gt;</span>    <span class="token comment">&lt;!--配置连接池--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql:///ssm<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置SqlSessionFactory工厂--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置AccountDao接口所在包--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperScanner<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast.dao<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--配置Spring框架声明式事务管理--&gt;</span>    <span class="token comment">&lt;!--配置事务管理器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置事务通知--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">isolation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEFAULT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置AOP增强--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* cn.itcast.service.impl.*ServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>配置SpringMvc的两个文件：</li></ol><p><strong>springmvc.xml</strong>:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--开启注解扫描，只扫描Controller注解--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置的视图解析器对象--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--过滤静态资源--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/css/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--开启SpringMVC注解的支持--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>web.xml</strong>:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">web-app</span> <span class="token name">PUBLIC</span> <span class="token string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span> <span class="token string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">&gt;</span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--配置Spring的监听器，默认只加载WEB-INF目录下的applicationContext.xml配置文件--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--设置配置文件的路径--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--配置前端控制器--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--加载springmvc.xml配置文件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--启动服务器，创建该servlet--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--解决中文乱码的过滤器--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring整合Mybatis"><a href="#Spring整合Mybatis" class="headerlink" title="Spring整合Mybatis"></a>Spring整合Mybatis</h2><p>更改Spring配置文件applicationcontext.xml，加入以下内容，将sessionfactory、dao、代理对象 都存入到ioc容器中</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--Spring整合MyBatis框架--&gt;</span><span class="token comment">&lt;!--配置连接池--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql:///ssm<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--配置SqlSessionFactory工厂--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--配置AccountDao接口所在包--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperScanner<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast.dao<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h3><p>在applicationcontext.xml添加以下内容</p><h1 id="元注解说明"><a href="#元注解说明" class="headerlink" title="元注解说明"></a>元注解说明</h1><p>@Target()<br>说明了这个注解可以作用的范围，<br>method就是可以作用在方法上，type就是类和接口</p>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
            <tag> Java框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习</title>
      <link href="/zwhblog.cn/2021/01/16/spring/springboot-kuang-jia-wu/"/>
      <url>/zwhblog.cn/2021/01/16/spring/springboot-kuang-jia-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="原有Spring优缺点分析"><a href="#原有Spring优缺点分析" class="headerlink" title="原有Spring优缺点分析"></a>原有Spring优缺点分析</h2><p>Spring是java企业版j2ee的轻量级代替品。</p><p>虽然Spring的组件代码是轻量级的，但它的配置却是重量级的。一开始，Spring用XML配置，而且是很多XML配 置。Spring 2.5引入了基于注解的组件扫描，这消除了大量针对应用程序自身组件的显式XML配置。Spring 3.0引入 了基于Java的配置，这是一种类型安全的可重构配置方式，可以代替XML。</p><p>所有这些配置都代表了开发时的损耗。因为在思考Spring特性配置和解决业务问题之间需要进行思维切换，所以编 写配置挤占了编写应用程序逻辑的时间。和所有框架一样，Spring实用，但与此同时它要求的回报也不少。</p><p>除此之外，项目的依赖管理也是一件耗时耗力的事情。在环境搭建时，需要分析要导入哪些库的坐标，而且还需要分析导入与之有依赖关系的其他库的坐标，一旦选错了依赖的版本，随之而来的不兼容问题就会严重阻碍项目的开发进度 。</p><h2 id="SpringBoot常用注解"><a href="#SpringBoot常用注解" class="headerlink" title="SpringBoot常用注解"></a>SpringBoot常用注解</h2><h4 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h4><p>表明这是个启动类</p><p>项目在tomcat部署并启动，项目的扫描范围它默认是启动类的包以及它的子包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h4><p>返回前端请求类型并指明这是个控制类</p><p>里面包含了ResponseBody和Controller两个标签</p><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><p>自动配置的环境注解</p><h4 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h4><p>配置文件</p><h4 id="获取配置信息的注解"><a href="#获取配置信息的注解" class="headerlink" title="获取配置信息的注解"></a>获取配置信息的注解</h4><h5 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h5><p>方法和参数上可以使用</p><p>通过@Value注解将配置文件的值映射到Spring管理的Bean字段上面</p><h5 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h5><pre class="line-numbers language-none"><code class="language-none">@ConfigurationProperties(prefix = "person")指明配置文件中的前缀同时属性要提供get set方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--热部署配置--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>setting    -&gt;    compiler -&gt;    build project automatically</p><p>ctrl  shift alt /  配置compiler …. runner</p><p><img src="https://img-blog.csdnimg.cn/20201126133131201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java框架 </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring常用注解</title>
      <link href="/zwhblog.cn/2021/01/16/spring/spring-chang-yong-zhu-jie-zong-jie/"/>
      <url>/zwhblog.cn/2021/01/16/spring/spring-chang-yong-zhu-jie-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><p>是Sprnig Boot项目的核心注解，目的是开启自动配置</p><p>实现了以下三个注解的功能：</p><p><strong>@EnableAutoConfiguration</strong>：启用Spring Boot的自动配置机制</p><p><strong>@ComponentScan</strong>：启用@Component对应用程序所在的软件包的扫描</p><p><strong>@Configuration</strong>：允许在上下文中注册额外的bean或导入其他配置类</p><h2 id="Enable"><a href="#Enable" class="headerlink" title="@Enable*"></a>@Enable*</h2><p>启用什么什么服务，里面会import导入配置类</p><h2 id="Table"><a href="#Table" class="headerlink" title="@Table"></a>@Table</h2><p>spring @Table注解  作用是 ： 声明此对象映射到数据库的数据表，通过它可以为实体指定表(talbe)</p><p>常用的两个属性：<br>1、name 用来命名 当前实体类 对应的数据库 表的名字 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"tab_user"</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、uniqueConstraints 用来批量命名唯一键<br>其作用等同于多个：@Column(unique = true)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"tab_user"</span><span class="token punctuation">,</span>uniqueConstraints <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@UniqueConstraint</span><span class="token punctuation">(</span>columnNames<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"uid"</span><span class="token punctuation">,</span><span class="token string">"email"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Basic"><a href="#Basic" class="headerlink" title="@Basic"></a>@Basic</h2><p>@Basic表示一个简单的属性到数据库表的字段的映射,对于没有任何标注的getXxxx()方法,默认 即为 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Basic</span>　　<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>、<span class="token class-name">FetchType</span><span class="token punctuation">.</span>LAZY：懒加载，加载一个实体时，定义懒加载的属性不会马上从数据库中加载。　　<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>、<span class="token class-name">FetchType</span><span class="token punctuation">.</span>EAGER：急加载，加载一个实体时，定义急加载的属性会立即从数据库中加载。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span><span class="token annotation punctuation">@Basic</span><span class="token punctuation">(</span>fetch<span class="token operator">=</span><span class="token class-name">FetchType</span><span class="token punctuation">,</span>optional<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> address<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h2><p>@Column描述了数据库表中该字段的详细定义,这对于根据JPA注解生成数据库表结构的工具非常 有作用.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Column</span><span class="token operator">:</span>　　name<span class="token operator">:</span>表示数据库表中该字段的名称<span class="token punctuation">,</span>默认情形属性名称一致　　nullable<span class="token operator">:</span>表示该字段是否允许为<span class="token keyword">null</span><span class="token punctuation">,</span>默认为<span class="token boolean">true</span>　　unique<span class="token operator">:</span>表示该字段是否是唯一标识<span class="token punctuation">,</span>默认为<span class="token boolean">false</span>　　length<span class="token operator">:</span>表示该字段的大小<span class="token punctuation">,</span>仅对<span class="token class-name">String</span>类型的字段有效　　insertable<span class="token operator">:</span>表示在ORM框架执行插入操作时<span class="token punctuation">,</span>该字段是否应出现INSETRT语句中<span class="token punctuation">,</span>默认为<span class="token boolean">true</span>　　updateable<span class="token operator">:</span>表示在ORM框架执行更新操作时<span class="token punctuation">,</span>该字段是否应该出现在UPDATE语句中<span class="token punctuation">,</span>默认为 <span class="token boolean">true</span><span class="token punctuation">.</span>对于一经创建就不可以更改的字段<span class="token punctuation">,</span>该属性非常有用<span class="token punctuation">,</span>如对于birthday字段<span class="token punctuation">.</span>　　columnDefinition<span class="token operator">:</span>表示该字段在数据库中的实际类型<span class="token punctuation">.</span>通常ORM框架可以根据属性类型自动判 断数据库中字段的类型<span class="token punctuation">,</span>但是对于<span class="token class-name">Date</span>类型仍无法确定数据库中字段类型究竟是DATE<span class="token punctuation">,</span>TIME还是 TIMESTAMP<span class="token punctuation">.</span>此外<span class="token punctuation">,</span><span class="token class-name">String</span>的默认映射类型为VARCHAR<span class="token punctuation">,</span>如果要将<span class="token class-name">String</span>类型映射到特定数据库的 BLOB或TEXT字段类型<span class="token punctuation">,</span>该属性非常有用<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"BIRTH"</span><span class="token punctuation">,</span>nullable<span class="token operator">=</span><span class="token string">"false"</span><span class="token punctuation">,</span>columnDefinition<span class="token operator">=</span><span class="token string">"DATE"</span><span class="token punctuation">)</span>　　<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBithday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> birthday<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="id"><a href="#id" class="headerlink" title="@id"></a>@id</h2><p>@Id 标注用于声明一个实体类的属性映射为数据库的主键列。<br>该属性通常置于属性声明语句之前，可与声明语句同行，也可写在单独行上。<br>@Id标注也可置于属性的getter方法之前。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Basic</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h2><p>用于指定scope作用域的（用在类上）</p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p><a href="https://blog.csdn.net/qiuz1024/article/details/100530260">@Configuration推荐文章连接</a><br>从Spring3.0，@Configuration用于定义配置类，可替换xml配置文件，被注解的类内部包含有一个或多个被@Bean注解的方法，这些方法将会被AnnotationConfigApplicationContext或AnnotationConfigWebApplicationContext类进行扫描，并用于构建bean定义，初始化Spring容器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">TestConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TestConfiguration容器启动初始化。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">TestConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TestConfiguration容器启动初始化。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// @Bean注解注册bean,同时可以指定初始化和销毁方法</span>    <span class="token comment">// @Bean(name="testBean",initMethod="start",destroyMethod="cleanUp")</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">TestBean</span> <span class="token function">testBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TestBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h2><p>Spring的@Bean注解用于告诉方法，产生一个Bean对象，然后这个Bean对象交给Spring管理。产生这个Bean对象的方法Spring只会调用一次，随后这个Spring将会将这个Bean对象放在自己的IOC容器中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token operator">:</span>value： name属性的别名，在不需要其他属性时使用，也就是说value 就是默认值name： 此bean 的名称，或多个名称，主要的bean的名称加别名。如果未指定，则bean的名称是带注解方法的名称。如果指定了，方法的名称就会忽略，如果没有其他属性声明的话，bean的名称和别名可能通过value属性配置initMethod ：指定初始化方法             destroyMethod：指定销毁的方法    PS：相当于xml文件中 init<span class="token operator">-</span>method <span class="token operator">&amp;</span>destroy<span class="token operator">-</span>method属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="token相关注解："><a href="#token相关注解：" class="headerlink" title="token相关注解："></a>token相关注解：</h2><p>下面两个注解是token的请求相关的，官网文档地址：<br><a href="https://docs.spring.io/spring-security-oauth2-boot/docs/2.2.0.RELEASE/reference/html5/">https://docs.spring.io/spring-security-oauth2-boot/docs/2.2.0.RELEASE/reference/html5/</a></p><h3 id="EnableAuthorizationServer"><a href="#EnableAuthorizationServer" class="headerlink" title="@EnableAuthorizationServer"></a>@EnableAuthorizationServer</h3><p>启用授权服务器，默认情况下，@EnableAuthorizationServer授予客户端访问客户端凭据的权限<br>与其他Spring Boot@Enable注释类似，可以将@EnableAuthorizationServer注释添加到main方法的类中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@EnableAuthorizationServer</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleAuthorizationServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SimpleAuthorizationServerApplication</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EnableResourceServer"><a href="#EnableResourceServer" class="headerlink" title="@EnableResourceServer"></a>@EnableResourceServer</h3><p>指定用于验证承载令牌的策略，添加此注释会添加OAuth2AuthenticationProcessingFilter，尽管它还需要进行其他配置才能知道如何适当地处理和验证令牌。</p><p>与其他Spring Boot@Enable注释类似，可以将@EnableResourceServer注释添加到main方法的类中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@EnableResourceServer</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleAuthorizationServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SimpleAuthorizationServerApplication</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EnableWebSecurity"><a href="#EnableWebSecurity" class="headerlink" title="@EnableWebSecurity"></a>@EnableWebSecurity</h3><p>参考文章：<a href="https://blog.csdn.net/andy_zhang2007/article/details/90023901">https://blog.csdn.net/andy_zhang2007/article/details/90023901</a><br>首先,EnableWebSecurity注解是个组合注解,他的注解中,又使用了@EnableGlobalAuthentication注解:<br>@EnableWebSecurity是Spring Security用于启用Web安全的注解。典型的用法是该注解用在某个Web安全配置类上(实现了接口WebSecurityConfigurer或者继承自WebSecurityConfigurerAdapter)。典型的使用例子如下 :</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebSecurityConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">WebSecurity</span> web<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>               web<span class="token punctuation">.</span><span class="token function">ignoring</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment">// Spring Security should completely ignore URLs starting with /resources/</span>                               <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/resources/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>               http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/public/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token comment">// Possibly more configuration ...</span>                               <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// enable form based log in</span>                               <span class="token comment">// set permitAll for all URLs associated with Form Login</span>                               <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>               auth               <span class="token comment">// enable in memory based authentication with a user named "user" and "admin"</span>               <span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">,</span> <span class="token string">"ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment">// Possibly more overridden methods ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h2><p>使用@Qualifier明确指定使用那个实现类了。</p><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>@Autowired 注释，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作<br>它是按照类型来自动进行标注</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>实现bean的注入<br>针对不同的使用场景所采取的特定功能化的注解。</p><h2 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h2><p>一般使用@Service注解标记这个类属于业务逻辑层。<br>就是针对不同的使用场景所采取的特定功能化的注解。</p><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>这个注解主要告诉Spring这个类作为控制器，可以看做标记为暴露给前端的入口。@Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法。通俗来说，被Controller标记的类就是一个控制器，这个类中的方法，就是相应的动作。<br>就是针对不同的使用场景所采取的特定功能化的注解。</p><h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h2><p>这个注解用来标识这个类是用来直接访问数据库的，dao层使用@repository注解。</p><h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><p>@Controller+@ResponseBody</p><h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><p>@ResponseBody的作用其实是将java对象转为json格式的数据。</p><p>@responseBody注解的作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML数据。</p><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>注解@RequestParam接收的参数是来自HTTP请求体或请求url的QueryString中。<br>@RequestParam有三个配置参数：</p><p>required 表示是否必须，默认为 true，必须。<br>defaultValue 可设置请求参数的默认值。<br>value 为接收url的参数名（相当于key值）。<br>@RequestParam用来处理 Content-Type 为 application/x-www-form-urlencoded 编码的内容，Content-Type默认为该属性。@RequestParam也可用于其它类型的请求，例如：POST、DELETE等请求。</p><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><p>注解@RequestBody接收的参数是来自requestBody中，即请求体。一般用于处理非 Content-Type: application/x-www-form-urlencoded编码格式的数据，比如：application/json、application/xml等类型的数据。<br>通俗的讲，就是会把你传入的json字符解析成该参数类型的Javabean对象。</p><p>GET 方式无请求体，所以 @RequestBody 接收数据时，前端必须是 POST 方式进行提交，然后给页面的数据默认也是 json</p><p>同一个方法中，@RequestBody 与 @RequestParam() 可以同时使用，前者最多只能有一个，后者可以有多个</p><h2 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping"></a>@GetMapping</h2><p>@GetMapping 注解将 HTTP GET 请求映射到特定的处理程序方法。</p><h2 id="PostMapping"><a href="#PostMapping" class="headerlink" title="@PostMapping"></a>@PostMapping</h2><p>@GetMapping 注解将 HTTP POST 请求映射到特定的处理程序方法。</p><h2 id="PutMapping"><a href="#PutMapping" class="headerlink" title="@PutMapping"></a>@PutMapping</h2><p>@GetMapping 注解将 HTTP PUT 请求映射到特定的处理程序方法。</p><h2 id="DeleteMapping"><a href="#DeleteMapping" class="headerlink" title="@DeleteMapping"></a>@DeleteMapping</h2><p>@GetMapping 注解将 HTTP Delete 请求映射到特定的处理程序方法。</p><h2 id="Select"><a href="#Select" class="headerlink" title="@Select"></a>@Select</h2><p>在Mapper层使用@Select注解，以此省略掉mapper.xml文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　　　<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"&lt;script&gt;"</span>        <span class="token operator">+</span><span class="token string">"select * from mi_taobao where 1=1"</span>        <span class="token operator">+</span><span class="token string">"&lt;if test='status != null'&gt;"</span>        <span class="token operator">+</span><span class="token string">"and status = #{status}"</span>        <span class="token operator">+</span><span class="token string">"&lt;/if&gt;"</span>        <span class="token operator">+</span><span class="token string">"&lt;/script&gt;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Taobao</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTaobao</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"SELECT "</span>            <span class="token operator">+</span> <span class="token string">" a.id, "</span>            <span class="token operator">+</span> <span class="token string">" a.role_name roleName, "</span>            <span class="token operator">+</span> <span class="token string">" a.enabled, "</span>            <span class="token operator">+</span> <span class="token string">" a.create_by createBy, "</span>            <span class="token operator">+</span> <span class="token string">" a.create_time createTime "</span>        <span class="token operator">+</span> <span class="token string">" FROM "</span>            <span class="token operator">+</span> <span class="token string">" sys_role a "</span>        <span class="token operator">+</span> <span class="token string">" WHERE "</span>        <span class="token operator">+</span> <span class="token string">" a.id = #{roleId}"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token class-name">SysRole</span> <span class="token function">selectSysRoleById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> roleId<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MapperScan"><a href="#MapperScan" class="headerlink" title="@MapperScan"></a>@MapperScan</h2><p>指定要变成实现类的接口所在的包，然后包下面的所有接口在编译之后都会生成相应的实现类<br>在Springboot启动类上面添加</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment">//@EnableEurekaClient</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.winter.dao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootMybatisDemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringbootMybatisDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>多个包扫描：<span class="token annotation punctuation">@SpringBootApplication</span>  <span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"com.kfit.demo"</span><span class="token punctuation">,</span><span class="token string">"com.kfit.user"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h2><p>作用在实体类上，生成对应的getset方法，需要导入lombok包</p><h2 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h2><p>作用在实体类上，生成对应的无参构造方法，需要导入lombok包</p><h2 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h2><p>作用在实体类上，生成对应的有参构造方法，需要导入lombok包</p><h2 id="Param"><a href="#Param" class="headerlink" title="@Param"></a>@Param</h2><p>作为Dao层的注解，作用是用于传递参数，从而可以与SQL中的的字段名相对应，一般在2=&lt;参数数&lt;=5时使用最佳。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Role</span><span class="token punctuation">&gt;</span></span> <span class="token function">findRoleByAnnotation</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"roleName"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> roleName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"note"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> note<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findRoleByMap"</span> parameterType<span class="token operator">=</span><span class="token string">"map"</span> resultType<span class="token operator">=</span><span class="token string">"role"</span><span class="token operator">&gt;</span>    <span class="token class-name">SELECT</span> id<span class="token punctuation">,</span>name FROM t_role    <span class="token class-name">WHERE</span> roleName<span class="token operator">=</span>#<span class="token punctuation">{</span>roleName<span class="token punctuation">}</span>    <span class="token class-name">AND</span> note<span class="token operator">=</span>#<span class="token punctuation">{</span>note<span class="token punctuation">}</span><span class="token generics"><span class="token punctuation">&lt;</span>select<span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h2><p>@Resource和@Autowired注解都是用来实现依赖注入的。只是@AutoWried按by type自动注入，而@Resource默认按byName自动注入。</p><p>@Resource有两个重要属性，分别是name和type</p><p>spring将name属性解析为bean的名字，而type属性则被解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略，如果使用type属性则使用byType的自动注入策略。如果都没有指定，则通过反射机制使用byName自动注入策略。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@Resource</span> <span class="token punctuation">(</span>name<span class="token operator">=</span> <span class="token string">"baseDao"</span> <span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">BaseDao</span> baseDao<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a>@ControllerAdvice</h2><p>是一个增强的 Controller。使用这个 Controller ，可以实现三个方面的功能：</p><ol><li>全局异常处理</li><li>全局数据绑定</li><li>全局数据预处理<br>异常集中处理，更好的使业务逻辑与异常处理剥离开；其是对Controller层进行拦截</li></ol><p>注意事项: </p><p>一个Controller下多个@ExceptionHandler上的异常类型不能出现一样的，否则运行时抛异常.</p><p>   @ExceptionHandler method mapped for;</p><p>@ExceptionHandler下方法返回值类型支持多种，常见的ModelAndView，@ResponseBody注解标注，ResponseEntity等类型都OK.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorController</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h2><p>统一处理某一类异常，从而能够减少代码重复率和复杂度</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token comment">/** * 统一错误处理 */</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RequestResults</span> <span class="token function">customException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RequestResults</span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        results<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">RequestStatusEnum</span><span class="token punctuation">.</span>SYSTEM_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        results<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token class-name">RequestStatusEnum</span><span class="token punctuation">.</span>SYSTEM_ERROR<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        results<span class="token punctuation">.</span><span class="token function">setSystemErrorMsg</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        results<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> results<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ResponseStatus"><a href="#ResponseStatus" class="headerlink" title="@ResponseStatus"></a>@ResponseStatus</h2><p>可以将某种异常映射为HTTP状态码</p><h2 id="AOP注解："><a href="#AOP注解：" class="headerlink" title="AOP注解："></a>AOP注解：</h2><h3 id="Aspect"><a href="#Aspect" class="headerlink" title="@Aspect"></a>@Aspect</h3><p>作用是把当前类标识为一个切面供容器读取</p><h3 id="Before"><a href="#Before" class="headerlink" title="@Before"></a>@Before</h3><p>前置通知, 在方法执行之前执行</p><h3 id="After"><a href="#After" class="headerlink" title="@After"></a>@After</h3><p>后置通知, 在方法执行之后执行，final增强，不管是抛出异常或者正常退出都会执行</p><h3 id="AfterRunning"><a href="#AfterRunning" class="headerlink" title="@AfterRunning"></a>@AfterRunning</h3><p>返回通知, 在方法返回结果之后执行，方法正常退出时执行</p><h3 id="AfterThrowing"><a href="#AfterThrowing" class="headerlink" title="@AfterThrowing"></a>@AfterThrowing</h3><p>异常通知, 在方法抛出异常之后<br>异常抛出增强，相当于ThrowsAdvice</p><h3 id="Around"><a href="#Around" class="headerlink" title="@Around"></a>@Around</h3><p>环绕通知, 围绕着方法执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PostDataAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(org.springframework.web.bind.annotation.PostMapping)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"post()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> point<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token comment">//执行方法</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果是返回的结果对象就直接返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">RequestResults</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">RequestResults</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Pointcut"><a href="#Pointcut" class="headerlink" title="@Pointcut"></a>@Pointcut</h3><p>Pointcut是植入Advice的触发条件。每个Pointcut的定义包括2部分，一是表达式，二是方法签名。方法签名必须是 public及void型。可以将Pointcut中的方法看作是一个被Advice引用的助记符，因为表达式不直观，因此我们可以通过方法签名的方式为 此表达式命名。因此Pointcut中的方法只需要方法签名，而不需要在方法体内编写实际代码。<br>切入点，指定说明匹配的方法或者是</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>定义了这个   <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(org.springframework.web.bind.annotation.PostMapping)"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>　定义了这个包及子包下面的所有方法进行匹配<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AopPointcutClass</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.spring.service..*(..))"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logsMean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AfterReturning"><a href="#AfterReturning" class="headerlink" title="@AfterReturning"></a>@AfterReturning</h3><p>后置增强，相当于AfterReturningAdvice，方法正常退出时执行</p><h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span><span class="token number">1.</span>创建一个配置类，在配置类上添加 <span class="token annotation punctuation">@ComponentScan</span> 注解。该注解默认会扫描该类所在的包下所有的配置类，相当于之前的 <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">&gt;</span>。<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"io.mieux.controller"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token number">2.</span>basePackageClasses属性会去扫描类所在包下的所有组件，而不是指定某个组件！  basePackages 属性会扫描指定的组件，也可以指定当前类的所有组件  但得写成：<span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"controller.**"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>  综上， 可以分析出，<span class="token operator">*</span><span class="token operator">*</span>匹配任意<span class="token keyword">class</span>文件和包，而<span class="token operator">*</span>只能匹配包，因此无法扫描到包下的类，因此也就无法被<span class="token class-name">Spring</span>管理。<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"com.common.config.aspect"</span>        <span class="token punctuation">,</span><span class="token string">"com.common.config.error"</span>        <span class="token punctuation">,</span><span class="token string">"com.common.config.auth"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> basePackageClasses <span class="token operator">=</span> <span class="token class-name">AutoDriveApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h2><p>@Primary 告诉spring 在犹豫的时候优先选择哪一个具体的实现。<br>在有多个实现类在自动注入时，</p><h2 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h2><p>用于指定初始化方法（用在方法上）</p><h2 id="PreDestory"><a href="#PreDestory" class="headerlink" title="@PreDestory"></a>@PreDestory</h2><p>用于指定销毁方法（用在方法上）</p><h2 id="EnableWebSocket"><a href="#EnableWebSocket" class="headerlink" title="@EnableWebSocket"></a>@EnableWebSocket</h2><h2 id="ServerEndpoint"><a href="#ServerEndpoint" class="headerlink" title="@ServerEndpoint"></a>@ServerEndpoint</h2><p>这个注解指明了Encoders and Decoders（编码器和解码器）</p><h2 id="KafkaListener"><a href="#KafkaListener" class="headerlink" title="@KafkaListener"></a>@KafkaListener</h2><p>@KafkaListeners是@KafkaListener的Container Annotation，这也是jdk8的新特性之一，注解可以重复标注。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"topic1"</span><span class="token punctuation">,</span><span class="token string">"topic2"</span><span class="token punctuation">,</span><span class="token string">"topic3"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> consumerRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-框架一</title>
      <link href="/zwhblog.cn/2021/01/16/spring/mybatis-de-jian-dan-shi-yong-kuang-jia-yi/"/>
      <url>/zwhblog.cn/2021/01/16/spring/mybatis-de-jian-dan-shi-yong-kuang-jia-yi/</url>
      
        <content type="html"><![CDATA[<p>最近要写接口，赶时间，看了下黑马视频，原理没有涉及到，后续再好好刷一次，具体掌握如何使用</p><blockquote><p>参考文章:  <a href="https://blog.csdn.net/hejingyuan6/article/details/36203505#">https://blog.csdn.net/hejingyuan6/article/details/36203505#</a></p></blockquote><p>@[toc]</p><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="什么是Mybatis？"><a href="#什么是Mybatis？" class="headerlink" title="什么是Mybatis？"></a>什么是Mybatis？</h2><p>持久层框架，底层是用java编写的</p><p>它封装了jdbc操作的很多细节，只用关注sql本身，无需关注注册驱动，创建链接等繁杂过程，使用了ORM(对象关系映射)思想实现了结果集的封装</p><h2 id="技术解决方案"><a href="#技术解决方案" class="headerlink" title="技术解决方案"></a>技术解决方案</h2><p>JDBC：</p><p>connection</p><p>PreparedStatement</p><p>ResultSet</p><p>Spring的JdbcTemplate</p><p>Spring对JDBC的简单封装</p><p>Apache的DBUtils</p><p>他和Spring的JDBCTemplate很像，也是对JDBC的简单封装</p><h2 id="Mybatis环境搭建"><a href="#Mybatis环境搭建" class="headerlink" title="Mybatis环境搭建"></a>Mybatis环境搭建</h2><ul><li><p>创建maven工程导入坐标</p></li><li><p>创建实体类和dao层接口</p></li><li><p>创建mybatis的主配置文件</p></li><li><p>创建映射配置文件</p></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>创建.xml文件是为了保持和之前<strong>文件目录结构</strong>保持一致。持久层操作接口名称和映射文件一一对应</p></li><li><p>mybatis映射文件位置必须和dao层接口的包结果相同</p></li><li><p>映射配置文件的mapper标签namespace属性的取值必须是dao接口的全限定类名</p></li><li><p>映射配置文件操作配置，select id 属性值必须是dao接口的方法名</p></li></ul><h3 id="搭建的不同方式"><a href="#搭建的不同方式" class="headerlink" title="搭建的不同方式"></a>搭建的不同方式</h3><p>有两种方式，一种是XML文件的方式，一种是注解的方式，还可以实现你的接口来实现功能</p><h4 id="XML文件的方式配置"><a href="#XML文件的方式配置" class="headerlink" title="XML文件的方式配置"></a>XML文件的方式配置</h4><p>使用XML方式，需要在主配置文件中指定mapper的<strong>resource</strong><br>不需要使用注解，需要你生成一个XML文件来存放映射关系</p><p>使用XML方式，需要在主配置文件中指定mapper的<strong>resource</strong><br><img src="https://img-blog.csdnimg.cn/20201125202927769.png#pic_center" alt="在这里插入图片描述"><br>不需要使用注解，需要你生成一个XML文件来存放映射关系</p><h5 id="主配置文件："><a href="#主配置文件：" class="headerlink" title="主配置文件："></a>主配置文件：</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置properties--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcConfig.properties<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--使用typeAliases配置别名，它只能配置domain中类的别名 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.domain<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置环境--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 配置mysql的环境--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 配置事务 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--配置连接池--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置映射文件的位置 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.dao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--指定在哪个类中--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mybatisexercise.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--指定类中的方法和返回值类型--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mybatisexercise.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from user;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h4><p>使用注解的方式，需要在主配置文件中指定mapper的<strong>class</strong></p><p>然后在你的接口上使用注解</p><h3 id="读取配置文件两种方式"><a href="#读取配置文件两种方式" class="headerlink" title="读取配置文件两种方式"></a>读取配置文件两种方式</h3><h4 id="使用类加载器"><a href="#使用类加载器" class="headerlink" title="使用类加载器"></a>使用类加载器</h4><p>它只能读取类路径的配置文件</p><p>使用servletContext对象的个体Real Path()</p><h2 id="工厂模式的优势"><a href="#工厂模式的优势" class="headerlink" title="工厂模式的优势"></a>工厂模式的优势</h2><p>降低类之间的依赖关系，生产SqlSession就使用了工厂模式</p><h2 id="代理模式的优势"><a href="#代理模式的优势" class="headerlink" title="代理模式的优势"></a>代理模式的优势</h2><p>代理是一种常用的设计模式，其目的就是为其他对象提供一个代理以控制对某个对象的访问。代理类负责为委托类预处理消息，过滤消息并转发消息，以及进行消息被委托类执行后的后续处理。<br>更通俗的说，代理解决的问题当两个类需要通信时，引入第三方代理类，将两个类的关系解耦，让我们只了解代理类即可，而且代理的出现还可以让我们完成与另一个类之间的关系的统一管理，但是切记，代理类和委托类要实现相同的接口，因为代理真正调用的还是委托类的方法。</p><h3 id="1、静态代理"><a href="#1、静态代理" class="headerlink" title="1、静态代理"></a>1、静态代理</h3><p>由程序员创建代理类或特定工具自动生成源代码再对其编译。在程序运行前代理类的.class文件就已经存在了。<br><strong>优点：</strong></p><p>代理使客户端不需要知道实现类是什么，怎么做的，而客户端只需知道代理即可（解耦合），对于如上的客户端代码，newUserManagerImpl()可以应用工厂将它隐藏，如上只是举个例子而已。</p><p><strong>缺点：</strong><br>理类和委托类实现了相同的接口，代理类通过委托类实现了相同的方法。这样就出现了大量的代码重复。如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。</p><p>2）代理对象只服务于一种类型的对象，如果要服务多类型的对象。势必要为每一种对象都进行代理，静态代理在程序规模稍大时就无法胜任了</p><h3 id="2、动态代理"><a href="#2、动态代理" class="headerlink" title="2、动态代理"></a>2、动态代理</h3><p>动态代理是在运行时，通过反射机制实现动态代理，并且能够代理各种类型的对象</p><p>在程序运行时运用反射机制动态创建而成。<br>在Java中要想实现动态代理机制，需要java.lang.reflect.InvocationHandler  接口和 java.lang.reflect.Proxy 类的支持</p><p>java.lang.reflect.InvocationHandler接口的定义如下：</p><pre class="line-numbers language-none"><code class="language-none">//Object proxy:被代理的对象  //Method method:要调用的方法  //Object[] args:方法调用时所需要参数  public interface InvocationHandler {      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>java.lang.reflect.Proxy类的定义如下：</p><pre class="line-numbers language-none"><code class="language-none">//CLassLoader loader:类的加载器//Class&lt;?&gt; interfaces:得到全部的接口//InvocationHandler h:得到InvocationHandler接口的子类的实例public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) throws IllegalArgumentException<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>具体实现：</p><pre class="line-numbers language-none"><code class="language-none">//动态代理类只能代理接口（不支持抽象类），代理类都需要实现InvocationHandler类，实现invoke方法。该invoke方法就是调用被代理接口的所有方法时需要调用的，该invoke方法返回的值是被代理接口的一个实现类   public class LogHandler implements InvocationHandler { // 目标对象private Object targetObject;//绑定关系，也就是关联到哪个接口（与具体的实现类绑定）的哪些方法将被调用时，执行invoke方法。            public Object newProxyInstance(Object targetObject){this.targetObject=targetObject;//该方法用于为指定类装载器、一组接口及调用处理器生成动态代理类实例  //第一个参数指定产生代理对象的类加载器，需要将其指定为和目标对象同一个类加载器//第二个参数要实现和目标对象一样的接口，所以只需要拿到目标对象的实现接口//第三个参数表明这些被拦截的方法在被拦截时需要执行哪个InvocationHandler的invoke方法//根据传入的目标返回一个代理对象return Proxy.newProxyInstance(targetObject.getClass().getClassLoader(),targetObject.getClass().getInterfaces(),this);}@Override//关联的这个实现类的方法被调用时将被执行/*InvocationHandler接口的方法，proxy表示代理，method表示原对象被调用的方法，args表示方法的参数*/public Object invoke(Object proxy, Method method, Object[] args)throws Throwable {System.out.println("start--&gt;&gt;");for(int i=0;i&lt;args.length;i++){System.out.println(args[i]);}Object ret=null;try{/*原对象方法调用前处理日志信息*/System.out.println("satrt--&gt;&gt;");//调用目标方法ret=method.invoke(targetObject, args);/*原对象方法调用后处理日志信息*/System.out.println("success--&gt;&gt;");}catch(Exception e){e.printStackTrace();System.out.println("error--&gt;&gt;");throw e;}return ret;} }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点：</strong><br>我们可以通过LogHandler代理不同类型的对象，如果我们把对外的接口都通过动态代理来实现，那么所有的函数调用最终都会经过invoke函数的转发，因此我们就可以在这里做一些自己想做的操作，比如日志系统、事务、拦截器、权限控制等。这也就是AOP(面向切面编程)的基本原理。</p><h3 id="静态代理和动态代理区别："><a href="#静态代理和动态代理区别：" class="headerlink" title="静态代理和动态代理区别："></a>静态代理和动态代理区别：</h3><p>动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。而且动态代理的应用使我们的类职责更加单一，复用性更强</p><h2 id="Mybatis工作原理"><a href="#Mybatis工作原理" class="headerlink" title="Mybatis工作原理"></a>Mybatis工作原理</h2><ol><li>Mybatis在运行时，首先通过dom4j(还有其他XML解析技术)解析XML来解析你的SqlMapConfig文件，转换成input stream流。</li><li>使用input stream中的数据取出来生成一个Configuration配置对象，把Configuration中的参数取出来创建mysql connect对象，并构建SqlSessionFactory。</li><li>SqlSessionFactory单例模式创建SqlSession对象</li><li>SqlSession对象需要传入 .class 参数，并返回一个 .class接口的动态代理对象，供你调用</li><li>可以对这个对象进行操作，在执行时通过反射和动态代理来执行你的语句。</li></ol><h3 id="pojo对象"><a href="#pojo对象" class="headerlink" title="pojo对象"></a>pojo对象</h3><p>使用ognl对象解析对象字段的值，#{} 或 ${}括号中的值是pojo属性名称</p><h3 id="Mysql配置文件"><a href="#Mysql配置文件" class="headerlink" title="Mysql配置文件"></a>Mysql配置文件</h3><p>Mysql在Window中不区分大小写，在linx中区分大小写</p><h2 id="mybatis实体类和数据库的字段不匹配两种解决方案："><a href="#mybatis实体类和数据库的字段不匹配两种解决方案：" class="headerlink" title="mybatis实体类和数据库的字段不匹配两种解决方案："></a>mybatis实体类和数据库的字段不匹配两种解决方案：</h2><h3 id="一、更改xml配置文件sql语句和参数"><a href="#一、更改xml配置文件sql语句和参数" class="headerlink" title="一、更改xml配置文件sql语句和参数"></a>一、更改xml配置文件sql语句和参数</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span><span class="token punctuation">&gt;</span></span>insert into table (username,Sex) values(#{username},#{UserSex});<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>select username,sex as UserSex from user;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、ResultMap"><a href="#二、ResultMap" class="headerlink" title="二、ResultMap"></a>二、ResultMap</h3><p>上面那种方法语句多的时候太过于繁琐</p><p>可以使用resultMap</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--左边的是实体类字段，右边的是数据库字段，一一对应--&gt;</span><span class="token comment">&lt;!-- 配置 查询结果的列名和实体类的属性名的对应关系 ，这样写不区分大小写--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uSeR<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 主键字段的对应 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--非主键字段的对应--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userAddress<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userSex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userBirthday<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 根据queryVo的条件查询用户 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findUserByVo<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.domain.QueryVo<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select * from user where username like #{user.username}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><p>在使用ResuleMap时，在返回值定义要使用resultMap，而不是使用ResultType!  否则会找不到你这个类型而报错</p><h2 id="创建自定义注解"><a href="#创建自定义注解" class="headerlink" title="创建自定义注解"></a>创建自定义注解</h2><p>创建一个接口</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">@Retention(RetentionPolicy.RUNTIME)@Target(ElementType.METHOD)public @interface Select {    /**     * 配置SQL语句的     * @return     */    String value();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在代码上方使用注解</p><pre class="line-numbers language-none"><code class="language-none">@Target说明了 Annotation 所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。　　作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）　　取值(ElementType)有：　　　　1.CONSTRUCTOR:用于描述构造器　　　　　　　　2.FIELD:用于描述域　　　　　　　　3.LOCAL_VARIABLE:用于描述局部变量　　　　　　　　4.METHOD:用于描述方法　　　　　　　　5.PACKAGE:用于描述包　　　　　　　　6.PARAMETER:用于描述参数　　　　　　　　7.TYPE:用于描述类、接口(包括注解类型) 或enum声明　　　　@Retention：　　@Retention定义了该 Annotation 被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。　　作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）　　取值（RetentionPoicy）有：　　　　1.SOURCE:在源文件中有效（即源文件保留）　　　　2.CLASS:在class文件中有效（即class保留）　　　　3.RUNTIME:在运行时有效（即运行时保留）　　　　　　　　@Documented:　　@Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。　　@Inherited：　　@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。　　注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。　　当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JNDI数据源"><a href="#JNDI数据源" class="headerlink" title="JNDI数据源"></a>JNDI数据源</h2><p>JNDI（java naming and directory interface） 模仿的window系统的注册表。</p><p>注册表是kv类型的。k是绝对路径+名称，v是存放的数据。</p><p>JNDI中存放的就是对象。</p><p>JNDI视频没看，后期要看可以看58.59这两个视频</p><h2 id="XML标签导入外部配置文件"><a href="#XML标签导入外部配置文件" class="headerlink" title="XML标签导入外部配置文件"></a>XML标签导入外部配置文件</h2><h4 id="resource方式"><a href="#resource方式" class="headerlink" title="resource方式"></a>resource方式</h4><p>resuource来指定classpath的下的配置文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 配置properties--&gt;&lt;properties resource="jdbcConfig.properties"&gt;&lt;/properties&gt;&lt;dataSource type="POOLED"&gt;    &lt;property name="driver" value="${jdbc.driver}"&gt;&lt;/property&gt;    &lt;property name="url" value="${jdbc.url}"&gt;&lt;/property&gt;    &lt;property name="username" value="${jdbc.username}"&gt;&lt;/property&gt;    &lt;property name="password" value="${jdbc.password}"&gt;&lt;/property&gt;&lt;/dataSource&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="url绝对路径的方式"><a href="#url绝对路径的方式" class="headerlink" title="url绝对路径的方式"></a>url绝对路径的方式</h4><pre class="line-numbers language-none"><code class="language-none">&lt;properties url="G:\BaiduNetdiskDownload\第三天代码\day03_eesy_01datasourceAndTx\src\main\resources\jdbcConfig.properties"&gt;&lt;/properties&gt;&lt;dataSource type="POOLED"&gt;    &lt;property name="driver" value="${jdbc.driver}"&gt;&lt;/property&gt;    &lt;property name="url" value="${jdbc.url}"&gt;&lt;/property&gt;    &lt;property name="username" value="${jdbc.username}"&gt;&lt;/property&gt;    &lt;property name="password" value="${jdbc.password}"&gt;&lt;/property&gt;&lt;/dataSource&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实体类和实体类接口别名"><a href="#实体类和实体类接口别名" class="headerlink" title="实体类和实体类接口别名"></a>实体类和实体类接口别名</h2><h4 id="TypeAliases"><a href="#TypeAliases" class="headerlink" title="TypeAliases"></a>TypeAliases</h4><p>在使用标签的时候，返回值中写全路径，很繁琐</p><p>可以使用typeAliases来去进行取别名<br>虽然配置了，但一次一个类，太麻烦</p><pre class="line-numbers language-none"><code class="language-none">&lt;typeAliases&gt;       &lt;!--typeAlias用于配置别名。type属性指定的是实体类全限定类名。alias属性指定别名，当指定了别名就再区分大小写 --&gt;       &lt;typeAlias type="com.itheima.domain.User" alias="user"&gt;&lt;/typeAlias&gt;&lt;/typeAliases&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h4><p>使用上面的方式进行取别名，但是如果实体类太多，工作还是很繁琐，就可以使用<package>标签来完成<br>直接配置一个包里面所有的类的别名</package></p><pre class="line-numbers language-none"><code class="language-none"> &lt;typeAliases&gt; &lt;!--可以指定一个包，里面的类别名全部都是是类的名称，不区分大小写--&gt; &lt;/typeAliases&gt;&lt;package name="com.itheima.domain"&gt;&lt;/package&gt; &lt;/typeAliases&gt;&lt;!--也可以写在mappers中，package是指定dao接口所在的包，指定了之后不需要写mapper和resource了或者class了--&gt;&lt;mappers&gt;        &lt;!--  &lt;mapper resource="com/mybatisexercise/dao/UserDao.xml"/&gt;&lt;mapper class="com.mybatisexercise.dao.UserDao"/&gt;--&gt;    &lt;package name="com.exercise.dao"&gt;&lt;/package&gt;    &lt;/mappers&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><p>上面两个注解只能在SqlMapConfig.xml中使用，不能在和实体类对应的xml文件中使用</p><h2 id="Mybatis连接池"><a href="#Mybatis连接池" class="headerlink" title="Mybatis连接池"></a>Mybatis连接池</h2><h4 id="什么是连接池？"><a href="#什么是连接池？" class="headerlink" title="什么是连接池？"></a>什么是连接池？</h4><p>连接池可以减少我们获取链接所消耗的时间和开销</p><p>线程池，就是一个线程安全的集合来存储着连接对象。还实现了队列的特性：先进先出</p><h2 id="Mybatis连接池-1"><a href="#Mybatis连接池-1" class="headerlink" title="Mybatis连接池"></a>Mybatis连接池</h2><h3 id="三种类型的连接池"><a href="#三种类型的连接池" class="headerlink" title="三种类型的连接池"></a>三种类型的连接池</h3><p>主配置文件SQLMapConfig.xml中的dataSource标签，type就是表示使用何种连接池的方式</p><pre class="line-numbers language-none"><code class="language-none">type的取值：POOLED采用用了传统的javax.sql.DataSource规范的连接池mybatis中有针对规范的实现UNPOOLED采用了传统获取连接的方式，虽然也实现了javax.sql.DataSource接口，但是没有使用池的思想。他每次使用都会创建一个新的连接JNDI采用了服务器提供的JNDI技术实现的，来获取DataSource对象，不同服务器能拿到的DataSource对象是不一样的。注意：如果不是Web或者Maven的war工程是不能使用的，我们实际开发中使用的是Tomcat服务器，采用的连接池使用的是dbcp连接池 &lt;dataSource type="POOLED"&gt;&lt;!-- 配置连接数据库的4个基本信息 --&gt;&lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;&lt;property name="url" value="jdbc:mysql://localhost:3306/eesy_mybatis"/&gt;&lt;property name="username" value="root"/&gt;&lt;property name="password" value="1234"/&gt;&lt;/dataSource&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mybatis事务"><a href="#Mybatis事务" class="headerlink" title="Mybatis事务"></a>Mybatis事务</h2><h3 id="什么是事务？事物的四大特性"><a href="#什么是事务？事物的四大特性" class="headerlink" title="什么是事务？事物的四大特性"></a>什么是事务？事物的四大特性</h3><p> 对数据库的事务而言，应该具有以下几点：创建（create）、提交（commit）、回滚（rollback）、关闭（close）。对应地，MyBatis将事务抽象成了Transaction接口：其接口定义如下：<br> <img src="https://img-blog.csdnimg.cn/img_convert/30e58e0af991a2ea4a2b3aa9577b5d97.png" alt="img"><br> 不考虑隔离性会产生的问题</p><h3 id="事务的四种隔离机制"><a href="#事务的四种隔离机制" class="headerlink" title="事务的四种隔离机制"></a>事务的四种隔离机制</h3><blockquote><p>原文章连接：<a href="https://www.cnblogs.com/ubuntu1/p/8999403.html">https://www.cnblogs.com/ubuntu1/p/8999403.html</a></p></blockquote><p>数据库事务的隔离级别有4种，由低到高分别为<strong>Read uncommitted</strong> 、<strong>Read committed</strong> 、<strong>Repeatable read</strong> 、<strong>Serializable</strong> 。而且，在事务的并发操作中可能会出现脏读，不可重复读，幻读。</p><h4 id="Read-uncommitted"><a href="#Read-uncommitted" class="headerlink" title="Read uncommitted"></a>Read uncommitted</h4><p>读未提交，顾名思义，就是一个事务可以读取另一个未提交事务的数据。</p><p>事例：老板要给程序员发工资，程序员的工资是3.6万/月。但是发工资时老板不小心按错了数字，按成3.9万/月，该钱已经打到程序员的户口，但是事务还没有提交，就在这时，程序员去查看自己这个月的工资，发现比往常多了3千元，以为涨工资了非常高兴。但是老板及时发现了不对，马上回滚差点就提交了的事务，将数字改成3.6万再提交。</p><p>分析：实际程序员这个月的工资还是3.6万，但是程序员看到的是3.9万。他看到的是老板还没提交事务时的数据。这就是脏读</p><p><strong>那怎么解决可能的不可重复读问题？Repeatable read ！</strong></p><h4 id="Read-committed"><a href="#Read-committed" class="headerlink" title="Read committed"></a>Read committed</h4><p>读提交，顾名思义，就是一个事务要等另一个事务提交后才能读取数据。</p><p>事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（程序员事务开启），收费系统事先检测到他的卡里有3.6万，就在这个时候！！程序员的妻子要把钱全部转出充当家用，并提交。当收费系统准备扣款时，再检测卡里的金额，发现已经没钱了（第二次检测金额当然要等待妻子转出金额事务提交完）。程序员就会很郁闷，明明卡里是有钱的…</p><p>分析：这就是读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。但在这个事例中，出现了一个事务范围内两个相同的查询却返回了不同数据，这就是不可重复读。</p><h4 id="Repeatable-read"><a href="#Repeatable-read" class="headerlink" title="Repeatable read"></a>Repeatable read</h4><p>重复读，就是在开始读取数据（事务开启）时，不再允许修改操作</p><p>事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（事务开启，不允许其他事务的UPDATE修改操作），收费系统事先检测到他的卡里有3.6万。这个时候他的妻子不能转出金额了。接下来收费系统就可以扣款了。</p><p>分析：重复读可以解决不可重复读问题。写到这里，应该明白的一点就是，不可重复读对应的是修改，即UPDATE操作。但是可能还会有幻读问题。因为幻读问题对应的是插入INSERT操作，而不是UPDATE操作。</p><p>什么时候会出现幻读？</p><p>事例：程序员某一天去消费，花了2千元，然后他的妻子去查看他今天的消费记录（全表扫描FTS，妻子事务开启），看到确实是花了2千元，就在这个时候，程序员花了1万买了一部电脑，即新增INSERT了一条消费记录，并提交。当妻子打印程序员的消费记录清单时（妻子事务提交），发现花了1.2万元，似乎出现了幻觉，这就是幻读。</p><p><strong>那怎么解决幻读问题？Serializable！</strong></p><h4 id="Serializable-序列化"><a href="#Serializable-序列化" class="headerlink" title="Serializable 序列化"></a>Serializable 序列化</h4><p>Serializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。</p><p>值得一提的是：大多数数据库默认的事务隔离级别是Read committed，比如Sql Server , Oracle。Mysql的默认隔离级别是Repeatable read。</p><h2 id="Mybatis中基于XML配置的动态SQL语句的拼接"><a href="#Mybatis中基于XML配置的动态SQL语句的拼接" class="headerlink" title="Mybatis中基于XML配置的动态SQL语句的拼接"></a>Mybatis中基于XML配置的动态SQL语句的拼接</h2><h4 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h4><p>mappers配置文件中的几个标签</p><pre class="line-numbers language-none"><code class="language-none">&lt;if&gt;&lt;where&gt;&lt;foreach&gt;&lt;sql&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面介绍他们的使用：</p><h4 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h4><pre class="line-numbers language-none"><code class="language-none">不用标签正常是&lt;select id="findUserByCondition" resultMap="UserMap" parameterType="com.itheima.domain.User"&gt;            select * from user where 1=1                &lt;if test="userName!=null"&gt;                   and username=#{username}                &lt;/if&gt;                &lt;if test="userSex!=null"&gt;                   and sex=#{userSex}                &lt;/if&gt;&lt;/select&gt;用了where标签就是&lt;select id="findUserByCondition" resultMap="UserMap" parameterType="com.itheima.domain.User"&gt;            select * from user            &lt;where&gt;                &lt;if test="userName!=null"&gt;                   and username=#{username}                &lt;/if&gt;                &lt;if test="userSex!=null"&gt;                   and sex=#{userSex}                &lt;/if&gt;            &lt;/where&gt;&lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h4><pre class="line-numbers language-none"><code class="language-none">不用if标签，无法进行判断到底有没有传参数在多条件查询时必须使用这个标签！    &lt;select id="findUserByCondition" resultMap="UserMap" parameterType="com.itheima.domain.User"&gt;            select * from user where 1=1            &lt;where&gt;                &lt;if test="userName!=null"&gt;                   and username=#{username}                &lt;/if&gt;                &lt;if test="userSex!=null"&gt;                   and sex=#{userSex}                &lt;/if&gt;            &lt;/where&gt;    &lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h4><pre class="line-numbers language-none"><code class="language-none">遍历拼接字符的一个标签    &lt;select id="findUserInIds" resultMap="userMap" parameterType="QueryVo"&gt;        select * from user        &lt;where&gt;            &lt;if test="ids != null and ids.size()&gt;0"&gt;                &lt;foreach collection="ids" open="and id in (" close=")" item="uid" separator=","&gt;                    #{uid}                &lt;/foreach&gt;            &lt;/if&gt;        &lt;/where&gt;    &lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mybatis多表查询"><a href="#Mybatis多表查询" class="headerlink" title="Mybatis多表查询"></a>Mybatis多表查询</h2><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>实体和实体是一对一的关系，一对一使用查询使用</p><pre class="line-numbers language-none"><code class="language-none">&lt;resultMap id="userMap" type="account"&gt;&lt;!--这个是主键--&gt; &lt;id property="id" cloumn="aid"&gt;&lt;/id&gt;&lt;result property="uid" column="uid"&gt;&lt;/result&gt;&lt;result property="money" column="money"&gt;&lt;/result&gt;&lt;association property="user" column="uid" javaType="User"&gt;&lt;id property="id" cloumn="id"&gt;&lt;/id&gt;&lt;result property="user" column="username"&gt;&lt;/result&gt;&lt;result property="address" column="address"&gt;&lt;/result&gt;&lt;result property="sex" column="sex"&gt;&lt;/result&gt;&lt;result property="birthday" column="birthday"&gt;&lt;/result&gt;&lt;result&gt;&lt;/association&gt;&lt;/resultMap&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>一对多，多的那部分实体类使用集合的方式来装数据(list，array等)</p><pre class="line-numbers language-none"><code class="language-none">&lt;resultMap id="userMap" type="user"&gt;&lt;!--这个是主键--&gt; &lt;id property="id" cloumn="id"&gt;&lt;/id&gt;&lt;result property="username" column="username"&gt;&lt;/result&gt;&lt;result property="address" column="address"&gt;&lt;/result&gt;&lt;result property="sex" column="sex"&gt;&lt;/result&gt;&lt;result property="birthday" column="birthday"&gt;&lt;/result&gt;    &lt;!--实体对象中定义的集合名字，oftype是集合中装填的类型，这里取别名了--&gt;&lt;collection property="accounts" ofType="account"&gt;&lt;id column="aid" property="id"&gt;&lt;/id&gt;&lt;result property="uid" column="uid"&gt;&lt;/result&gt;&lt;result property="money" column="money"&gt;&lt;/result&gt;&lt;/collection&gt;&lt;/resultMap&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><pre class="line-numbers language-none"><code class="language-none">&lt;!--这个其实和一对多是一样的，把其中一个拿出来就行了--&gt; &lt;!--定义role表的ResultMap--&gt;    &lt;resultMap id="roleMap" type="role"&gt;        &lt;id property="roleId" column="rid"&gt;&lt;/id&gt;        &lt;result property="roleName" column="role_name"&gt;&lt;/result&gt;        &lt;result property="roleDesc" column="role_desc"&gt;&lt;/result&gt;        &lt;collection property="users" ofType="user"&gt;            &lt;id column="id" property="id"&gt;&lt;/id&gt;            &lt;result column="username" property="username"&gt;&lt;/result&gt;            &lt;result column="address" property="address"&gt;&lt;/result&gt;            &lt;result column="sex" property="sex"&gt;&lt;/result&gt;            &lt;result column="birthday" property="birthday"&gt;&lt;/result&gt;        &lt;/collection&gt;    &lt;/resultMap&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mybatis延迟加载"><a href="#Mybatis延迟加载" class="headerlink" title="Mybatis延迟加载"></a>Mybatis延迟加载</h2><h4 id="什么是延迟加载？"><a href="#什么是延迟加载？" class="headerlink" title="什么是延迟加载？"></a>什么是延迟加载？</h4><p>在真正使用数据是再发起查询，不用的时候不查。按需加载（懒加载）</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--必须写column属性，用户根据id查询时，所需要的参数的值select是表示调用的方法--&gt;    &lt;!-- 定义封装account和user的resultMap --&gt;&lt;resultMap id="accountUserMap" type="account"&gt;&lt;id property="id" column="id"&gt;&lt;/id&gt;&lt;result property="uid" column="uid"&gt;&lt;/result&gt;&lt;result property="money" column="money"&gt;&lt;/result&gt;&lt;!-- 一对一的关系映射：配置封装user的内容select属性指定的内容：查询用户的唯一标识：用什么去查    column属性指定的内容：用户根据id查询时，所需要的参数的值    --&gt;        &lt;association property="user" column="uid" javaType="user" select="com.itheima.dao.IUserDao.findById"&gt;&lt;/association&gt;&lt;/resultMap&gt;&lt;!--同时还要开启延迟加载的开关,在sqlMapConfig中配置为true--&gt;&lt;!--配置参数--&gt;&lt;settings&gt;&lt;!--开启Mybatis支持延迟加载--&gt;&lt;setting name="lazyLoadingEnabled" value="true"/&gt;&lt;setting name="aggressiveLazyLoading" value="false"&gt;&lt;/setting&gt;&lt;/settings&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201125200813570.png#pic_center" alt="在这里插入图片描述"></p><h4 id="什么是立即加载？"><a href="#什么是立即加载？" class="headerlink" title="什么是立即加载？"></a>什么是立即加载？</h4><p>不管用不用，只要一调用就立马发起查询</p><p>对应四种表关系，一对一，多对一，一对一，多对多。</p><p><strong>一对多，多对多：</strong>通常情况下采用延迟加载</p><p><strong>一对一，多对一：</strong>通常情况下使用立即加载</p><h2 id="Mybatis的缓存"><a href="#Mybatis的缓存" class="headerlink" title="Mybatis的缓存"></a>Mybatis的缓存</h2><h4 id="什么是缓存？"><a href="#什么是缓存？" class="headerlink" title="什么是缓存？"></a>什么是缓存？</h4><p>存在于内存中的临时数据，下次查询时，不需要再次查询，从而快速的获取数据。</p><h4 id="为什么使用缓存？缓存的配置"><a href="#为什么使用缓存？缓存的配置" class="headerlink" title="为什么使用缓存？缓存的配置"></a>为什么使用缓存？缓存的配置</h4><p>减少和数据库的交互次数，提高执行效率。</p><h4 id="什么样数据适用缓存，什么样数据不能使用？"><a href="#什么样数据适用缓存，什么样数据不能使用？" class="headerlink" title="什么样数据适用缓存，什么样数据不能使用？"></a>什么样数据适用缓存，什么样数据不能使用？</h4><p><strong>适用缓存：</strong>经常查询的，不经常改变的。</p><p>数据的正确与否队最终结果影响不大。</p><p><strong>不适用缓存：</strong></p><p>经常改变的数据</p><p>数据的正确与否队最终结果影响大</p><h3 id="Mybatis的一级缓存和二级缓存"><a href="#Mybatis的一级缓存和二级缓存" class="headerlink" title="Mybatis的一级缓存和二级缓存"></a>Mybatis的一级缓存和二级缓存</h3><h5 id="一级缓存："><a href="#一级缓存：" class="headerlink" title="一级缓存："></a>一级缓存：</h5><p>它指的是Mybatis中SqlSession对象的缓存，<strong>默认是开启的</strong></p><p>当我们执行查询后，查询的结果会同时存入到sql’session为我们提供一块区域</p><p>该区域的结构是一个map，当我们再次查询相同的数据时，mybatis会先去sqlsessin中查询是否有，有的话直接拿出来。</p><p>当sqlsession过期后，缓存也就消失了</p><pre class="line-numbers language-none"><code class="language-none">清除一级缓存,下面两个都可以清除缓存调用sqlsession.clearCache()sqlsession.close()一级缓存在调用sqlsession的修改，添加，删除，commit(),close()等方法，就会清空一级缓存缓存的同步一级缓存在调用sqlsession的修改，添加，删除，commit(),close()等方法，就会清空一级缓存，再次查询时就会重新查询<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="二级缓存："><a href="#二级缓存：" class="headerlink" title="二级缓存："></a>二级缓存：</h5><p>它指的是Mybatis中SqlSessionFactory对象的缓存。有同一个sqlSessionFactory创建的sqlsession共享缓存内容。二级缓存默认是不开启的。</p><p>二级缓存存放的是数据，不是对象！也就是对象会消除，数据不会，在查询二级缓存时，会新建对象指向数据，所以不同sqlsession使用同一个二级缓存时不是同一个对象</p><pre class="line-numbers language-none"><code class="language-none">使用步骤：第一步：让Mybatis框架支持二级缓存(在SQLMapConfig.xml中配置)第二步：让当前映射文件支持二级缓存（在IUserDao.xml中配置）&lt;cache/&gt;第三步：让当前的操作支持二级缓存，（在select标签中配置）&lt;select id="findById" parameterType="INT" resultType="user" UserCache="true"&gt;select * from user where id =#{id}&lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020112520150923.png#pic_center" alt="在这里插入图片描述"></p><h1 id="Mybatis注解开发"><a href="#Mybatis注解开发" class="headerlink" title="Mybatis注解开发"></a>Mybatis注解开发</h1><p>没看</p><p>从72开始看，看到75</p><p>注解开发只会用注解的方式省略掉实体类对应的.xml文件，sqlmapconfig.xml文件依然存在</p><h3 id="单表CRUD代理Dao方式"><a href="#单表CRUD代理Dao方式" class="headerlink" title="单表CRUD代理Dao方式"></a>单表CRUD代理Dao方式</h3><p>crud中一共有四个注解 @Insert @Update @Delete @Select</p><p>使用时直接写在你的实体接口上面写上直接调用即可</p><pre class="line-numbers language-none"><code class="language-none">public interface IUserDao {    /**     * 查询所有用户     * @return     */    @Select("select * from user")    List&lt;User&gt; findAll();    /**     * 保存用户     * @param user     */    @Insert("insert into user(username,address,sex,birthday)values(#{username},#{address},#{sex},#{birthday})")    void saveUser(User user);    /**     * 更新用户     * @param user     */    @Update("update user set username=#{username},sex=#{sex},birthday=#{birthday},address=#{address} where id=#{id}")    void updateUser(User user);    /**     * 删除用户     * @param userId     */    @Delete("delete from user where id=#{id} ")    void deleteUser(Integer userId);    /**     * 根据id查询用户     * @param userId     * @return     */    @Select("select * from user  where id=#{id} ")    User findById(Integer userId);    /**     * 根据用户名称模糊查询     * @param username     * @return     *///    @Select("select * from user where username like #{username} ")    @Select("select * from user where username like '%${value}%' ")    List&lt;User&gt; findUserByName(String username);    /**     * 查询总用户数量     * @return     */    @Select("select count(*) from user ")    int findTotalUser();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果注解和XML两种方式都存在，然后在sqlMapConfig.xml中配置选择其中一种，是会报错的。</p><p>Mybatis要求只能存在一种方式<img src="https://img-blog.csdnimg.cn/20201125202030728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="注解开发实体类和数据库字段名称不匹配的情况"><a href="#注解开发实体类和数据库字段名称不匹配的情况" class="headerlink" title="注解开发实体类和数据库字段名称不匹配的情况"></a>注解开发实体类和数据库字段名称不匹配的情况</h3><h4 id="Results注解"><a href="#Results注解" class="headerlink" title="@Results注解"></a>@Results注解</h4><pre class="line-numbers language-none"><code class="language-none">//这里的id是让别人来引用的，不用再写一遍了@Results(id="userMap",value={            @Result(id=true,column = "id",property = "userId"),            @Result(column = "username",property = "userName"),            @Result(column = "address",property = "userAddress"),            @Result(column = "sex",property = "userSex"),            @Result(column = "birthday",property = "userBirthday"),            @Result(property = "accounts",column = "id",                    many = @Many(select = "com.itheima.dao.IAccountDao.findAccountByUid",                                fetchType = FetchType.LAZY))    })    /**     * 根据id查询用户     * @param userId     * @return     *///这里就引用了上面写好的Results    @Select("select * from user  where id=#{id} ")    @ResultMap("userMap")    //@ResultMap("userMap")    //上面的整体的写法，但在只有一个参数的时候可以省略掉    User findById(Integer userId);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一对一-1"><a href="#一对一-1" class="headerlink" title="一对一"></a>一对一</h4><pre class="line-numbers language-none"><code class="language-none">/** * 查询所有用户 * @return */@Select("select * from user")@Results(id="userMap",value={        @Result(id=true,column = "id",property = "userId"),        @Result(column = "username",property = "userName"),        @Result(column = "address",property = "userAddress"),        @Result(column = "sex",property = "userSex"),        @Result(column = "birthday",property = "userBirthday"),        @Result(property = "accounts",column = "id",                many = @Many(select = "com.itheima.dao.IAccountDao.findAccountByUid",                            fetchType = FetchType.LAZY))})List&lt;User&gt; findAll();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多表查询操作"><a href="#多表查询操作" class="headerlink" title="多表查询操作"></a>多表查询操作</h4><p>mybatis<br>33 34中流程原理<br>preparedstatement</p>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java框架 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc学习</title>
      <link href="/zwhblog.cn/2021/01/16/spring/springmvc-jian-dan-shi-yong-kuang-jia-san/"/>
      <url>/zwhblog.cn/2021/01/16/spring/springmvc-jian-dan-shi-yong-kuang-jia-san/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMvc是什么？"><a href="#SpringMvc是什么？" class="headerlink" title="SpringMvc是什么？"></a>SpringMvc是什么？</h2><p>SpringMvc是一个表现层框架</p><p>后面框架整合的时候是先通过springmvc，spring</p><p>底层是Servlet，处理请求的机制是一个核心控制器</p><p>springmvc是一个基于servlet的mvc框架</p><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li>request请求发送过来</li><li>请求查找handler</li><li>由处理器映射器handlermappering 进行处理这个请求，<br>能够知道发送过来的请求让controller中哪个方法来帮你执行<br>通过请求路径来匹配<br>采用适配器的模式，</li><li>请求适配器执行 handleradapter 去执行hadnler(handler也叫做Controller)</li><li>去执行，返回返回结果</li><li>controller(handler)执行并返回 ModleAndView 对象给 DispatcherServlet</li><li>DispatcherServlet 让viewResolver 来进行视图解析</li><li>viewResolver 解析完毕后返回一个View对象</li><li>视图渲染，将结果交给request域，然后相应客户端请求</li></ol><h2 id="Springmvc组件"><a href="#Springmvc组件" class="headerlink" title="Springmvc组件"></a>Springmvc组件</h2><p>在SpringMvc各个组件：<br><strong>处理器映射器</strong>，<br><strong>处理器适配器</strong>，<br><strong>视图解析器配</strong><br>成为Springmvc的三大组件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span>注解在xml中配置可以 开启springmvc的框架注解支持<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="SpringMvc环境配置"><a href="#SpringMvc环境配置" class="headerlink" title="SpringMvc环境配置"></a>SpringMvc环境配置</h2><p><strong>springmvc.xml环境配置</strong>：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 开启注解扫描 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 视图解析器对象 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置自定义类型转换器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.context.support.ConversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>converters<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast.utils.StringToDateConverter<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token attr-name">conversion-service</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>web.xml配置</strong>：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">web-app</span> <span class="token name">PUBLIC</span> <span class="token string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span> <span class="token string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">&gt;</span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--配置Spring的监听器，默认只加载WEB-INF目录下的applicationContext.xml配置文件--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--设置配置文件的路径--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--配置前端控制器--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--加载springmvc.xml配置文件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--启动服务器，创建该servlet--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--引用前端控制器，并配置他的作用范围--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--解决中文乱码的过滤器--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求参数的绑定"><a href="#请求参数的绑定" class="headerlink" title="请求参数的绑定"></a>请求参数的绑定</h3><p>springmvc可以利用反射的机制进行参数的绑定 </p><p>将你请求中的参数，自定映射到方法@RequestMapper的方法字段中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 请求参数绑定入门 * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testParam"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名："</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码："</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"anno/testRequestParam?name=哈哈"</span><span class="token operator">&gt;</span><span class="token class-name">RequestParam</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求对象的绑定"><a href="#请求对象的绑定" class="headerlink" title="请求对象的绑定"></a>请求对象的绑定</h3><p>注意！ 名称必须一致，它是通过调用set方法来进行赋值的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> money<span class="token punctuation">;</span>        get set<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment">/**     * 请求参数绑定把数据封装到JavaBean的类中     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/saveAccount"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--把数据封装Account类中--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>param/saveAccount<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    金额：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求对象中引用对象的绑定"><a href="#请求对象中引用对象的绑定" class="headerlink" title="请求对象中引用对象的绑定"></a>请求对象中引用对象的绑定</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//java bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> money<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 请求参数绑定把数据封装到JavaBean的类中 * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/saveAccount"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">jsp页面<span class="token comment">&lt;!--把数据封装Account类中--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>param/saveAccount<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>      密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>      金额：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>      用户姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.uname<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>      用户年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.age<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集合类型的绑定"><a href="#集合类型的绑定" class="headerlink" title="集合类型的绑定"></a>集合类型的绑定</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//java bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> money<span class="token punctuation">;</span>   <span class="token comment">// private User user;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 请求参数绑定把数据封装到JavaBean的类中 * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/saveAccount"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--jsp 页面--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>param/saveAccount<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        金额：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--指定list的下标位置--&gt;</span>        用户姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list[0].uname<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        用户年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list[0].age<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--指定map的key是one，v是--&gt;</span>        用户姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map[<span class="token punctuation">'</span>one<span class="token punctuation">'</span>].uname<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        用户年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map[<span class="token punctuation">'</span>one<span class="token punctuation">'</span>].age<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringMvc过滤器-解决post请求乱码问题"><a href="#SpringMvc过滤器-解决post请求乱码问题" class="headerlink" title="SpringMvc过滤器,解决post请求乱码问题"></a>SpringMvc过滤器,解决post请求乱码问题</h2><p>前端多滤器，设置他们的字符编码</p><p>post方法会乱码，get方式不会乱码</p><p>在web.xml中配置全局过滤器，配置时过滤器位置放在servlet位置前面</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">&gt;</span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--配置解决中文乱码的过滤器--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--配置前端控制器--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类型转换器"><a href="#类型转换器" class="headerlink" title="类型转换器"></a>类型转换器</h2><p>Springmvc会对一些简单属性进行转换 如 input输入age是22 自动转换成Integer，<strong>但是复杂类型需要自己来实现转换</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//java bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 使用了自定义类型转换器 * @param user * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/saveUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--jsp 页面--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>param/saveUser<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        用户姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        用户年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        用户生日：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义类型转换器编写"><a href="#自定义类型转换器编写" class="headerlink" title="自定义类型转换器编写"></a><strong>自定义类型转换器编写</strong></h3><ol><li><p>需要实现converter接口，定义泛型&lt;String,Date&gt;</p><p> 左边类型是原始类型，右边类型是转换类型</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 把字符串转换日期 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToDateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Date</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token comment">/**     * String source    传入进来字符串     * @param source         * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>source <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"请您传入数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">DateFormat</span> df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 把字符串转换日期</span>            <span class="token keyword">return</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"数据类型转换出现错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在springmvc.xml中注册类型转换器</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置自定义类型转换器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.context.support.ConversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>converters<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast.utils.StringToDateConverter<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token attr-name">conversion-service</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="调用Servlet原生API"><a href="#调用Servlet原生API" class="headerlink" title="调用Servlet原生API"></a>调用Servlet原生API</h2><p>在Springmvc中获取到原来servlet的内置对象request，response，session和servletcontext    </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 原生的API * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testServlet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>param/testServlet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Servlet原生的API<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="SpringMvc常用注解"><a href="#SpringMvc常用注解" class="headerlink" title="SpringMvc常用注解"></a>SpringMvc常用注解</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><p> @Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。</p><p>@Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求的处理器。</p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p>时间里请求URL和处理请求方法之间的关系</p><p><strong>属性：</strong></p><p>value，path    这两个作用是一样的，都是指定访问请求路径</p><p>method     指定他的请求方式，指定Post就只能Post请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/username"</span><span class="token punctuation">,</span>params <span class="token operator">=</span><span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>PUT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>params    指定他的参数，调用时必须传入这个名称的参数才能调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/username"</span><span class="token punctuation">,</span>params <span class="token operator">=</span><span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token punctuation">)</span>指定了调用时必须有username这个字段<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/username"</span><span class="token punctuation">,</span>params <span class="token operator">=</span><span class="token punctuation">{</span>username<span class="token operator">=</span>heihei<span class="token punctuation">}</span><span class="token punctuation">)</span>指定了调用时必须有username这个字段，并且字段的值只能是heihei<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>headers</strong>    指定限制请求消息头的条件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapper</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/username"</span><span class="token punctuation">,</span>params <span class="token operator">=</span><span class="token punctuation">{</span>username<span class="token operator">=</span>heihei<span class="token punctuation">}</span><span class="token punctuation">,</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Accept"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a><strong>@RequestParam</strong></h3><p>把请求指定名称的参数给控制器中的形参赋值，用于参数名称和你方法参数名称不匹配的情况。</p><p><strong>属性</strong>：</p><p>value    请求参数中的名称</p><p>required    请求参数中是否必须提供此参数，默认true，表示必须提供，不提供就报错</p><p>例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/anno"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRequestParam"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//在这里默认使用了required，默认是true，前端必须只能传name字段的值，字段name变成uname都会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">//jsp    &lt;a href="anno/testRequestParam?name=哈哈"&gt;RequestParam&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><p>用于获取请求体内容，直接使用得到 key=value&amp;key=value 结构的数据，可以直接<strong>名称调用</strong>，也可以直接<strong>封装到对象中</strong></p><p>get方法不适用（get请求都封装到了地址栏上，没有请求体）</p><p><strong>属性：</strong></p><p>required    是否必须有请求体，默认是true。true的时候get方法会报错，取值为false，get请求得到的是null</p><p>例子：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anno/testRequestBody<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    用户姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    用户年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取到请求体的内容 * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRequestBody"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> body<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图片</p><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><p>和RequestBody作用相反，用来响应客户端请求，返回指定类型</p><h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a><strong>@PathVariable</strong></h3><p>拥有绑定url中的占位符，例如url中 /delete/{id} 这个{id} 就是url占位符</p><p>url支持占位符是spring3.0之后加入的，是SpringMvc支持rest分隔url的一个重要标志</p><p><strong>Restful编程风格</strong></p><p>请求地址一样，但是能够根据请求方式的不同(get,put,post)来执行不同的方法</p><p><strong>属性：</strong></p><p>value    用于指定url占位符的名称</p><p>required    是否必须提供占位符</p><p><strong>例子：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anno/testPathVariable/10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>testPathVariable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * PathVariable注解 * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/testPathVariable/{sid}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testPathVariable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"sid"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HiddentHttpMethodFilter"><a href="#HiddentHttpMethodFilter" class="headerlink" title="@HiddentHttpMethodFilter"></a>@HiddentHttpMethodFilter</h3><p>了解即可，是为了模拟不同的发送请求方式</p><p>浏览器的form表单只支持get和post请求，而Delelte，put等method并不支持，Spring3.0添加了一个过滤器，可以将浏览器请求去改为指定的请求方式，发送给我们的控制器方法，使得支持get，post，put与delete请求</p><p>使用方法:</p><ol><li>在web.xml中配置过滤器</li><li>请求法师必须使用post请求</li><li>按照要求提供_method请求参数，该参数的取值就是我们需要的请求方式</li></ol><h3 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h3><p>开发中不怎么用</p><p>用于 获取请求消息头的值</p><p><strong>属性：</strong></p><p>value    提供消息头名称</p><p>required    是否必须有此消息头</p><p><strong>例子：</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;a href="anno/testRequestHeader"&gt;RequestHeader&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取请求头的值 * @param header * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/testRequestHeader"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestHeader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"Accept"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> header<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// return "success";</span>    <span class="token comment">// response.sendRedirect(request.getContextPath()+"/anno/testCookieValue");</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/param.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图片</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="@Cookie"></a>@Cookie</h3><p>把指定cookie名称传入控制器方法参数</p><p><strong>属性：</strong></p><p>value    指定cookie名称</p><p>required     是否必须由此cookie</p><p><strong>例子：</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;a href="anno/testCookieValue"&gt;CookieValue&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取Cookie的值 * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/testCookieValue"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testCookieValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> cookieValue<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookieValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MouelAttribute"><a href="#MouelAttribute" class="headerlink" title="@MouelAttribute"></a>@MouelAttribute</h3><p>该注解SpringMVC4.3版本之后加入的，可以用于修饰方法和参数</p><p>出现在方法上，在控制前方法执行之前，先执行。可以修饰没有返回值的方法，也可以修饰具有返回值的方法</p><p><strong>属性：</strong></p><p>Value    用于获取数据的key，key可以是pojo的属性名称，也可以是map结构的key</p><p><strong>应用场景：</strong></p><p>但表单提交不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据</p><p><strong>例子：</strong></p><p>没有返回值的类型 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">/** 没有返回值的类型   参数中使用@ModelAttribute 指定key来获取值     * ModelAttribute注解     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/testModelAttribute"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testModelAttribute</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testModelAttribute执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">///////没有返回值的类型，值需要添加一个Map集合</span>    <span class="token annotation punctuation">@ModelAttribute</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> uname<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"showUser执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过用户查询数据库（模拟）</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUname</span><span class="token punctuation">(</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有返回值的类型 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">/**有返回值的类型        * ModelAttribute注解     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/testModelAttribute"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testModelAttribute</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testModelAttribute执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment">/**  有返回值的类型     * 该方法会先执行     */</span>    <span class="token annotation punctuation">@ModelAttribute</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">showUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> uname<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"showUser执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过用户查询数据库（模拟）</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUname</span><span class="token punctuation">(</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SessoinAttribute"><a href="#SessoinAttribute" class="headerlink" title="@SessoinAttribute"></a>@SessoinAttribute</h3><p>只能作用在类上,没听太懂，视频182</p><p>多次执行控制器方法将的参数共享</p><p><strong>属性：</strong></p><p>value    属性的名称</p><p>type     属性的类型</p><p><strong>例子：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span></span><span class="token class-name">Model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span></span><span class="token class-name">ModelMap</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/anno"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"msg"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">// 把 msg=美美 存入到session域对中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoController</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * SessionAttributes的注解     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/testSessionAttributes"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testSessionAttributes</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testSessionAttributes..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 底层会存储到request域对象中</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"美美"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取值     * @param modelMap     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/getSessionAttributes"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSessionAttributes</span><span class="token punctuation">(</span><span class="token class-name">ModelMap</span> modelMap<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getSessionAttributes..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> modelMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 清除     * @param status     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/delSessionAttributes"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delSessionAttributes</span><span class="token punctuation">(</span><span class="token class-name">SessionStatus</span> status<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getSessionAttributes..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        status<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anno/testSessionAttributes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>testSessionAttributes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>success.jsp：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>入门成功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>    ${ msg }    ${sessionScope}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringMvc响应方式"><a href="#SpringMvc响应方式" class="headerlink" title="SpringMvc响应方式"></a>SpringMvc响应方式</h2><h3 id="根据返回值分类"><a href="#根据返回值分类" class="headerlink" title="根据返回值分类"></a>根据返回值分类</h3><h4 id="1、字符串"><a href="#1、字符串" class="headerlink" title="1、字符串"></a>1、字符串</h4><p>字符串类型的返回值     前端控制器会按照返回值跳转到对应的jsp页面</p><h4 id="2、void"><a href="#2、void" class="headerlink" title="2、void"></a>2、void</h4><p>SpringMvc提供的转发和重定向</p><p>没有返回值的时候，它默认是按照RequestMapping的value去寻找.jsp页面</p><p>在跳转的时候通过request 进行转发，response进行重定向</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token comment">/**   * 是void   * 请求转发一次请求，不用编写项目的名称   * 重定向是两次请求，需要编写项目名称   */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testVoid"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testVoid</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testVoid方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 编写请求转发的程序</span>       request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/pages/success.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 重定向   是重新发了个请求  web-inf是直接进不去的</span><span class="token comment">//request.getContextPath()  获取项目名称</span>      response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/index.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 设置中文乱码</span>      response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 直接会进行响应浏览器</span>      response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * 使用关键字的方式进行转发或者重定向   * @return   */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testForwardOrRedirect"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testForwardOrRedirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testForwardOrRedirect方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 请求的转发</span>      <span class="token comment">// return "forward:/WEB-INF/pages/success.jsp";</span>      <span class="token comment">// 重定向</span>      <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前端控制器配置拦截资源"><a href="#前端控制器配置拦截资源" class="headerlink" title="前端控制器配置拦截资源"></a>前端控制器配置拦截资源</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 开启注解扫描 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 视图解析器对象 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--前端控制器，哪些静态资源不拦截--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/css/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ModelAndView对象"><a href="#ModelAndView对象" class="headerlink" title="ModelAndView对象"></a>ModelAndView对象</h2><p>这个对象底层用的modelMap对象，是request范围的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 返回ModelAndView * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testModelAndView"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">testModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 创建ModelAndView对象</span>    <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testModelAndView方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 模拟从数据库中查询出User对象</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"小凤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把user对象存储到mv对象中，也会把user对象存入到request对象</span>    mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 跳转到哪个页面</span>    mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mv<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">&lt;%--  Created by IntelliJ IDEA.  User: Administrator  Date: 2018/5/1  Time: 1:18  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" isELIgnored="false" %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>执行成功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>    ${user.username}    ${user.password}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ajax请求响应json数据"><a href="#ajax请求响应json数据" class="headerlink" title="ajax请求响应json数据"></a>ajax请求响应json数据</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token comment">// 页面加载，绑定单击事件</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// alert("hello btn");</span>            <span class="token comment">// 发送ajax请求</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token comment">// 编写json格式，设置属性和值</span>                url<span class="token operator">:</span><span class="token string">"user/testAjax"</span><span class="token punctuation">,</span>                contentType<span class="token operator">:</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">,</span>                data<span class="token operator">:</span><span class="token string">'{"username":"hehe","password":"123","age":30}'</span><span class="token punctuation">,</span>                dataType<span class="token operator">:</span><span class="token string">"json"</span><span class="token punctuation">,</span>                type<span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>                <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment">// data服务器端响应的json的数据，进行解析</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">/**     * 模拟异步请求响应     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testAjax"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> <span class="token class-name">User</span> <span class="token function">testAjax</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> body<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testAjax方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//控制台会输出 ：</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token operator">:</span><span class="token string">"hehe"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token operator">:</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Json字符串封装到-Java-Bean中"><a href="#Json字符串封装到-Java-Bean中" class="headerlink" title="Json字符串封装到 Java Bean中"></a>Json字符串封装到 Java Bean中</h2><p>Json字符串转换成对象、对象转换成Json字符串  都是spring给我们转换，我们只需要导入 <strong>jackson</strong> 的包</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-ResponseBody-和-RequestBody-注解来进行转换"><a href="#使用-ResponseBody-和-RequestBody-注解来进行转换" class="headerlink" title="使用 ResponseBody 和 RequestBody 注解来进行转换"></a>使用 ResponseBody 和 RequestBody 注解来进行转换</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//java bean</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 模拟异步请求响应     * responseBody 相应的  将bean转换成 json字符串     * responseBody返回的类型跟你ajax设置的datetype相关     * requestBody 接受的     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testAjax"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> <span class="token class-name">User</span> <span class="token function">testAjax</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testAjax方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 客户端发送ajax的请求，传的是json字符串，后端把json字符串封装到user对象中</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 做响应，模拟查询数据库</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 做响应</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//控制台会输出 ：</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token operator">:</span><span class="token string">"hehe"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token operator">:</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringMvc异常处理"><a href="#SpringMvc异常处理" class="headerlink" title="SpringMvc异常处理"></a>SpringMvc异常处理</h2><ol><li><p>编写自定义异常类（做提示信息的）</p></li><li><p>编写异常处理器</p></li><li><p>配置异常处理器（跳转到提示页面）</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义异常类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token comment">// 存储提示信息的</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">SysException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 异常处理器    需要实现handlerExceptionResolver接口，处理异常 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 处理异常业务逻辑     * @param request     * @param response     * @param handler     * @param ex     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取到异常对象</span>        <span class="token class-name">SysException</span> e <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">SysException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SysException</span><span class="token punctuation">)</span>ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysException</span><span class="token punctuation">(</span><span class="token string">"系统正在维护...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 创建ModelAndView对象</span>        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//request范围的值kv入参</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"errorMsg"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用modelandview  进行页面的跳转</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>发生error跳转的页面<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span>  <span class="token class-name">Created</span> by <span class="token class-name">IntelliJ</span> <span class="token class-name">IDEA<span class="token punctuation">.</span>  User</span><span class="token operator">:</span> <span class="token class-name">Administrator</span>  <span class="token class-name">Date</span><span class="token operator">:</span> <span class="token number">2018</span><span class="token operator">/</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">5</span>  <span class="token class-name">Time</span><span class="token operator">:</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">28</span>  <span class="token class-name">To</span> change <span class="token keyword">this</span> template use <span class="token class-name">File</span> <span class="token operator">|</span> <span class="token class-name">Settings</span> <span class="token operator">|</span> <span class="token class-name">File</span> <span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token operator">--</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> isELIgnored<span class="token operator">=</span><span class="token string">"false"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>html<span class="token punctuation">&gt;</span></span><span class="token generics"><span class="token punctuation">&lt;</span>head<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>title<span class="token punctuation">&gt;</span></span><span class="token class-name">Title</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">&gt;</span></span>    $<span class="token punctuation">{</span>errorMsg<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">//在xml文件中配置这个  异常处理器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sysExceptionResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast.exception.SysExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="SpringMvc拦截器配置"><a href="#SpringMvc拦截器配置" class="headerlink" title="SpringMvc拦截器配置"></a>SpringMvc拦截器配置</h2><p>编写拦截器步骤：</p><ol><li><p>编写拦截器类，实现MandlerIntercepter接口</p></li><li><p>配置拦截器</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义拦截器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor1</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 预处理，controller方法执行前     * return true 放行，执行下一个拦截器，如果没有，执行controller中的方法     * return false不放行  就不会执行controller中的方法     * @param request     * @param response     * @param handler     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor1执行了...前1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 后处理方法，controller方法执行后，success.jsp执行之前     * @param request     * @param response     * @param handler     * @param modelAndView     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor1执行了...后1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * success.jsp页面执行后，该方法会执行  可用于释放资源     * @param request     * @param response     * @param handler     * @param ex     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor1执行了...最后1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">在<span class="token class-name">SpringMvc</span><span class="token punctuation">.</span>xml中配置这个拦截器 <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置拦截器<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>interceptors<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置拦截器<span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>interceptor<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>要拦截的具体的方法<span class="token operator">--</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>mapping path<span class="token operator">=</span><span class="token string">"/user/*"</span><span class="token operator">/</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>不要拦截的方法            <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>exclude<span class="token operator">-</span>mapping path<span class="token operator">=</span><span class="token string">""</span><span class="token operator">/</span><span class="token operator">&gt;</span>            <span class="token operator">--</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置拦截器对象<span class="token operator">--</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.controller.cn.itcast.interceptor.MyInterceptor1"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>mvc<span class="token operator">:</span>interceptor<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置第二个拦截器<span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>interceptor<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>要拦截的具体的方法<span class="token operator">--</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>mapping path<span class="token operator">=</span><span class="token string">"/**"</span><span class="token operator">/</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>不要拦截的方法            <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>exclude<span class="token operator">-</span>mapping path<span class="token operator">=</span><span class="token string">""</span><span class="token operator">/</span><span class="token operator">&gt;</span>            <span class="token operator">--</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置拦截器对象<span class="token operator">--</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.controller.cn.itcast.interceptor.MyInterceptor2"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>mvc<span class="token operator">:</span>interceptor<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>mvc<span class="token operator">:</span>interceptors<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java框架 </tag>
            
            <tag> SrpingMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架学习</title>
      <link href="/zwhblog.cn/2021/01/16/spring/spring-de-jian-dan-shi-yong-kuang-jia-er/"/>
      <url>/zwhblog.cn/2021/01/16/spring/spring-de-jian-dan-shi-yong-kuang-jia-er/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring框架概述"><a href="#Spring框架概述" class="headerlink" title="Spring框架概述"></a>Spring框架概述</h1><h3 id="Spring是什么"><a href="#Spring是什么" class="headerlink" title="Spring是什么"></a>Spring是什么</h3><p>Spring是分层的Java se/EE 应用full-stack轻量级开源框架，以及ioc(控制反转)和AOP（面向切面编程）为内核，提供了展现层SpringMVC和持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库。逐渐成为使用最多的Java EE企业应用开源框架</p><h3 id="Spring两大核心"><a href="#Spring两大核心" class="headerlink" title="Spring两大核心"></a>Spring两大核心</h3><p>IOC和AOP</p><h3 id="Spring的优势"><a href="#Spring的优势" class="headerlink" title="Spring的优势"></a>Spring的优势</h3><ol><li>方便解耦，简化开发</li><li>声明式事务的支持</li><li>方便程序的测试</li><li>方便集成各种优秀框架</li><li>降低javaEE API使用难度</li></ol><h3 id="Spring体系结构"><a href="#Spring体系结构" class="headerlink" title="Spring体系结构"></a>Spring体系结构</h3><p><img src="https://img-blog.csdnimg.cn/20201125203447667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="程序的耦合及解耦"><a href="#程序的耦合及解耦" class="headerlink" title="程序的耦合及解耦"></a>程序的耦合及解耦</h3><p>使用反射来创建对象，而避免使用new关键字，spring框架主要就是通过ioc来达到解耦效果的，而mysql是用来封装各种操作，将过程简化(个人理解)</p><h3 id="曾经案例中问题"><a href="#曾经案例中问题" class="headerlink" title="曾经案例中问题"></a>曾经案例中问题</h3><p>业务层调用持久层，都会new一个实例，这是强耦合的关系，如何解决这个问题</p><h3 id="工厂模式解耦"><a href="#工厂模式解耦" class="headerlink" title="工厂模式解耦"></a>工厂模式解耦</h3><p>使用这种方式，可以减少他们的依赖，使用类加载器来进行对象加载，减少他们的耦合度，工厂模式有单例模式和多例模式两种，<br>使用工厂模式有多利和单例两种模式，单例模式中属性尽量保证他们的范围是方法范围而不是类的范围，否则后面可能有产生异常<br>使用类加载器配置文件可以是xml和properties的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 一个创建Bean对象的工厂 * * Bean：在计算机英语中，有可重用组件的含义。 * JavaBean：用java语言编写的可重用组件。 *      javabean &gt;  实体类 * *   它就是创建我们的service和dao对象的。 * *   第一个：需要一个配置文件来配置我们的service和dao *           配置的内容：唯一标识=全限定类名（key=value) *   第二个：通过读取配置文件中配置的内容，反射创建对象 * *   我的配置文件可以是xml也可以是properties */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>    <span class="token comment">//定义一个Properties对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Properties</span> props<span class="token punctuation">;</span>    <span class="token comment">//定义一个Map,用于存放我们要创建的对象。我们把它称之为容器</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> beans<span class="token punctuation">;</span>    <span class="token comment">//使用静态代码块为Properties对象赋值</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//实例化对象</span>            props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取properties文件的流对象</span>            <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">BeanFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"bean.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//实例化容器</span>            beans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//取出配置文件中所有的Key</span>            <span class="token class-name">Enumeration</span> keys <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//遍历枚举</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//取出每个Key</span>                <span class="token class-name">String</span> key <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//根据key获取value</span>                <span class="token class-name">String</span> beanPath <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//反射创建对象</span>                <span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>beanPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//把key和value存入容器中</span>                beans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExceptionInInitializerError</span><span class="token punctuation">(</span><span class="token string">"初始化properties失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 根据bean的名称获取对象     * @param beanName     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> beans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><h2 id="IOC概念和spring中的IOC"><a href="#IOC概念和spring中的IOC" class="headerlink" title="IOC概念和spring中的IOC"></a>IOC概念和spring中的IOC</h2><pre class="line-numbers language-none"><code class="language-none">控制反转，原来app和资源之间都是直接联系的，二控制反转引入后，由工厂来和资源联系并把资源转到app中，实现了应用和资源之间的关系带来的好处减少了程序之间的耦合<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Spring中基于Xml的IOC环境搭建"><a href="#Spring中基于Xml的IOC环境搭建" class="headerlink" title="Spring中基于Xml的IOC环境搭建"></a>Spring中基于Xml的IOC环境搭建</h2><ol><li>先导入spring的依赖<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在spring.xml中配置</li></ol><p>使用时需要在xml配置文件中添加的头部文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:aop="http://www.springframework.org/schema/aop"       xmlns:tx="http://www.springframework.org/schema/tx"       xsi:schemaLocation="http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context.xsd   http://www.springframework.org/schema/aop   http://www.springframework.org/schema/aop/spring-aop.xsd   http://www.springframework.org/schema/tx   http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;      &lt;!--开启注解的扫描，希望处理service和dao，controller不需要Spring框架去处理--&gt;    &lt;context:component-scan base-package="cn.itcast" &gt;        &lt;!--配置哪些注解不扫描--&gt;        &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" /&gt;    &lt;/context:component-scan&gt;        &lt;!--配置Spring框架声明式事务管理--&gt;    &lt;!--配置事务管理器--&gt;    &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;        &lt;property name="dataSource" ref="dataSource" /&gt;    &lt;/bean&gt;    &lt;!--配置事务通知--&gt;    &lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt;        &lt;tx:attributes&gt;            &lt;tx:method name="find*" read-only="true"/&gt;            &lt;tx:method name="*" isolation="DEFAULT"/&gt;        &lt;/tx:attributes&gt;    &lt;/tx:advice&gt;    &lt;!--配置AOP增强--&gt;    &lt;aop:config&gt;        &lt;aop:advisor advice-ref="txAdvice" pointcut="execution(* cn.itcast.service.impl.*ServiceImpl.*(..))"/&gt;    &lt;/aop:config&gt;    &lt;/beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>获取到spring的ioc核心容器</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 获取spring的Ioc核心容器，并根据id获取对象     *     * ApplicationContext的三个常用实现类：     *      ClassPathXmlApplicationContext：它可以加载类路径下的配置文件，要求配置文件必须在类路径下。不在的话，加载不了。(更常用)     *      FileSystemXmlApplicationContext：它可以加载磁盘任意路径下的配置文件(必须有访问权限）     *     *      AnnotationConfigApplicationContext：它是用于读取注解创建容器的，前两个是指定配置文件路径的，这个是配置注解的方式     *     * 核心容器的两个接口引发出的问题：     *  ApplicationContext:     单例对象适用              采用此接口     *      它在构建核心容器时，创建对象采取的策略是采用立即加载的方式。也就是说，只要一读取完配置文件马上就创建配置文件中配置的对象。     *     *  BeanFactory:            多例对象使用     *      它在构建核心容器时，创建对象采取的策略是采用延迟加载的方式。也就是说，什么时候根据id获取对象了，什么时候才真正的创建对象。     * @param args     */</span><span class="token comment">//--------ApplicationContext----------</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//1.获取核心容器对象</span>        <span class="token class-name">ApplicationContext</span> ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        ApplicationContext ac = new FileSystemXmlApplicationContext("C:\\Users\\zhy\\Desktop\\bean.xml");</span>        <span class="token comment">//2.根据id获取Bean对象</span>        <span class="token class-name">IAccountService</span> as  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IAccountService</span><span class="token punctuation">)</span>ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IAccountDao</span> adao <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountDao"</span><span class="token punctuation">,</span><span class="token class-name">IAccountDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>as<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>adao<span class="token punctuation">)</span><span class="token punctuation">;</span>        as<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//--------BeanFactory----------</span><span class="token comment">//        Resource resource = new ClassPathResource("bean.xml");</span><span class="token comment">//        BeanFactory factory = new XmlBeanFactory(resource);</span><span class="token comment">//        IAccountService as  = (IAccountService)factory.getBean("accountService");</span><span class="token comment">//        System.out.println(as);</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring核心容器创建-两个接口的区别"><a href="#Spring核心容器创建-两个接口的区别" class="headerlink" title="Spring核心容器创建 两个接口的区别"></a>Spring核心容器创建 两个接口的区别</h2><p><strong>ApplicationContext</strong><br>构建核心容器，采用的策略是采用立即加载的方式，单例对象适用接口<br>更多的是采用此接口</p><p><strong>BeanFactory</strong><br>构建核心容器时，采用的是延迟加载的方式。多例对象适用接口</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--把对象的创建交给spring来管理--&gt;</span>spring对bean的管理细节    1.创建bean的三种方式    2.bean对象的作用范围    3.bean对象的生命周期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="依赖注入-dependency-injection"><a href="#依赖注入-dependency-injection" class="headerlink" title="依赖注入(dependency injection)"></a>依赖注入(dependency injection)</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">spring中的依赖注入       依赖注入：           Dependency Injection       IOC的作用：           降低程序间的耦合（依赖关系）       依赖关系的管理：           以后都交给spring来维护       在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明       依赖关系的维护：           就称之为依赖注入。        依赖注入：           能注入的数据：有三类               基本类型和String               其他bean类型（在配置文件中或者注解配置过的bean）               复杂类型/集合类型            注入的方式：有三种               第一种：使用构造函数提供               第二种：使用set方法提供               第三种：使用注解提供<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三种注入方式"><a href="#三种注入方式" class="headerlink" title="三种注入方式"></a>三种注入方式</h2><h3 id="bean标签的属性"><a href="#bean标签的属性" class="headerlink" title="bean标签的属性"></a>bean标签的属性</h3><p>bean的作用范围调整<br>    bean标签的  <strong>scope</strong>  属性：<br>        作用：用于指定  bean 的作用范围<br>        取值： 常用的就是单例的和多例的<br>            <strong>singleton</strong>：单例的（默认值）<br>            <strong>prototype</strong>：多例的<br>            <strong>request</strong>：作用于web应用的请求范围<br>            <strong>session</strong>：作用于web应用的会话范围<br>            <strong>global-session</strong>：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="bean对象的生命周期"><a href="#bean对象的生命周期" class="headerlink" title="bean对象的生命周期"></a>bean对象的生命周期</h4><p><strong>单例对象</strong></p><pre><code>        出生：当容器创建时对象出生        活着：只要容器还在，对象一直活着        死亡：容器销毁，对象消亡        总结：单例对象的生命周期和容器相同</code></pre><p><strong>多例对象</strong></p><pre><code>        出生：当我们使用对象时spring框架为我们创建        活着：对象只要是在使用过程中就一直活着。        死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收</code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span>      <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>初始化方法和关闭方法</p><h3 id="1、构造函数注入"><a href="#1、构造函数注入" class="headerlink" title="1、构造函数注入"></a>1、构造函数注入</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--构造函数注入：        使用的标签:constructor-arg        标签出现的位置：bean标签的内部        标签中的属性            type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型            index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始            name：用于指定给构造函数中指定名称的参数赋值                                        常用的            =============以上三个用于指定给构造函数中哪个参数赋值===============================            value：用于提供基本类型和String类型的数据            ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象        优势：            在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。        弊端：            改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。    --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>泰斯特<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置一个日期对象 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>//bean中通过ref来引用外部的bean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、set方法注入"><a href="#2、set方法注入" class="headerlink" title="2、set方法注入"></a>2、set方法注入</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token comment">&lt;!-- set方法注入                更常用的方式       涉及的标签：property       出现的位置：bean标签的内部       标签的属性           name：用于指定注入时所调用的set方法名称           value：用于提供基本类型和String类型的数据           ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象       优势：           创建对象时没有明确的限制，可以直接使用默认构造函数       弊端：           如果有某个成员必须有值，则获取对象是有可能set方法没有执行。   --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TEST<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>21<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 配置一个日期对象 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>//这里使用的是property这个标签来进行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、复杂类型的依赖注入"><a href="#3、复杂类型的依赖注入" class="headerlink" title="3、复杂类型的依赖注入"></a>3、复杂类型的依赖注入</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 复杂类型的注入/集合类型的注入        用于给List结构集合注入的标签：            list array set        用于个Map结构集合注入的标签:            map  props        结构相同，标签可以互换    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStrs<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myList<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testC<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>ccc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testD<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>ddd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myProps<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testA<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testB<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建Bean的三种方式"><a href="#创建Bean的三种方式" class="headerlink" title="创建Bean的三种方式"></a>创建Bean的三种方式</h2><h3 id="第一种方式：使用默认构造函数创建。"><a href="#第一种方式：使用默认构造函数创建。" class="headerlink" title="第一种方式：使用默认构造函数创建。"></a>第一种方式：使用默认构造函数创建。</h3><p>在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。<br>采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第二种方式：-使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）"><a href="#第二种方式：-使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）" class="headerlink" title="第二种方式： 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）"></a>第二种方式： 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>instanceFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.factory.InstanceFactory<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>instanceFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAccountService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器"><a href="#第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器" class="headerlink" title="第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)"></a>第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.factory.StaticFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAccountService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Spring中ioc常用注解"><a href="#Spring中ioc常用注解" class="headerlink" title="Spring中ioc常用注解"></a>Spring中ioc常用注解</h2><h3 id="在Spring容器中注入类的："><a href="#在Spring容器中注入类的：" class="headerlink" title="在Spring容器中注入类的："></a>在Spring容器中注入类的：</h3><h4 id="Component"><a href="#Component" class="headerlink" title="@Component:"></a>@Component:</h4><ul><li><p>作用：用于把当前类对象存入spring容器中</p></li><li><p>属性：</p></li><li><p>value：用于指定bean的id。当我们不写时，它的默认值是当前类名，且首字母改小写。</p></li></ul><h4 id="Controller："><a href="#Controller：" class="headerlink" title="@Controller："></a>@Controller：</h4><p>一般用在表现层</p><h4 id="Service："><a href="#Service：" class="headerlink" title="@Service："></a>@Service：</h4><p>一般用在业务层</p><h4 id="Repository："><a href="#Repository：" class="headerlink" title="@Repository："></a>@Repository：</h4><p>一般用在持久层</p><p>以上三个注解他们的作用和属性与Component是一模一样。</p><p>他们三个是spring框架为我们提供明确的三层使用的注解，使我们的三层对象更加清晰<br>当不属于这三层的就可以使用component来调用</p><h3 id="用于注入数据的："><a href="#用于注入数据的：" class="headerlink" title="用于注入数据的："></a>用于注入数据的：</h3><ul><li><pre><code> 他们的作用就和在xml配置文件中的bean标签中写一个&lt;property&gt;标签的作用是一样的</code></pre></li></ul><h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired:"></a>@Autowired:</h4><ul><li>作用：自动按照类型注入。只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功</li></ul><p>如果ioc容器中没有任何bean的类型和要注入的变量类型匹配，则报错。</p><p>如果Ioc容器中有多个类型匹配时：</p><ul><li>出现位置：</li></ul><p>可以是变量上，也可以是方法上</p><ul><li>细节：</li></ul><p>在使用注解注入时，set方法就不是必须的了。</p><h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier:"></a>@Qualifier:</h4><ul><li><p>作用：</p><p>在按照类中注入的基础之上再按照名称注入。它在给类成员注入时不能单独使用。但是在给方法参数注入时可以（稍后我们讲）</p></li><li><p>属性：</p></li></ul><p>value：用于指定注入bean的id。</p><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><ul><li><p>作用：直接按照bean的id注入。它可以独立使用</p></li><li><p>属性：</p></li></ul><p>name：用于指定bean的id。</p><p>以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。</p><p>   另外，集合类型的注入只能通过XML来实现。</p><h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><ul><li><p>作用：用于注入基本类型和String类型的数据</p></li><li><p>属性：</p></li></ul><p>value：用于指定数据的值。它可以使用spring中SpEL(也就是spring的el表达式）</p><p>SpEL的写法：${表达式}   </p><h3 id="用于改变作用范围的："><a href="#用于改变作用范围的：" class="headerlink" title="用于改变作用范围的："></a>用于改变作用范围的：</h3><p>他们的作用就和在bean标签中使用scope属性实现的功能是一样的</p><h4 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h4><ul><li><p>作用：用于指定bean的作用范围</p></li><li><p>属性：</p></li></ul><p>value：指定范围的取值。常用取值：singleton prototype</p><h3 id="和生命周期相关："><a href="#和生命周期相关：" class="headerlink" title="和生命周期相关："></a>和生命周期相关：</h3><p>他们的作用就和在bean标签中使用init-method和destroy-methode的作用是一样的</p><h4 id="PreDestroy"><a href="#PreDestroy" class="headerlink" title="@PreDestroy"></a>@PreDestroy</h4><p><strong>作用</strong>：用于指定销毁方法</p><h4 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h4><p><strong>作用</strong>：用于指定初始化方法 </p><h2 id="Spring一些新注解的使用"><a href="#Spring一些新注解的使用" class="headerlink" title="Spring一些新注解的使用"></a>Spring一些新注解的使用</h2><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><ul><li><pre><code>作用：指定当前类是一个配置类</code></pre></li><li><pre><code>细节：当配置类作为AnnotationConfigApplicationContext对象创建的参数时，该注解可以不写。</code></pre></li></ul><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><ul><li><pre><code> 作用：用于通过注解指定spring在创建容器时要扫描的包(范围)</code></pre></li><li><pre><code> 属性：</code></pre></li><li><pre><code> value：它和basePackages的作用是一样的，都是用于指定创建容器时要扫描的包。</code></pre></li><li><pre><code> 我们使用此注解就等同于在xml中配置了:</code></pre></li><li><pre><code> &lt;context:component-scan base-package="com.itheima"&gt;&lt;/context:component-scan&gt;</code></pre></li></ul><h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h4><ul><li><pre><code> 作用：用于把当前方法的返回值作为bean对象存入spring的ioc容器中</code></pre></li><li><pre><code> 属性:</code></pre></li><li><pre><code> name:用于指定bean的id。当不写时，默认值是当前方法的名称</code></pre></li><li><pre><code> 细节：</code></pre></li><li><pre><code> 当我们使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象。</code></pre></li><li><pre><code> 查找的方式和Autowired注解的作用是一样的</code></pre></li></ul><h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><ul><li><pre><code> 作用：用于导入其他的配置类</code></pre></li><li><pre><code> 属性：</code></pre></li><li><pre><code> value：用于指定其他配置类的字节码。</code></pre></li><li><pre><code> 当我们使用Import的注解之后，有Import注解的类就父配置类，而导入的都是子配置类</code></pre></li></ul><h4 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h4><ul><li><pre><code> 作用：用于指定properties文件的位置</code></pre></li><li><pre><code> 属性：</code></pre></li><li><pre><code> value：指定文件的名称和路径。</code></pre></li><li><pre><code> 关键字：classpath，表示类路径下</code></pre></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.itheima"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">JdbcConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:jdbcConfig.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用纯注解的方式实现ioc案例"><a href="#使用纯注解的方式实现ioc案例" class="headerlink" title="使用纯注解的方式实现ioc案例"></a>使用纯注解的方式实现ioc案例</h2><pre class="line-numbers language-none"><code class="language-none">@ComponentScan("com.itheima")@Import(JdbcConfig.class)@PropertySource("classpath:jdbcConfig.properties")public class SpringConfiguration {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DBUtils"><a href="#DBUtils" class="headerlink" title="DBUtils"></a>DBUtils</h2><h3 id="DBUtils是什么，有什么作用？"><a href="#DBUtils是什么，有什么作用？" class="headerlink" title="DBUtils是什么，有什么作用？"></a>DBUtils是什么，有什么作用？</h3><p>持久层选择DBUtils</p><p>DBUtils简化了JDBC的开发步骤，使得我们可以用更少量的代码实现连接数据库的功能</p><p>JavaBean是一个用于封装数据的类，在与数据库连接之中，JavaBean其的作用是将获取的数据库的记录封装到JavaBean中。特性如下：</p><ol><li>需要实现接口：java.io.Serializable ，可以省略不写。</li><li>提供私有字段：private 类型 字段名;</li><li>提供getter/setter方法：</li><li>提供无参构造</li></ol><p>获取getter/setter方法，在类中右键-&gt;Source-&gt;Generate Getters and Setters</p><h3 id="DBUtils使用"><a href="#DBUtils使用" class="headerlink" title="DBUtils使用"></a>DBUtils使用</h3><p>DBUtils封装了JDBC的操作，核心功能如下：<br>Dbutils三个核心功能介绍</p><ol><li>QueryRunner中提供对sql语句操作的API.</li><li>ResultSetHandler接口，用于定义select操作后，怎样封装结果集.</li><li>DbUtils类是一个工具类，定义了关闭资源与事务处理的方法</li></ol><h3 id="QueryRunner核心类："><a href="#QueryRunner核心类：" class="headerlink" title="QueryRunner核心类："></a>QueryRunner核心类：</h3><ol><li>QueryRunner(DataSource ds) ；传入参数为连接池</li><li>update(String sql, Object… params) ，执行insert update delete操作</li><li>query(String sql, ResultSetHandler rsh, Object… params) ，执行 select操作</li></ol><h2 id="spring和junit的整合"><a href="#spring和junit的整合" class="headerlink" title="spring和junit的整合"></a>spring和junit的整合</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 使用Junit单元测试：测试我们的配置 * Spring整合junit的配置 *      1、导入spring整合junit的jar(坐标) *      2、使用Junit提供的一个注解把原有的main方法替换了，替换成spring提供的 *             @Runwith *      3、告知spring的运行器，spring和ioc创建是基于xml还是注解的，并且说明位置 *          @ContextConfiguration *                  locations：指定xml文件的位置，加上classpath关键字，表示在类路径下 *                  classes：指定注解类所在地位置 * *   当我们使用spring 5.x版本的时候，要求junit的jar必须是4.12及以上 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">SpringConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">IAccountService</span> as <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//3.执行方法</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> accounts <span class="token operator">=</span> as<span class="token punctuation">.</span><span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account <span class="token operator">:</span> accounts<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//3.执行方法</span>        <span class="token class-name">Account</span> account <span class="token operator">=</span> as<span class="token punctuation">.</span><span class="token function">findAccountById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>动态代理没听明白<br>视频：123-131   还需要看java基础的反射和基础知识</p><p><strong>特点</strong>：字节码随用随创建，随用随加载<br><strong>作用</strong>：不修改源码的基础上对方法增强<br><strong>分类</strong>：<br>基于接口的动态代理<br>基于子类的动态代理</p><h3 id="动态代理1：基于接口的动态代理"><a href="#动态代理1：基于接口的动态代理" class="headerlink" title="动态代理1：基于接口的动态代理"></a>动态代理1：基于接口的动态代理</h3><p>基于接口的动态代理：<br>涉及的类：Proxy<br>提供者：JDK官方<br>如何创建代理对象：<br>使用Proxy类中的newProxyInstance方法<br>创建代理对象的要求：</p><p><strong>被代理类最少实现一个接口，如果没有则不能使用</strong></p><p><strong>newProxyInstance</strong>   方法的参数：</p><p>ClassLoader：类加载器<br>    它是用于加载代理对象字节码的。和被代理对象使用相同的类加载器。固定写法。</p><p>Class[]：字节码数组<br>    它是用于让代理对象和被代理对象有相同方法。固定写法。</p><p>InvocationHandler：用于提供增强的代码<br>    它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。</p><p>此接口的实现类都是谁用谁写。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">IProducer</span> proxyProducer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IProducer</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>producer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                producer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">/**                     * 作用：执行被代理对象的任何接口方法都会经过该方法                     * 方法参数的含义                     * @param proxy   代理对象的引用                     * @param method  当前执行的方法                     * @param args    当前执行方法所需的参数                     * @return        和被代理对象方法有相同的返回值                     * @throws Throwable                     */</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>                        <span class="token comment">//提供增强的代码</span>                        <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        <span class="token comment">//1.获取方法执行的参数</span>                        <span class="token class-name">Float</span> money <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">)</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token comment">//2.判断当前方法是不是销售</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"saleProduct"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>producer<span class="token punctuation">,</span> money<span class="token operator">*</span><span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyProducer<span class="token punctuation">.</span><span class="token function">saleProduct</span><span class="token punctuation">(</span><span class="token number">10000f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态代理2：基于子类的动态代理"><a href="#动态代理2：基于子类的动态代理" class="headerlink" title="动态代理2：基于子类的动态代理"></a>动态代理2：基于子类的动态代理</h3><p><strong>特点</strong>：字节码随用随创建，随用随加载<br><strong>作用</strong>：不修改源码的基础上对方法增强</p><p>基于子类的动态代理：<br>涉及的类：Enhancer<br>提供者：第三方cglib库<br>如何创建代理对象：<br>使用Enhancer类中的create方法<br>创建代理对象的要求：<br>被代理类不能是最终类<br>create方法的参数：</p><ul><li><p>Class：字节码<br>它是用于指定被代理对象的字节码。</p></li><li><p>Callback：用于提供增强的代码<br>它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。</p><pre><code> 此接口的实现类都是谁用谁写。</code></pre></li></ul><p>我们一般写的都是该接口的子接口实现类：MethodInterceptor </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Producer</span> cglibProducer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Producer</span><span class="token punctuation">)</span><span class="token class-name">Enhancer</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>producer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span><span class="token comment">//提供增强的代码</span><span class="token class-name">Object</span> returnValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token comment">//1.获取方法执行的参数</span>     <span class="token class-name">Float</span> money <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">)</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//2.判断当前方法是不是销售</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"saleProduct"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>producer<span class="token punctuation">,</span> money<span class="token operator">*</span><span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cglibProducer<span class="token punctuation">.</span><span class="token function">saleProduct</span><span class="token punctuation">(</span><span class="token number">12000f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>面向切面编程<br>作用：在程序运行期间，不修改源码的基础上对方法进行增强<br>优势：减少重复代码，提高开发效率，维护方便</p><p>是否实现了接口来判断<br>基于接口和基于子类的两种方式来动态代理</p><h2 id="Spring-Aop相关术语"><a href="#Spring-Aop相关术语" class="headerlink" title="Spring Aop相关术语"></a>Spring Aop相关术语</h2><p><strong>连接点</strong><br>方法就是连接点</p><p><strong>切入点</strong><br>被增强的方法就是切入点<br>所有的切入点都是连接点，但不是所有的连接点都是切入点</p><p><strong>通知和增强</strong><br>环绕通知是指整个方法调用</p><p><strong>四种通知类型</strong><br>前置通知<br>后置通知<br>异常通知<br>最终通知</p><p><strong>目标对象</strong><br>被代理对象</p><p><strong>织入</strong><br>加入增强功能的过程</p><p><strong>代理对象</strong><br>就是增强后的的代理类</p><p><strong>引介</strong><br>建立接入点方法</p><p><strong>切面</strong><br>切入点和通知(引介)的集合<br>就是一个抽象的概念，一步一步的执行，进行切分就是切入</p><h2 id="Spring中AOP配置"><a href="#Spring中AOP配置" class="headerlink" title="Spring中AOP配置"></a>Spring中AOP配置</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop        https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- an HTTP Session-scoped bean exposed as a proxy --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userPreferences<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.something.UserPreferences<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- instructs the container to proxy the surrounding bean --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>scoped-proxy</span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- a singleton-scoped bean injected with a proxy to the above bean --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.something.SimpleUserService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- a reference to the proxied userPreferences bean --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userPreferences<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userPreferences<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring中标签的AOP配置"><a href="#Spring中标签的AOP配置" class="headerlink" title="Spring中标签的AOP配置"></a>Spring中标签的AOP配置</h2><pre class="line-numbers language-none"><code class="language-none">spring中基于XML的AOP配置步骤        1、把通知Bean也交给spring来管理        2、使用aop:config标签表明开始AOP的配置        3、使用aop:aspect标签表明配置切面                id属性：是给切面提供一个唯一标识                ref属性：是指定通知类bean的Id。        4、在aop:aspect标签的内部使用对应标签来配置通知的类型               我们现在示例是让printLog方法在切入点方法执行之前之前：所以是前置通知               aop:before：表示配置前置通知                    method属性：用于指定Logger类中哪个方法是前置通知                    pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切入点表达式的写法"><a href="#切入点表达式的写法" class="headerlink" title="切入点表达式的写法"></a>切入点表达式的写法</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">切入点表达式的写法：                关键字：execution(表达式)                表达式：                    访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)                标准的表达式写法：                    public void com.itheima.service.impl.AccountServiceImpl.saveAccount()                访问修饰符可以省略                    void com.itheima.service.impl.AccountServiceImpl.saveAccount()                返回值可以使用通配符，表示任意返回值                    * com.itheima.service.impl.AccountServiceImpl.saveAccount()                包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.                    * *.*.*.*.AccountServiceImpl.saveAccount())                包名可以使用..表示当前包及其子包                    * *..AccountServiceImpl.saveAccount()                类名和方法名都可以使用*来实现通配                    * *..*.*()                参数列表：                    可以直接写数据类型：                        基本类型直接写名称           int                        引用类型写包名.类名的方式   java.lang.String                    可以使用通配符表示任意类型，但是必须有参数                    可以使用..表示有无参数均可，有参数可以是任意类型                全通配写法：                    * *..*.*(..)                实际开发中切入点表达式的通常写法：                    切到业务层实现类下的所有方法                        * com.itheima.service.impl.*.*(..)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.utils.Logger<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置AOP--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--配置切面 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 配置通知的类型，并且建立通知方法和切入点方法的关联--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>printLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.itheima.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>before</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Aop通知的四种类型"><a href="#Aop通知的四种类型" class="headerlink" title="Aop通知的四种类型"></a>Aop通知的四种类型</h2><p>基于XML的aop配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 配置Logger类 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.utils.Logger<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!--配置AOP--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- 配置切入点表达式 id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容             此标签写在aop:aspect标签内部只能当前切面使用。             它还可以写在aop:aspect外面，此时就变成了所有切面可用         --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.itheima.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--配置切面 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token comment">&lt;!-- 配置前置通知：在切入点方法执行之前执行           &lt;aop:before method="beforePrintLog" pointcut-ref="pt1" &gt;&lt;/aop:before&gt;--&gt;</span>           <span class="token comment">&lt;!-- 配置后置通知：在切入点方法正常执行之后值。它和异常通知永远只能执行一个           &lt;aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"&gt;&lt;/aop:after-returning&gt;--&gt;</span>           <span class="token comment">&lt;!-- 配置异常通知：在切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个           &lt;aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"&gt;&lt;/aop:after-throwing&gt;--&gt;</span>           <span class="token comment">&lt;!-- 配置最终通知：无论切入点方法是否正常执行它都会在其后面执行           &lt;aop:after method="afterPrintLog" pointcut-ref="pt1"&gt;&lt;/aop:after&gt;--&gt;</span>           <span class="token comment">&lt;!-- 配置环绕通知 详细的注释请看Logger类中--&gt;</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aroundPringLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>around</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>环绕通知    * 问题：    *      当我们配置了环绕通知之后，切入点方法没有执行，而通知方法执行了。    * 分析：    *      通过对比动态代理中的环绕通知代码，发现动态代理的环绕通知有明确的切入点方法调用，而我们的代码中没有。    * 解决：    *      Spring框架为我们提供了一个接口：ProceedingJoinPoint。()，此方法就相当于明确调用切入点方法。    *      该接口可以作为环绕通知的方法参数，在程序执行时，spring框架会为我们提供该接口的实现类供我们使用。    *    * spring中的环绕通知：    *      它是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式。      public Object aroundPringLog(ProceedingJoinPoint pjp){       Object rtValue = null;       try{           Object[] args = pjp.getArgs();//得到方法执行所需的参数           System.out.println("Logger类中的aroundPringLog方法开始记录日志了。。。前置");           rtValue = pjp.proceed(args);//明确调用业务层方法（切入点方法）           System.out.println("Logger类中的aroundPringLog方法开始记录日志了。。。后置");           return rtValue;       }catch (Throwable t){           System.out.println("Logger类中的aroundPringLog方法开始记录日志了。。。异常");           throw new RuntimeException(t);       }finally {           System.out.println("Logger类中的aroundPringLog方法开始记录日志了。。。最终");       }   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring注解的AOP配置"><a href="#Spring注解的AOP配置" class="headerlink" title="Spring注解的AOP配置"></a>Spring注解的AOP配置</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"logger"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Aspect</span><span class="token comment">//表示当前类是一个切面类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.impl.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pt1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">/**     * 前置通知     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">beforePrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知Logger类中的beforePrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 后置通知     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">afterReturningPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知Logger类中的afterReturningPrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 异常通知     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">afterThrowingPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知Logger类中的afterThrowingPrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 最终通知     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">afterPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知Logger类中的afterPrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注解的方式实现环绕增强"><a href="#注解的方式实现环绕增强" class="headerlink" title="注解的方式实现环绕增强"></a>注解的方式实现环绕增强</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"logger"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Aspect</span><span class="token comment">//表示当前类是一个切面类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.impl.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pt1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">aroundPringLog</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Object</span> rtValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到方法执行所需的参数</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。前置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rtValue <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//明确调用业务层方法（切入点方法）</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。后置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> rtValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。最终"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注解的方式aop环绕增强启动类"><a href="#注解的方式aop环绕增强启动类" class="headerlink" title="注解的方式aop环绕增强启动类"></a>注解的方式aop环绕增强启动类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJautoProxy</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackage<span class="token operator">=</span><span class="token string">"com.eeee"</span><span class="token punctuation">)</span><span class="token comment">/** * 使用Junit单元测试：测试我们的配置 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceTest</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span>  <span class="token class-name">IAccountService</span> as<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        as<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token number">100f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h1><h2 id="Spring中的jdbcTemlate以及Spring事务控制"><a href="#Spring中的jdbcTemlate以及Spring事务控制" class="headerlink" title="Spring中的jdbcTemlate以及Spring事务控制"></a>Spring中的jdbcTemlate以及Spring事务控制</h2><p>JDBCTemplate<br>spring.core包下的工具类</p><p>JDBCDaoSupper  自己定义一个公共类<br>抽取dao层的公共代码<br>xml方式注入方式    可以使用继承的方式来减少重复的代码<br>使用注解的方式     就直接autowired就行</p><p>如果使用了spring中的jdbcdaosupper类<br>再使用注解的方式注入就变得麻烦了</p><h2 id="注解的方式实现aop环境配置"><a href="#注解的方式实现aop环境配置" class="headerlink" title="注解的方式实现aop环境配置"></a>注解的方式实现aop环境配置</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--开启spring对注解AOP的支持--&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="基于XML的声明式事务控制配置步骤"><a href="#基于XML的声明式事务控制配置步骤" class="headerlink" title="基于XML的声明式事务控制配置步骤"></a>基于XML的声明式事务控制配置步骤</h2><h3 id="1、配置事务管理器"><a href="#1、配置事务管理器" class="headerlink" title="1、配置事务管理器"></a>1、配置事务管理器</h3><h3 id="2、配置事务的通知"><a href="#2、配置事务的通知" class="headerlink" title="2、配置事务的通知"></a>2、配置事务的通知</h3><p>此时我们需要导入事务的约束 tx名称空间和约束，同时也需要aop的<br>使用 tx:advice 标签配置事务通知</p><p><strong>属性</strong>：</p><p><strong>id</strong>：给事务通知起一个唯一标识</p><p><strong>transaction-manager</strong>：给事务通知提供一个事务管理器引用</p><h3 id="3、配置AOP中的通用切入点表达式"><a href="#3、配置AOP中的通用切入点表达式" class="headerlink" title="3、配置AOP中的通用切入点表达式"></a>3、配置AOP中的通用切入点表达式</h3><h3 id="4、建立事务通知和切入点表达式的对应关系"><a href="#4、建立事务通知和切入点表达式的对应关系" class="headerlink" title="4、建立事务通知和切入点表达式的对应关系"></a>4、建立事务通知和切入点表达式的对应关系</h3><h3 id="5、配置事务的属性"><a href="#5、配置事务的属性" class="headerlink" title="5、配置事务的属性"></a>5、配置事务的属性</h3><p>是在事务的通知tx:advice标签的内部</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 配置事务管理器 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!-- 配置事务的通知--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置事务的属性                isolation：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。                propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。                read-only：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。                timeout：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了数值，以秒为单位。                rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。表示任何异常都回滚。                no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。表示任何异常都回滚。        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>method</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 配置aop--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 配置切入点表达式--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.itheima.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--建立切入点表达式和事务通知的对应关系 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于注解配置事务管理器"><a href="#基于注解配置事务管理器" class="headerlink" title="基于注解配置事务管理器"></a>基于注解配置事务管理器</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 配置数据源--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/eesy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- spring中基于XML的声明式事务控制配置步骤       1、配置事务管理器       2、配置事务的通知               此时我们需要导入事务的约束 tx名称空间和约束，同时也需要aop的               使用tx:advice标签配置事务通知                   属性：                       id：给事务通知起一个唯一标识                       transaction-manager：给事务通知提供一个事务管理器引用       3、配置AOP中的通用切入点表达式       4、建立事务通知和切入点表达式的对应关系       5、配置事务的属性              是在事务的通知tx:advice标签的内部    --&gt;</span>       <span class="token comment">&lt;!-- 配置事务管理器 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 配置事务的通知--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token comment">&lt;!-- 配置事务的属性               isolation：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。               propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。               read-only：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。               timeout：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了数值，以秒为单位。               rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。表示任何异常都回滚。               no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。表示任何异常都回滚。       --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>method</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 配置aop--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- 配置切入点表达式--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.itheima.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--建立切入点表达式和事务通知的对应关系 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在你的业务层加上-Transactional注解"><a href="#在你的业务层加上-Transactional注解" class="headerlink" title="在你的业务层加上@Transactional注解"></a>在你的业务层加上@Transactional注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>SUPPORTS<span class="token punctuation">,</span>readOnly<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//只读型事务的配置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.itheima"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">JdbcConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">TransactionConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"jdbcConfig.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableTransactionManagement</span>  <span class="token comment">//EnableTransactionManagement</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">/** * 使用Junit单元测试：测试我们的配置 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes<span class="token operator">=</span> <span class="token class-name">SpringConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span>  <span class="token class-name">IAccountService</span> as<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">testTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        as<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token number">100f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编程式事物控制"><a href="#编程式事物控制" class="headerlink" title="编程式事物控制"></a>编程式事物控制</h2><p>没看，视频156-158</p>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java框架 </tag>
            
            <tag> Srping </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS Gateway 报错： Failed to delete file or dir [/tmp/.hdfs-nfs]： it still exists</title>
      <link href="/zwhblog.cn/2020/11/12/cdh/hdfs-gateway-bao-cuo-failed-to-delete-file-or-dir-tmp.hdfs-nfs-it-still-exists/"/>
      <url>/zwhblog.cn/2020/11/12/cdh/hdfs-gateway-bao-cuo-failed-to-delete-file-or-dir-tmp.hdfs-nfs-it-still-exists/</url>
      
        <content type="html"><![CDATA[<p>tmp没有权限，所有Gateway节点都弄</p><pre class="line-numbers language-none"><code class="language-none">chmod 777 /tmp <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启Hdfs</p><p>原来的权限是</p><pre class="line-numbers language-none"><code class="language-none">drwxrwxrwt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是只允许root用户来操作的目录<br>执行完后  权限会改成</p><pre class="line-numbers language-none"><code class="language-none">drwxrwxrw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>变成了所有用户可以操作的目录</p>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDH5.16.2安装Kafka4.1.0</title>
      <link href="/zwhblog.cn/2020/11/12/cdh/kafka/cdh5.16.2-an-zhuang-kafka4.1.0/"/>
      <url>/zwhblog.cn/2020/11/12/cdh/kafka/cdh5.16.2-an-zhuang-kafka4.1.0/</url>
      
        <content type="html"><![CDATA[<p>安装Kafka，需要下载Parcel包</p><p>Kafka.parcel下载地址：<a href="http://archive.cloudera.com/kafka/parcels/4.1.0/">http://archive.cloudera.com/kafka/parcels/4.1.0/</a></p><p><img src="https://img-blog.csdnimg.cn/20201112092356320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>将下面的三个文件上传到/opt/cloudera/parcel-repo目录下</p><p><img src="https://img-blog.csdnimg.cn/2020111209344464.png#pic_center" alt="在这里插入图片描述"><br>把sha1改成sha</p><p>在7180页面进行解压和激活Kafka服务</p>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDH5.16.2安装Spark2.4</title>
      <link href="/zwhblog.cn/2020/11/12/cdh/spark/cdh5.16.2-an-zhuang-spark2.4/"/>
      <url>/zwhblog.cn/2020/11/12/cdh/spark/cdh5.16.2-an-zhuang-spark2.4/</url>
      
        <content type="html"><![CDATA[<p>安装了好几次才成功，做做笔记<br>CDH安装时，用的离线安装，下载parcel包进行操作<br><img src="https://img-blog.csdnimg.cn/20201112085329647.png#pic_center" alt="在这里插入图片描述"><br>上面的这四个都得下载下来，manifest.json和parcel的可以在一起下载</p><p>Spark2.4.0下载地址：<a href="https://archive.cloudera.com/spark2/parcels/2.4.0.cloudera2/">https://archive.cloudera.com/spark2/parcels/2.4.0.cloudera2/</a><br><img src="https://img-blog.csdnimg.cn/20201112085711967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>Yarn的下载地址：<a href="http://archive.cloudera.com/spark2/csd/">http://archive.cloudera.com/spark2/csd/</a><br><img src="https://img-blog.csdnimg.cn/20201112085835980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>选择对应版本的进行下载<br>下载完毕进行上传</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>将下面的三个文件上传到<code>/opt/cloudera/parcel-repo</code>目录下<br><img src="https://img-blog.csdnimg.cn/20201112090025357.png#pic_center" alt="在这里插入图片描述"><br>将.parcel.sha1改成.parcel.sha</p><pre class="line-numbers language-none"><code class="language-none">mv SPARK2-2.4.0.cloudera2-1.cdh5.13.3.p0.1041012-el7.parcel.sha1 SPARK2-2.4.0.cloudera2-1.cdh5.13.3.p0.1041012-el7.parcel.sha<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将下面的jar包上传到/opt/cloudera/csd目录下<br><img src="https://img-blog.csdnimg.cn/20201112090443374.png#pic_center" alt="在这里插入图片描述"><br>打开7180监控页面，点击右上角<br><img src="https://img-blog.csdnimg.cn/20201112090916437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击检查新的Parcel，出来Spark2，然后进行分配，分配完成后再点一下进行激活，这是单独的两个步骤<br><img src="https://img-blog.csdnimg.cn/20201112091106611.png#pic_center" alt="选择Spark2，"><br><img src="https://img-blog.csdnimg.cn/2020111209133729.png#pic_center" alt="在这里插入图片描述"></p><p>激活成功之后，进行Spark的安装<br><img src="https://img-blog.csdnimg.cn/20201112091409833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201112091437667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>安装完就好了</p>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canal配置方式发送数据到Kafka</title>
      <link href="/zwhblog.cn/2020/11/10/canal/canal1.1.4-shu-ju-zhi-jie-fa-song-kafka-topic/"/>
      <url>/zwhblog.cn/2020/11/10/canal/canal1.1.4-shu-ju-zhi-jie-fa-song-kafka-topic/</url>
      
        <content type="html"><![CDATA[<h1 id="Canal修改配置文件"><a href="#Canal修改配置文件" class="headerlink" title="Canal修改配置文件"></a>Canal修改配置文件</h1><p>在原有Canal已经启动运行成功的情况下，</p><p>停掉服务，找到这个配置文件中对应项进行修改：</p><h2 id="第一个配置文件"><a href="#第一个配置文件" class="headerlink" title="第一个配置文件"></a>第一个配置文件</h2><blockquote><p>vim  /opt/canal/conf/canal.properties</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># 配置zkcanal.zkServers = hadoop1:2181,hadoop2:2181,hadoop3:2181# 设置成rowcanal.instance.binlog.format = ROW# 可选项: tcp(默认), kafka, RocketMQcanal.serverMode = kafka# 填写你的kafka地址和端口，可以不用都写canal.mq.servers = hadoop1:9092,hadoop2:9092,hadoop3:9092# 配置你的mysql地址，数据库的名称不用改，它默认全是这个名字，刚开始改名了，后来嫌麻烦改回来了# 涉及到配置账号密码的都设置好别漏掉一个canal.instance.tsdb.url = jdbc:mysql://hadoop1:3306/canal_tsdbcanal.instance.tsdb.dbUsername = canalcanal.instance.tsdb.dbPassword = 123456#这里要配置成mysql的，不变的话链接mysql会报 java.sql.SQLExceptionjava.sql.SQL：driverClass org.h2.Driver# canal.instance.tsdb.spring.xml = classpath:spring/tsdb/h2-tsdb.xml  canal.instance.tsdb.spring.xml = classpath:spring/tsdb/mysql-tsdb.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二个配置文件"><a href="#第二个配置文件" class="headerlink" title="第二个配置文件"></a>第二个配置文件</h2><blockquote><p>vim  /opt/canal/conf/example/instance.properties</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># 配置mysqlcanal.instance.tsdb.url=jdbc:mysql://hadoop1:3306/canal_tsdbcanal.instance.tsdb.dbUsername=canalcanal.instance.tsdb.dbPassword=123456# 配置过滤，可以在这里指定表和库，只获取他们的binlogcanal.instance.filter.regex=.*\\..*# 配置多topic，在这里可以指定你的数据放kafka的哪个topic，还可以自己指定topic的名称，不存在的topic会自动创建canal.mq.dynamicTopic=exercise_topic:exercise\\.user,exercise_topic2:exercise2\\.user2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面配置文件中的特殊参数配置说明可以在下面进行查看</p><p>conf/example/instance.properties配置文件中的<code>canal.instance.filter.regex=</code>  属性：</p><p>mysql 数据解析关注的表，Perl正则表达式.多个正则之间以逗号(,)分隔，转义符需要双斜杠(\)<br>常见例子：</p><ol><li>所有表：.* or .<em>\..</em></li><li>canal schema下所有表： canal\..*</li><li>canal下的以canal打头的表：canal\.canal.*</li><li>canal schema下的一张表：canal.test1</li><li>多个规则组合使用：canal\..*,mysql.test1,mysql.test2 (逗号分隔)<br>注意：此过滤条件只针对row模式的数据有效(ps. mixed/statement因为不解析sql，所以无法准确提取tableName进行过滤)</li></ol><p>conf/example/instance.properties配置文件的<code>canal.mq.dynamicTopic</code> 表达式说明：</p><p><strong>canal 1.1.3</strong>版本之后, 支持配置格式：schema 或 schema.table，多个配置之间使用逗号或分号分隔：</p><ul><li>例子1：test.test 指定匹配的单表，发送到以test_test为名字的topic上</li><li>例子2：... 匹配所有表，则每个表都会发送到各自表名的topic上</li><li>例子3：test 指定匹配对应的库，一个库的所有表都会发送到库名的topic上</li><li>例子4：test.* 指定匹配的表达式，针对匹配的表会发送到各自表名的topic上</li><li>例子5：test,test1.test1，指定多个表达式，会将test库的表都发送到test的topic上，test1.test1的表发送到对应的test1_test1 topic上，其余的表发送到默认的canal.mq.topic值<br>为满足更大的灵活性，允许对匹配条件的规则指定发送的topic名字，配置格式：topicName:schema 或 topicName:schema.table：</li><li>例子1: test:test.test 指定匹配的单表，发送到以test为名字的topic上</li><li>例子2: test:... 匹配所有表，因为有指定topic，则每个表都会发送到test的topic下</li><li>例子3: test:test 指定匹配对应的库，一个库的所有表都会发送到test的topic下</li><li>例子4：testA:test.* 指定匹配的表达式，针对匹配的表会发送到testA的topic下</li><li>例子5：test0:test,test1:test1.test1，指定多个表达式，会将test库的表都发送到test0的topic下，test1.test1的表发送到对应的test1的topic下，其余的表发送到默认的canal.mq.topic值</li></ul><p>conf/example/instance.properties配置文件的<code>canal.mq.partitionHash</code> 表达式说明：<br>canal 1.1.3版本之后, 支持配置格式：schema.table:pk1^pk2，多个配置之间使用逗号分隔：</p><ul><li>例子1：test.test:pk1^pk2 指定匹配的单表，对应的hash字段为pk1 + pk2</li><li>例子2：...:id 正则匹配，指定所有正则匹配的表对应的hash字段为id</li><li>例子3：...:pk 正则匹配，指定所有正则匹配的表对应的hash字段为表主键(自动查找)</li><li>例子4: 匹配规则啥都不写，则默认发到0这个partition上</li><li>例子5：... ，不指定pk信息的正则匹配，将所有正则匹配的表,对应的hash字段为表名。按表hash: 一张表的所有数据可以发到同一个分区，不同表之间会做散列 (会有热点表分区过大问题)</li><li>例子6: test.test:id,...* , 针对test的表按照id散列,其余的表按照table散列</li><li>注意：设置匹配规则，多条匹配规则之间是按照顺序进行匹配(命中一条规则就返回)</li></ul><h2 id="启动Canal"><a href="#启动Canal" class="headerlink" title="启动Canal"></a>启动Canal</h2><p>配置完成，启动canal，然后查看日志</p><pre class="line-numbers language-none"><code class="language-none">tail -10 logs/canal/canal.logtail -10 logs/example/example.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>没有报错信息，启动成功！</p><p>查看kafka的topic列表</p><pre class="line-numbers language-none"><code class="language-none">kafka-topics --list --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有我要的发数据的topic</p><p>打开mysql执行一句delete或者insert<br>再次查看kafka的topics，发现已经生成了topic<br>进行消费数据</p><pre class="line-numbers language-none"><code class="language-none">kafka-console-consumer --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --from-beginning --topic exercise_topic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到消费到了数据<br><img src="https://img-blog.csdnimg.cn/2020111115374725.png#pic_center" alt="在这里插入图片描述"><br>配置好用好这个就不用写canal客户端代码了<br>到这里就完成了，如果有什么没有表述清楚，可以告知，会改。</p><p>下面是我整体的配置文件</p><p>canal.properties  整体配置文件：</p><pre class="line-numbers language-none"><code class="language-none">########################################################## common argument############################################################### tcp bind ipcanal.ip =# register ip to zookeepercanal.register.ip =canal.port = 11111canal.metrics.pull.port = 11112# canal instance user/passwd# canal.user = canal# canal.passwd = E3619321C1A937C46A0D8BD1DAC39F93B27D4458# canal admin config#canal.admin.manager = 127.0.0.1:8089canal.admin.port = 11110canal.admin.user = admincanal.admin.passwd = 4ACFE3202A5FF5CF467898FC58AAB1D615029441canal.zkServers = hadoop1:2181,hadoop2:2181,hadoop3:2181# flush data to zkcanal.zookeeper.flush.period = 1000canal.withoutNetty = false# tcp, kafka, RocketMQ# canal.serverMode = tcpcanal.serverMode = kafka# flush meta cursor/parse position to filecanal.file.data.dir = ${canal.conf.dir}canal.file.flush.period = 1000## memory store RingBuffer size, should be Math.pow(2,n)canal.instance.memory.buffer.size = 16384## memory store RingBuffer used memory unit size , default 1kbcanal.instance.memory.buffer.memunit = 1024 ## meory store gets mode used MEMSIZE or ITEMSIZEcanal.instance.memory.batch.mode = MEMSIZEcanal.instance.memory.rawEntry = true## detecing configcanal.instance.detecting.enable = false#canal.instance.detecting.sql = insert into retl.xdual values(1,now()) on duplicate key update x=now()canal.instance.detecting.sql = select 1canal.instance.detecting.interval.time = 3canal.instance.detecting.retry.threshold = 3canal.instance.detecting.heartbeatHaEnable = false# support maximum transaction size, more than the size of the transaction will be cut into multiple transactions deliverycanal.instance.transaction.size =  1024# mysql fallback connected to new master should fallback timescanal.instance.fallbackIntervalInSeconds = 60# network configcanal.instance.network.receiveBufferSize = 16384canal.instance.network.sendBufferSize = 16384canal.instance.network.soTimeout = 30# binlog filter configcanal.instance.filter.druid.ddl = truecanal.instance.filter.query.dcl = falsecanal.instance.filter.query.dml = falsecanal.instance.filter.query.ddl = falsecanal.instance.filter.table.error = falsecanal.instance.filter.rows = falsecanal.instance.filter.transaction.entry = false# binlog format/image check#canal.instance.binlog.format = ROW,STATEMENT,MIXEDcanal.instance.binlog.format = ROW canal.instance.binlog.image = FULL,MINIMAL,NOBLOB# binlog ddl isolationcanal.instance.get.ddl.isolation = false# parallel parser configcanal.instance.parser.parallel = true## concurrent thread number, default 60% available processors, suggest not to exceed Runtime.getRuntime().availableProcessors()#canal.instance.parser.parallelThreadSize = 16## disruptor ringbuffer size, must be power of 2canal.instance.parser.parallelBufferSize = 256# table meta tsdb infocanal.instance.tsdb.enable = truecanal.instance.tsdb.dir = ${canal.file.data.dir:../conf}/${canal.instance.destination:}canal.instance.tsdb.url = jdbc:h2:${canal.instance.tsdb.dir}/h2;CACHE_SIZE=1000;MODE=MYSQL;canal.instance.tsdb.dbUsername = canalcanal.instance.tsdb.dbPassword = 123456# dump snapshot interval, default 24 hourcanal.instance.tsdb.snapshot.interval = 24# purge snapshot expire , default 360 hour(15 days)canal.instance.tsdb.snapshot.expire = 360# aliyun ak/sk , support rds/mqcanal.aliyun.accessKey =canal.aliyun.secretKey =########################################################## destinations##############################################################canal.destinations = example# conf root dircanal.conf.dir = ../conf# auto scan instance dir add/remove and start/stop instancecanal.auto.scan = truecanal.auto.scan.interval = 5#canal.instance.tsdb.spring.xml = classpath:spring/tsdb/h2-tsdb.xmlcanal.instance.tsdb.spring.xml = classpath:spring/tsdb/mysql-tsdb.xmlcanal.instance.global.mode = springcanal.instance.global.lazy = falsecanal.instance.global.manager.address = ${canal.admin.manager}#canal.instance.global.spring.xml = classpath:spring/memory-instance.xmlcanal.instance.global.spring.xml = classpath:spring/file-instance.xml#canal.instance.global.spring.xml = classpath:spring/default-instance.xml###########################################################      MQ      ###############################################################canal.mq.servers = hadoop1:9092,hadoop2:9092,hadoop3:9092canal.mq.retries = 2canal.mq.batchSize = 16384canal.mq.maxRequestSize = 1048576canal.mq.lingerMs = 100canal.mq.bufferMemory = 33554432canal.mq.canalBatchSize = 50canal.mq.canalGetTimeout = 100canal.mq.flatMessage = truecanal.mq.compressionType = nonecanal.mq.acks = all#canal.mq.properties. =canal.mq.producerGroup = test# Set this value to "cloud", if you want open message trace feature in aliyun.canal.mq.accessChannel = local# aliyun mq namespace#canal.mq.namespace =###########################################################     Kafka Kerberos Info    ###############################################################canal.mq.kafka.kerberos.enable = falsecanal.mq.kafka.kerberos.krb5FilePath = "../conf/kerberos/krb5.conf"canal.mq.kafka.kerberos.jaasFilePath = "../conf/kerberos/jaas.conf"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>instance.properties  整体配置文件：</p><pre class="line-numbers language-none"><code class="language-none">################################################### mysql serverId , v1.0.26+ will autoGen# canal.instance.mysql.slaveId=0# enable gtid use true/falsecanal.instance.gtidon=false# position infocanal.instance.master.address=hadoop1:3306canal.instance.master.journal.name=canal.instance.master.position=canal.instance.master.timestamp=canal.instance.master.gtid=# rds oss binlogcanal.instance.rds.accesskey=canal.instance.rds.secretkey=canal.instance.rds.instanceId=# table meta tsdb infocanal.instance.tsdb.enable=true#canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/canal_tsdb#canal.instance.tsdb.dbUsername=canal#canal.instance.tsdb.dbPassword=canalcanal.instance.tsdb.url=jdbc:mysql://hadoop1:3306/canal_tsdbcanal.instance.tsdb.dbUsername=canalcanal.instance.tsdb.dbPassword=123456#canal.instance.standby.address =#canal.instance.standby.journal.name =#canal.instance.standby.position =#canal.instance.standby.timestamp =#canal.instance.standby.gtid=# username/passwordcanal.instance.dbUsername=canalcanal.instance.dbPassword=123456canal.instance.connectionCharset = UTF-8# enable druid Decrypt database passwordcanal.instance.enableDruid=false#canal.instance.pwdPublicKey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALK4BUxdDltRRE5/zXpVEVPUgunvscYFtEip3pmLlhrWpacX7y7GCMo2/JM6LeHmiiNdH1FWgGCpUfircSwlWKUCAwEAAQ==# table regex#canal.instance.filter.regex=.*\\..*canal.instance.filter.regex=exercise.user# table black regexcanal.instance.filter.black.regex=# table field filter(format: schema1.tableName1:field1/field2,schema2.tableName2:field1/field2)#canal.instance.filter.field=test1.t_product:id/subject/keywords,test2.t_company:id/name/contact/ch# mq configcanal.mq.topic=example# dynamic topic route by schema or table regex#canal.mq.dynamicTopic=mytest1.user,mytest2\\..*,.*\\..*canal.mq.partition=0# hash partition config#canal.mq.partitionsNum=3#canal.mq.partitionHash=test.table:id^name,.*\\..*#################################################<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Canal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canal </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CM报错：Unable to build ntityManagerFactory</title>
      <link href="/zwhblog.cn/2020/11/10/cdh/cm-bao-cuo/"/>
      <url>/zwhblog.cn/2020/11/10/cdh/cm-bao-cuo/</url>
      
        <content type="html"><![CDATA[<p>今天CDH突然报错，先重启了一下CM，然后在重试，结果还是不行，WebUI打不开</p><p>报错内容</p><pre class="line-numbers language-none"><code class="language-none">2020-11-10 13:32:36,827 ERROR 100851968@scm-web-6023:org.mortbay.log: /cmf/j_spring_security_checkjava.lang.RuntimeException: javax.persistence.PersistenceException: org.hibernate.exception.GenericJDBCException: Could not open connectionorg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.cloudera.server.cmf.TrialState': Cannot resolve reference to bean 'entityManagerFactoryBean' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactoryBean': FactoryBean threw exception on object creation; nested exception is javax.persistence.PersistenceException: [PersistenceUnit: cmf.server] Unable to build EntityManagerFactory........<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在网上查了没查出什么结果</p><p>就把agent和server的日志都看了看，就是连接不上Mysql数据库，而且权限都配置好了<br>然后发现了一篇博客</p><blockquote><p><a href="https://www.cnblogs.com/zlslch/p/7266101.html">https://www.cnblogs.com/zlslch/p/7266101.html</a></p></blockquote><p>参考里面的一部分，浏览了里面提到的cm-5.16.2/etc/cloudera-scm-server/db.properties,…..等文件之后，发现里面存在的是CM连接数据库的配置信息<br>这些信息是之前用过的(初始化了多次数据库)，把这些我改成了我现在的用户和密码后，重启CM</p><pre class="line-numbers language-none"><code class="language-none">/opt/cm-5.16.2/etc/init.d/cloudera-scm-agent restart/opt/cm-5.16.2/etc/init.d/cloudera-scm-server restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次 浏览器连接 7180  进行查看，成功</p>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7下Canal1.1.4安装</title>
      <link href="/zwhblog.cn/2020/11/10/canal/centos7-xia-canal1.1.4-de-an-zhuang/"/>
      <url>/zwhblog.cn/2020/11/10/canal/centos7-xia-canal1.1.4-de-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Canal是什么？"><a href="#Canal是什么？" class="headerlink" title="Canal是什么？"></a>Canal是什么？</h1><p>canal [kə’næl]，译意为水道/管道/沟渠，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费<br><img src="https://img-blog.csdnimg.cn/20201110125412686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>工作原理</strong></p><p>canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送 dump 协议<br>MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )<br>canal 解析 binary log 对象(原始为 byte 流)</p><h2 id="安装前的准备-配置Mysql"><a href="#安装前的准备-配置Mysql" class="headerlink" title="安装前的准备 配置Mysql"></a>安装前的准备 配置Mysql</h2><p>Canal是模仿mysql的slave，需要读取mysql的binlog文件，Mysql默认是没有开启binlog的，要先开启日志</p><p>vim /etc/my.cnf</p><pre class="line-numbers language-none"><code class="language-none">[mysqld]log-bin=mysql-bin # 开启 binlogbinlog-format=ROW # 选择 ROW 模式server_id=1 # 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置完成后</p><p>查看binlog的状态</p><pre class="line-numbers language-none"><code class="language-none">show VARIABLES like 'log_bin'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201110132056354.png#pic_center" alt="在这里插入图片描述"></p><p>//查看binlog日志</p><pre class="line-numbers language-none"><code class="language-none">show binary logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201110132112497.png#pic_center" alt="在这里插入图片描述"></p><p>//查看master状态</p><pre class="line-numbers language-none"><code class="language-none">show master status ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201110132122230.png#pic_center" alt="在这里插入图片描述"><br>注意：针对阿里云 RDS for MySQL , 默认打开了 binlog , 并且账号默认具有 binlog dump 权限 , 不需要任何权限或者 binlog 设置,可以直接跳过这一步</p><h2 id="Mysql-binlog的三种格式"><a href="#Mysql-binlog的三种格式" class="headerlink" title="Mysql  binlog的三种格式"></a>Mysql  binlog的三种格式</h2><p>1） statement<br>语句级，binlog会记录每次一执行写操作的语句。<br>相对row模式节省空间，但是可能产生不一致性，比如<br>update tt set create_date=now()<br>如果用binlog日志进行恢复，由于执行时间不同可能产生的数据就不同。<br>优点： 节省空间<br>缺点： 有可能造成数据不一致。<br>2） row<br>行级， binlog会记录每次操作后每行记录的变化。<br>优点：保持数据的绝对一致性。因为不管sql是什么，引用了什么函数，他只记录执行后的效果。<br>缺点：占用较大空间。</p><p>3） mixed<br>statement的升级版，一定程度上解决了，因为一些情况而造成的statement模式不一致问题<br>在某些情况下譬如：<br>当函数中包含 UUID() 时；<br>包含 AUTO_INCREMENT 字段的表被更新时；<br>执行 INSERT DELAYED 语句时；<br>用 UDF 时；<br>会按照 ROW的方式进行处理<br>优点：节省空间，同时兼顾了一定的一致性。<br>缺点：还有些极个别情况依旧会造成不一致，另外statement和mixed对于需要对binlog的监控的情况都不方便。</p><h2 id="重启你的Mysql服务"><a href="#重启你的Mysql服务" class="headerlink" title="重启你的Mysql服务"></a>重启你的Mysql服务</h2><pre class="line-numbers language-none"><code class="language-none">service mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="进入你的mysql，添加canal使用的用户"><a href="#进入你的mysql，添加canal使用的用户" class="headerlink" title="进入你的mysql，添加canal使用的用户"></a>进入你的mysql，添加canal使用的用户</h2><pre class="line-numbers language-none"><code class="language-none">use mysql;在mysql创建一个用户create user 'canal'@'%' identified by '123456';修改密码update user set authentication_string=password("123456") where user="canal";对用户进行授权grant all privileges on *.* to 'canal'@'localhost' identified by '123456' with grant option;GRANT ALL PRIVILEGES ON *.* TO 'canal'@'%' IDENTIFIED BY '123456';刷新权限FLUSH PRIVILEGES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加完毕后，测试是否可以正常连接，如果不测试的话，到时候canal报错还得看日志</p><h2 id="下载Canal"><a href="#下载Canal" class="headerlink" title="下载Canal"></a>下载Canal</h2><p>下载Canal的包：<a href="https://github.com/alibaba/canal/releases/tag/canal-1.1.4">官网下载地址</a></p><p>下载上传后解压包</p><pre class="line-numbers language-none"><code class="language-none">mkdir canaltar -zxvf canal.deployer-1.1.4.tar.gz -C /opt/canal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>会生成四个文件夹<br><img src="https://img-blog.csdnimg.cn/20201110130532710.png#pic_center" alt="在这里插入图片描述"></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>vim conf/example/instance.properties</p><pre class="line-numbers language-none"><code class="language-none">## mysql serverIdcanal.instance.mysql.slaveId = 1234#position info，需要改成自己的数据库信息canal.instance.master.address = hadoop1:3306 canal.instance.master.journal.name = canal.instance.master.position = canal.instance.master.timestamp = #canal.instance.standby.address = #canal.instance.standby.journal.name =#canal.instance.standby.position = #canal.instance.standby.timestamp = #username/password，需要改成自己的数据库信息canal.instance.dbUsername = canalcanal.instance.dbPassword = 123456canal.instance.defaultDatabaseName =canal.instance.connectionCharset = UTF-8#table regexcanal.instance.filter.regex = .\*\\\\..\*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要修改Canal的端口号可以在conf/canal.properties中修改</p><p>vim conf/canal.properties<br><img src="https://img-blog.csdnimg.cn/20201110130951663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="启动Canal服务端"><a href="#启动Canal服务端" class="headerlink" title="启动Canal服务端"></a>启动Canal服务端</h2><pre class="line-numbers language-none"><code class="language-none">sh bin/startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>查看Server 日志</p><pre class="line-numbers language-none"><code class="language-none">vim  logs/canal/canal.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 instance 的日志</p><pre class="line-numbers language-none"><code class="language-none">vim  logs/example/example.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有报错就说明启动没有问题</p><h2 id="客户端pom文件配置"><a href="#客户端pom文件配置" class="headerlink" title="客户端pom文件配置"></a>客户端pom文件配置</h2><p>服务端启动完成后使用代码访问服务端<br>pom文件中导包</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba.otter&lt;/groupId&gt;        &lt;artifactId&gt;canal.client&lt;/artifactId&gt;        &lt;version&gt;1.1.4&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h2><pre class="line-numbers language-none"><code class="language-none">import com.alibaba.otter.canal.client.CanalConnectors;import com.alibaba.otter.canal.client.CanalConnector;import com.alibaba.otter.canal.protocol.Message;import com.alibaba.otter.canal.protocol.CanalEntry.Column;import com.alibaba.otter.canal.protocol.CanalEntry.Entry;import com.alibaba.otter.canal.protocol.CanalEntry.EntryType;import com.alibaba.otter.canal.protocol.CanalEntry.EventType;import com.alibaba.otter.canal.protocol.CanalEntry.RowChange;import com.alibaba.otter.canal.protocol.CanalEntry.RowData;import org.springframework.beans.factory.InitializingBean;import org.springframework.stereotype.Component;import java.net.InetSocketAddress;import java.util.List;@Componentpublic class CannalClient implements InitializingBean {    public static void main(String args[]) {        // 创建链接  连接地址是安装canal的地址，端口默认11111，example是他的配置文件的topic名称，账号密码是自己设置的        CanalConnector connector = CanalConnectors.newSingleConnector(new InetSocketAddress("hadoop1",                11111), "example", "canal", "123456");        int batchSize = 1000;        int emptyCount = 0;        try {            connector.connect();            connector.subscribe(".*\\..*");            connector.rollback();            int totalEmptyCount = 120;            while (emptyCount &lt; totalEmptyCount) {                Message message = connector.getWithoutAck(batchSize); // 获取指定数量的数据                long batchId = message.getId();                int size = message.getEntries().size();                if (batchId == -1 || size == 0) {                    emptyCount++;                    System.out.println("empty count : " + emptyCount);                    try {                        Thread.sleep(1000);                    } catch (InterruptedException e) {                    }                } else {                    emptyCount = 0;                    // System.out.printf("message[batchId=%s,size=%s] \n", batchId, size);                    printEntry(message.getEntries());                }                connector.ack(batchId); // 提交确认                // connector.rollback(batchId); // 处理失败, 回滚数据            }            System.out.println("empty too many times, exit");        } finally {            connector.disconnect();        }    }    private static void printEntry(List&lt;Entry&gt; entrys) {        for (Entry entry : entrys) {            if (entry.getEntryType() == EntryType.TRANSACTIONBEGIN || entry.getEntryType() == EntryType.TRANSACTIONEND) {                continue;            }            RowChange rowChage = null;            try {                rowChage = RowChange.parseFrom(entry.getStoreValue());            } catch (Exception e) {                throw new RuntimeException("ERROR ## parser of eromanga-event has an error , data:" + entry.toString(),                        e);            }            EventType eventType = rowChage.getEventType();            System.out.println(String.format("================&gt; binlog[%s:%s] , name[%s,%s] , eventType : %s",                    entry.getHeader().getLogfileName(), entry.getHeader().getLogfileOffset(),                    entry.getHeader().getSchemaName(), entry.getHeader().getTableName(),                    eventType));            for (RowData rowData : rowChage.getRowDatasList()) {                if (eventType == EventType.DELETE) {                    printColumn(rowData.getBeforeColumnsList());                } else if (eventType == EventType.INSERT) {                    printColumn(rowData.getAfterColumnsList());                } else {                    System.out.println("-------&gt; before");                    printColumn(rowData.getBeforeColumnsList());                    System.out.println("-------&gt; after");                    printColumn(rowData.getAfterColumnsList());                }            }        }    }    private static void printColumn(List&lt;Column&gt; columns) {        for (Column column : columns) {            System.out.println(column.getName() + " : " + column.getValue() + "    update=" + column.getUpdated());        }    }    @Override    public void afterPropertiesSet() throws Exception {    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在启动后可以操作mysql的数据库，插入删除数据看看是否有数据被打印出来</p><p>没有说明白的地方可以查看官方文档<a href="https://github.com/alibaba/canal/wiki/QuickStart">https://github.com/alibaba/canal/wiki/QuickStart</a></p>]]></content>
      
      
      <categories>
          
          <category> Canal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sqoop1导入数据hdsf/hive</title>
      <link href="/zwhblog.cn/2020/11/09/cdh/sqoop/sqoop1-dao-ru-hdfs-hive-shu-ju/"/>
      <url>/zwhblog.cn/2020/11/09/cdh/sqoop/sqoop1-dao-ru-hdfs-hive-shu-ju/</url>
      
        <content type="html"><![CDATA[<p>sqoop是apache旗下一款“Hadoop和关系数据库服务器之间传送数据”的工具。</p><p>导入数据：MySQL，Oracle导入数据到Hadoop的HDFS、HIVE、HBASE等数据存储系统；</p><p>导出数据：从Hadoop的文件系统中导出数据到关系数据库</p><p>CDH先安装了Sqoop2，以为用法一样，只是结构不一样了，后来发现用法完全不一样，又把sqoop给装了回来，还复习了一波<br>hadoop1    是我的Mysql安装机器<br>exercise    Mysql中测试的的数据库<br>test_table   Mysql  exercise数据库的测试表<br>@[toc]<br>|选项  | 含义说明 |<br>|–|–|<br>|–append  |  将数据追加到HDFS上一个已存在的数据集上|<br>| –as-avrodatafile |将数据导入到Avro数据文件  |<br>| –as-sequencefile | 将数据导入到SequenceFile |<br>|–as-textfile  | 将数据导入到普通文本文件（默认） |<br>| –boundary-query | <statement>    边界查询，用于创建分片（InputSplit）  |<br>|–columns &lt;col,col,col…&gt;  | 从表中导出指定的一组列的数据 |<br>| —delete-target-dir|    如果指定目录存在，则先删除掉|<br>|–direct    |使用直接导入模式（优化导入速度）|<br>|–direct-split-size <n>    |分割输入stream的字节大小（在直接导入模式下）|<br>|–fetch-size <n>    |从数据库中批量读取记录数|<br>|–inline-lob-limit <n>    |设置内联的LOB对象的大小|<br>|-m,–num-mappers <n>    |使用n个map任务并行导入数据|<br>|-e,–query <statement>    |导入的查询语句|<br>|–split-by <column-name>    |指定按照哪个列去分割数据，不同数据交给不同maptask执行|<br>|–table <table-name>    |导入的源表表名|<br>|–target-dir </table-name></column-name></statement></n></n></n></n></statement></p><dir>      | 导入HDFS的目标路径 |<br>| –warehouse-dir <dir> |  HDFS存放表的根路径|<br>|–where <where clause="">      |  指定导出时所使用的查询条件|<br>| -z,–compress     |启用压缩  |<br>| –compression-codec <c>      | 指定Hadoop的codec方式（默认gzip） |<br>| –null-string <null-string> | 如果指定列为字符串类型，使用指定字符串替换值为null的该类列的值 |<br>| –null-non-string <null-string>  |  如果指定列为非字符串类型，使用指定字符串替换值为null的该类列的值 |<br>这里的<code>--table</code>和 <code>--query</code>两者是可以替换的。在使用query时，可以不使用sql，改成–table的形式<br>使用query时，必须得在Sql语句后面加上/<code>$CONDITIONS </code><br><code>$CONDITIONS </code>的作用可以参考以下博客<br><a href="https://www.cnblogs.com/youngchaolin/p/12271211.html">https://www.cnblogs.com/youngchaolin/p/12271211.html</a></null-string></null-string></c></where></dir></dir><p></p><h2 id="sqoop查询mysql的数据库"><a href="#sqoop查询mysql的数据库" class="headerlink" title="sqoop查询mysql的数据库"></a>sqoop查询mysql的数据库</h2><pre class="line-numbers language-none"><code class="language-none">sqoop list-databases \--connect "jdbc:mysql://hadoop1:3306/" \--username root \--password 123456 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sqoop查看指定数据库的表"><a href="#sqoop查看指定数据库的表" class="headerlink" title="sqoop查看指定数据库的表"></a>sqoop查看指定数据库的表</h2><pre class="line-numbers language-none"><code class="language-none">sqoop list-tables \--connect "jdbc:mysql://hadoop1:3306/exercise" \--username root \--password 123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="把mysql表的表结构导入到hive中"><a href="#把mysql表的表结构导入到hive中" class="headerlink" title="把mysql表的表结构导入到hive中"></a>把mysql表的表结构导入到hive中</h2><pre class="line-numbers language-none"><code class="language-none">sqoop create-hive-table \--connect "jdbc:mysql://hadoop1:3306/exercise?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false" \--table traveling_track \--username root  \--password 123456 \--hive-table exercise.hive_traveling_track \--fields-terminated-by "\t" \--lines-terminated-by "\n";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="把mysl数据导入Hdfs中"><a href="#把mysl数据导入Hdfs中" class="headerlink" title="把mysl数据导入Hdfs中"></a>把mysl数据导入Hdfs中</h2><pre class="line-numbers language-none"><code class="language-none">sqoop import \--connect "jdbc:mysql://hadoop1:3306/exercise?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false" \--username root \--password 123456 \--query "select * from traveling_track where \$CONDITIONS" \--target-dir /user/hive_traveling_track \--split-by raw_add_time \--direct \--null-string '\\N' \--null-non-string '\\N'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述语句还可以指定mr的任务个数    -m </p><h2 id="把mysql的数据导入到hive中-覆盖数据"><a href="#把mysql的数据导入到hive中-覆盖数据" class="headerlink" title="把mysql的数据导入到hive中  覆盖数据"></a>把mysql的数据导入到hive中  覆盖数据</h2><pre class="line-numbers language-none"><code class="language-none">sqoop import \--connect "jdbc:mysql://hadoop1:3306/exercise?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false" \--username root \--password 123456 \--query "select * from traveling_track where id = 392855 and \$CONDITIONS" \--fields-terminated-by ',' \--target-dir \hive_traveling_track_temp_data \--num-mappers 1 \--hive-import \--hive-overwrite \--hive-database exercise \--hive-table hive_traveling_track<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="增量导入数据"><a href="#增量导入数据" class="headerlink" title="增量导入数据"></a>增量导入数据</h2><h3 id="append增量导入数据到Hdfs，然后hive中load加载数据"><a href="#append增量导入数据到Hdfs，然后hive中load加载数据" class="headerlink" title="append增量导入数据到Hdfs，然后hive中load加载数据"></a>append增量导入数据到Hdfs，然后hive中load加载数据</h3><pre class="line-numbers language-none"><code class="language-none">sqoop import \--connect "jdbc:mysql://hadoop1:3306/exercise?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false" \--username root \--password 123456 \--table traveling_track \--target-dir /user/temp_traveling_track \--split-by id \--m 6  \--incremental append \--check-column id \--last-value 392855<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>–check-column:用指定字段去检查是否符合增量导入的条件<br>–incremental:指定增量导入的模式,可选 <code>append</code>  |  <code>lastmodified</code><br>–last-value:跟–check配合使用,上次导入的最后一个值,元数据中所有大于last-value的值都会被导入</p><h3 id="lastmodified增量导入数据到Hdfs，然后hive中load加载数据"><a href="#lastmodified增量导入数据到Hdfs，然后hive中load加载数据" class="headerlink" title="lastmodified增量导入数据到Hdfs，然后hive中load加载数据"></a>lastmodified增量导入数据到Hdfs，然后hive中load加载数据</h3><pre class="line-numbers language-none"><code class="language-none">sqoop import \--connect "jdbc:mysql://hadoop1:3306/exercise?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false" \--username root \--password 123456 \--table traveling_track \--target-dir /user/temp_traveling_track \--split-by id \-m 4 \--incremental lastmodified \--merge-key id \--check-column raw_add_time \--last-value "2020-07-31 09:31:51";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>--check-column</code>: 必须是timestamp列  时间列（int）<br><code>--incremental lastmodified</code>: 设置为最后改动模式，基于时间列的增量导入（将时间列大于等于阈值的所有数据增量导入Hadoop）<br><code>--merge-key</code>: 合并列（主键，合并键值相同的记录）必须是唯一主键<br><code>--last-value</code>: 所有大于最后一个时间的数据都会被更新<br>这个我试了之后，我的结果比预想值多了一条，<br>表中作为阈值的数据产生了重复数据。<br>而且我的数据没有同一秒的，一秒多条数据，可如果能会因为merge-key的合并功能导致数据的缺失<br>这个暂不确定，以后再试试</p><h2 id="Sqoop的Append和Lastmodified的区别"><a href="#Sqoop的Append和Lastmodified的区别" class="headerlink" title="Sqoop的Append和Lastmodified的区别"></a>Sqoop的Append和Lastmodified的区别</h2><p>Lastmodified 和Append模式的区别：<br><code>Append</code>模式处理不了更新数据，而<code>Lastmodified</code>模式可以</p><p>​<br>​    </p>]]></content>
      
      
      <categories>
          
          <category> Sqoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
            <tag> Sqoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDH5.16.2 Spark安装后启动失败</title>
      <link href="/zwhblog.cn/2020/11/09/cdh/spark/cdh5.16-spark2-an-zhuang-cheng-gong-dan-qi-dong-shi-bai/"/>
      <url>/zwhblog.cn/2020/11/09/cdh/spark/cdh5.16-spark2-an-zhuang-cheng-gong-dan-qi-dong-shi-bai/</url>
      
        <content type="html"><![CDATA[<p>参考文章<a href="https://blog.csdn.net/nieji3057/article/details/79416531">https://blog.csdn.net/nieji3057/article/details/79416531</a><br>CDHspark升级成Spark2之后，在启动时spark后面都要加一个2，</p><pre class="line-numbers language-none"><code class="language-none">spark-shell   -&gt;  spark2-shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动Spark后会报一个错</p><pre class="line-numbers language-none"><code class="language-none">Permission denied: user=root, access=WRITE, inode="/user"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是权限不对，这里已经是root，应该是最高权限了，怎么不对<br>在CDH中，hdfs用户才是最高的权限，你的HDFS目录中的spark目录所属用户是hdfs，root没有权限访问也就导致了报错<br>需要把你的Hdfs路径的Spark权限改成spark用户的</p><pre class="line-numbers language-none"><code class="language-none">sudo -u hdfs hadoop fs -chown root /user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在命令行中重试</p><pre class="line-numbers language-none"><code class="language-none">spark2-shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201109090350137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>成了</p>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka2.2.0命令</title>
      <link href="/zwhblog.cn/2020/11/06/cdh/kafka/kafka2.2.cdh-ming-ling-xing-ming-ling/"/>
      <url>/zwhblog.cn/2020/11/06/cdh/kafka/kafka2.2.cdh-ming-ling-xing-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>Kafka安装完成启动后，测试连不起来，发现版本比以前高，他们的语法有点变化，zookeeper这个语法被淘汰掉了，因为新版本不存放offset在zk上了。使用–bootstrap-server来指定broker的位置</p><blockquote><p>查看所有topic</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-topics --list --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>生产者</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-console-producer --broker-list hadoop1:9092,hadoop2:9092,hadoop3:9092 --topic TP_LABEL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>消费者</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-console-consumer --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --topic TP_LABEL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>消费者-从头消费数据</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-console-consumer --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --from-beginning --topic TP_LABEL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>查看topic主题详细信息</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-topics  --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --topic TP_LABEL --describe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>查看消费者组</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-consumer-groups --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>查看指定消费者组详细信息(CONSUMER-ID HOST CLIENT-ID PARTITIONS ASSIGNMENT)</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-consumer-groups --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --group cloudera_mirrormaker --describe --members --verboseCONSUMER-ID                                                 HOST            CLIENT-ID              #PARTITIONS     ASSIGNMENTcloudera_mirrormaker-0-1d1a8103-3e9d-43c4-9a34-09f677fd049a /10.130.210.246 cloudera_mirrormaker-0 0               -cloudera_mirrormaker-0-a6168ff9-e579-4536-b92a-fc6aaf82b8c1 /10.130.210.245 cloudera_mirrormaker-0 0               -cloudera_mirrormaker-0-a110eabd-5191-49a0-acf4-dbdc7e9a602f /10.130.210.247 cloudera_mirrormaker-0 0               -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看指定消费者组详细信息(CONSUMER-ID HOST CLIENT-ID PARTITIONS)</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-consumer-groups --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --group cloudera_mirrormaker --describe --members//CONSUMER-ID                                                 HOST            CLIENT-ID              #PARTITIONS     //cloudera_mirrormaker-0-1d1a8103-3e9d-43c4-9a34-09f677fd049a /10.130.210.246 cloudera_mirrormaker-0 0               //cloudera_mirrormaker-0-a6168ff9-e579-4536-b92a-fc6aaf82b8c1 /10.130.210.245 cloudera_mirrormaker-0 0               //cloudera_mirrormaker-0-a110eabd-5191-49a0-acf4-dbdc7e9a602f /10.130.210.247 cloudera_mirrormaker-0 0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看指定消费者组详细信息(TOPIC PARTITION CURRENT-OFFSET LOG-END-OFFSET LAG CONSUMER-ID HOST CLIENT-ID)</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-consumer-groups --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --group cloudera_mirrormaker --describe//TOPIC               PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG             CONSUMER-ID                                     HOST            CLIENT-ID//xxx_trajectory 0          143693805       143693905       100             consumer-1-02f47385-5496-4094-9513-09c0b66b47bc /59.202.28.243  consumer-1//xxx_trajectory 1          137186261       137186348       87              consumer-1-02f47385-5496-4094-9513-09c0b66b47bc /59.202.28.243  consumer-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看指定消费者组详细信息(COORDINATOR(ID) ASSIGNMENT-STRATEGY STATE MEMBERS)</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-consumer-groups --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --group cloudera_mirrormaker --describe --state//COORDINATOR (ID)          ASSIGNMENT-STRATEGY       STATE                #MEMBERS//hadoop3:9092 (63)         range                     Stable               3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTP时间服务器配置</title>
      <link href="/zwhblog.cn/2020/11/03/ntp-shi-jian-fu-wu-qi-pei-zhi/"/>
      <url>/zwhblog.cn/2020/11/03/ntp-shi-jian-fu-wu-qi-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="NTP时间服务器配置"><a href="#NTP时间服务器配置" class="headerlink" title="NTP时间服务器配置"></a>NTP时间服务器配置</h1><p>最近服务器中时间和现实时间不对应，需要修改服务器时间，这时候需要安装时间同步的服务器。</p><p>ntp配置有两种:</p><p>第一种是自己定制一台服务器为主节点，其他节点进行同步.</p><p>第二种是连接别人已经配好的时间服务器进行时间同步。这里NTP配置使用的是第二种，连接的是<code>ntp.neu.edu.cn iburst</code> 东北大学的时间服务器。</p><h2 id="一、-东北大学NTP服务"><a href="#一、-东北大学NTP服务" class="headerlink" title="一、 东北大学NTP服务"></a>一、 东北大学NTP服务</h2><p>1、查看centos是否已经安装过ntp服务器</p><pre class="line-numbers language-none"><code class="language-none">rpm -qa|grep ntp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果安装过，可以先进行卸载在重新安装。</p><p>2、安装ntp服务</p><pre class="line-numbers language-none"><code class="language-none">yum -y install ntp ntpdate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、开放防火墙，打开端口</p><p>这次没有涉及到访问失败等错误，暂时没有涉及这一过程</p><p>这里再尝试访问 ntp.neu.edu.cn iburst 东北大学服务器，看是否能返回时间，确认可用性</p><p><img src="/zwhblog.cn/2020/11/03/ntp-shi-jian-fu-wu-qi-pei-zhi/image-20210118132401581-1611060385064.png" alt="尝试连接访问"></p><p>4、ntp配置文件配置</p><pre class="line-numbers language-none"><code class="language-none">vim /etc/ntp.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置文件内容：只用添加一行内容</p><pre class="line-numbers language-none"><code class="language-none">// 注释配置文件中原有的NTP服务器，并在其中添加自己所需的NTP服务器地址# Use public servers from the pool.ntp.org project.# Please consider joining the pool (http://www.pool.ntp.org/join.html).# server 0.centos.pool.ntp.org iburst# server 1.centos.pool.ntp.org iburst# server 2.centos.pool.ntp.org iburst# server 3.centos.pool.ntp.org iburstserver ntp.neu.edu.cn iburst<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、NTP配置为自启动并启动</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable ntpd.service//安装为服务systemctl start ntpd  //启动运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、查看客户端运行状态</p><pre class="line-numbers language-none"><code class="language-none">systemctl status ntpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、查看同步状态信息</p><pre class="line-numbers language-none"><code class="language-none">ntpstat[root@localhost jars]# ntpstatsynchronised to NTP server (202.118.1.46) at stratum 2   time correct to within 35 ms   polling server every 64 s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、自定义主节点配置NTP"><a href="#二、自定义主节点配置NTP" class="headerlink" title="二、自定义主节点配置NTP"></a>二、自定义主节点配置NTP</h2><p>需要多台节点才能够使用此方式,如果只有一台节点,你配置为主节点,他会以自身时间为基准和手动修改时间没有区别</p><p>三台服务器:10.130.210.245  10.130.210.246  10.130.210.247</p><p>这里选择了245为主节点</p><p>1、查看centos是否已经安装过ntp服务器</p><pre class="line-numbers language-none"><code class="language-none">rpm -qa|grep ntp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果安装过，可以先进行卸载在重新安装。</p><p>2、安装ntp服务</p><pre class="line-numbers language-none"><code class="language-none">yum -y install ntp ntpdate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、开放防火墙，打开端口</p><p>这次没有涉及到访问失败等错误，暂时没有涉及这一过程</p><p>4、ntp配置文件配置</p><p>这里主节点从节点配置是不一样的</p><pre class="line-numbers language-none"><code class="language-none">vim /etc/ntp.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主节点配置文件内容：</p><pre class="line-numbers language-none"><code class="language-none">restrict 10.130.210.245 nomodify notrap nopeer noquery //当前节点IP地址# 授权172.22.10.0网段上所有机器可以从这台机器上查询和时间同步restrict 10.130.210.0 mask 255.255.255.0 nomodify notrap //集群所在网段、掩码、权限# 新增本地ntp服务器172.22.10.6，注释掉原有的server 0-n// 注释配置文件中原有的NTP服务器# Use public servers from the pool.ntp.org project.# Please consider joining the pool (http://www.pool.ntp.org/join.html).# server 0.centos.pool.ntp.org iburst# server 1.centos.pool.ntp.org iburst# server 2.centos.pool.ntp.org iburst# server 3.centos.pool.ntp.org iburstserver 127.127.1.0#使用本地时间fudge 127.127.1.0 stratum 10#ntp stratum层#这两行代码设置时间服务器是自己<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">/etc/ntp.conf# 参数详解：#ignore  ：关闭所有的 NTP 联机服务#nomodify：客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。#notrust ：客户端除非通过认证，否则该客户端来源将被视为不信任子网#noquery ：不提供客户端的时间查询：用户端不能使用ntpq，ntpc等命令来查询ntp服务器#notrap ：不提供trap远端登陆：拒绝为匹配的主机提供模式 6 控制消息陷阱服务。          陷阱服务是 ntpdq 控制消息协议的子系统，用于远程事件日志记录程序。#nopeer ：用于阻止主机尝试与服务器对等，并允许欺诈性服务器控制时钟#kod ： 访问违规时发送 KoD 包。#restrict -6 表示IPV6地址的权限设置。          #stratum说明:# 正常情况下stratum值范围“0~15”# Stratum-2则从Stratum-1获取时间，Stratum-3从Stratum-2获取时间，以此类推，# 但Stratum层的总数限制在15以内。所有这些服务器在逻辑上形成阶梯式的架构相互连接，# 而Stratum-1的时间服务器是整个系统的基础<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端配置:</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">/etc/ntp.conf// 注释配置文件中原有的NTP服务器，并在其中添加自己刚刚定义的NTP服务器地址# Use public servers from the pool.ntp.org project.# Please consider joining the pool (http://www.pool.ntp.org/join.html).# server 0.centos.pool.ntp.org iburst# server 1.centos.pool.ntp.org iburst# server 2.centos.pool.ntp.org iburst# server 3.centos.pool.ntp.org iburstserver 10.130.210.245  fudge 10.130.210.245 stratum 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、NTP配置为自启动并启动</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable ntpd.service//安装为服务systemctl start ntpd  //启动运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、查看客户端运行状态</p><pre class="line-numbers language-none"><code class="language-none">systemctl status ntpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、查看同步状态信息</p><pre class="line-numbers language-none"><code class="language-none">ntpstat[root@localhost jars]# ntpstatsynchronised to NTP server (202.118.1.46) at stratum 2   time correct to within 35 ms   polling server every 64 s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、配置NTP（集群时间的定时同步）"><a href="#三、配置NTP（集群时间的定时同步）" class="headerlink" title="三、配置NTP（集群时间的定时同步）"></a>三、配置NTP（集群时间的定时同步）</h2><pre class="line-numbers language-none"><code class="language-none">rpm -qa |grep ntp//查看是否安装，查不出来要先安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>1.vim /etc/ntp.conf （修改配置文件）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">restrict default ignore<span class="token comment">&lt;!--解开注释，修改网段改成自己的--&gt;</span>restrict 192.168.10.0 mask 255.255.255.0 nomodify notrap<span class="token comment">&lt;!--注释掉---&gt;</span>不使用北京时间了#server 0.centos.pool.ntp.org iburst#server 1.centos.pool.ntp.org iburst#server 2.centos.pool.ntp.org iburst#server 3.centos.pool.ntp.org iburst<span class="token comment">&lt;!--去掉以下注释--&gt;</span>没有就添加上<span class="token comment">&lt;!--失去网络后，使用本地的时间配置--&gt;</span>server 127.127.1.0fudge 127.127.1.0 stratum 10<span class="token comment">&lt;!--这里的参数说明在第二个类型配置中有说明--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更改主节点的net.conf</p><p><img src="/zwhblog.cn/2020/11/03/ntp-shi-jian-fu-wu-qi-pei-zhi/1567673183759-1611060370035.png" alt="第一张图"></p><p><img src="/zwhblog.cn/2020/11/03/ntp-shi-jian-fu-wu-qi-pei-zhi/1567673197384-1611060399818.png" alt="第二张图"></p><p>2、vim /etc/sysconfig/ntpd</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">&lt;!--增加内容--&gt;SYNC_HWCLOCK=yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、service ntpd status</p><p>查看运行状态，进行重启ntp服务</p><p>4、service ntpd start</p><p>5、设置开机启动</p><pre class="line-numbers language-none"><code class="language-none">chkconfig ntpd on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、在其他节点上进行设置定时任务crontab -e</p><p>//代表了分 时 日 周 月  命令  主机名 </p><pre class="line-numbers language-none"><code class="language-none">*/10 * * * * /usr/sbin/ntpdate bw77<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、定时任务完成<img src="/zwhblog.cn/2020/11/03/ntp-shi-jian-fu-wu-qi-pei-zhi/1567673332501-1611060410677.png" alt="1567673332501">后可以crontab -l 来查看定时任务</p><pre class="line-numbers language-none"><code class="language-none">crontab -l查看任务<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Ntp常用命令"><a href="#Ntp常用命令" class="headerlink" title="Ntp常用命令"></a>Ntp常用命令</h2><pre class="line-numbers language-none"><code class="language-none">#查询已安装的ntp版本信息等rpm -qa | grep ntp      #启动,停止, 重启, 查询ntp服务状态service ntpd status     检查ntp是否启动 service ntpd start      启动NTP(开一台就好)  service ntpd stop       关闭ntpservice ntpd restart    重新启动ntpwhich ntpdate       ntpdate这个系统命令在哪里 which renoot  renoot这个命令在哪里 which(查看可执行文件的位置)chkconfig ntpd on       设置ntpd为开机启动 #查看ntp服务器与上层ntp的状态ntpq -p  # 命令查看时间同步状态ntpstat  #下面返回的数据则表示成功连接synchronised to NTP server (202.118.1.46) at stratum 2   time correct to within 35 ms   polling server every 64 s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NTP配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据部分知识总结</title>
      <link href="/zwhblog.cn/2020/11/03/da-shu-ju-zhi-shi-zong-jie/"/>
      <url>/zwhblog.cn/2020/11/03/da-shu-ju-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h1><p>HttpFs</p><p>NFS Gateway工具可以将HDFS上面的空间映射到linux本地磁盘上，然后再进行操作</p><p>只要在一个hdfs客户端上装上，启动NFS Gateway服务，并mount上这个NFS文件夹，其他主机即可访问（编辑文件有限制，读写没问题）。</p><p>在尝试启动 NFS Gateway 角色实例之前，请先启动该主机上的portmap或者rpcbind服务。</p><pre class="line-numbers language-none"><code class="language-none">yum install rpcbind -y//安装rpcbind<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><p>hive Metastore 服务器端口  9083</p><h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h2 id="zk仲裁机制"><a href="#zk仲裁机制" class="headerlink" title="zk仲裁机制"></a>zk仲裁机制</h2><p>zk服务器运行方式有两种</p><ul><li>独立模式(standlone)</li><li>仲裁模式</li></ul><p>zk的状态无法进行覆盖，生产环境中会有一定危险</p><p>仲裁模式集群中，具备高可用的覆写功能。如果zk信息全部同步完成后，在进行下一条数据的同步，延时会比较突出</p><p>为了规避这个问题，zk使用了法定人数的思想。在zk信息同步时，保证若干个指定的节点同步完成，就继续下一次操作，而不是等全部的节点都同步完成。</p><p>法定人数至少是3，为了正常工作，集群中至少有3台服务器是正常运行的。</p><h1 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h1><h2 id="SparkStreaming"><a href="#SparkStreaming" class="headerlink" title="SparkStreaming"></a>SparkStreaming</h2><h2 id="RDD五大特性"><a href="#RDD五大特性" class="headerlink" title="RDD五大特性"></a>RDD五大特性</h2><p>A list of partitions<br>a function for computing each split<br>a list of dependencies on other RDDs<br>Optionally,a partitioner for key-value RDDs<br>Optionally,a list of preferred locations to compute each splip</p><h3 id="SparkStreaming背压机制"><a href="#SparkStreaming背压机制" class="headerlink" title="SparkStreaming背压机制"></a>SparkStreaming背压机制</h3><p>当Spark消费数据时，batch processing time&gt;batch interval时，也就是批次数据的处理时间比批次数据产生的时间长的时候，越来越多的数据被接收，但是数据的处理速度没有跟上，导致数据开始积压，可能进一步导致OOM异常</p><p>Spark1.5之前，使用Receiver-based数据接收器，可以通过配置<code>spark。streaming.receiver.maxRate</code>参数来限制每个receiver每秒最大可以接受的记录的数据。对于 Direct Approach 的数据接收，我们可以通过配置<code>spark.streaming.kafka.maxRatePerPartition</code> 参数来限制每次作业中每个 Kafka 分区最多读取的记录条数。</p><p>这种方法虽然可以通过限制接收速率，来适配当前的处理能力，但这种方式存在以下几个问题：</p><ul><li>我们需要事先估计好集群的处理速度以及消息数据的产生速度；</li><li>这两种方式需要人工参与，修改完相关参数之后，我们需要手动重启 Spark Streaming 应用程序；</li><li>如果当前集群的处理能力高于我们配置的 maxRate，而且 producer 产生的数据高于 maxRate，这会导致集群资源利用率低下，而且也会导致数据不能够及时处理。</li></ul><p><strong>反压机制</strong></p><p>Spark 1.5 引入了反压（Back Pressure）机制，其通过动态收集系统的一些数据来自动地适配集群数据处理能力。</p><h2 id="Spark-shuffle优化设置"><a href="#Spark-shuffle优化设置" class="headerlink" title="Spark shuffle优化设置"></a>Spark shuffle优化设置</h2><pre class="line-numbers language-none"><code class="language-none">set hive.exec.dynamic.partition=true;  set hive.exec.dynamic.partition.mode=nonstrict;set spark.speculation=true;set spark.sql.shuffle.partitions=1000;set spark.sql.adaptive.enabled=true;set spark.sql.adaptive.shuffle.targetPostShuffleInputSize=128000000;set spark.sql.adaptiveBroadcastJoinThreshold=10485760; set spark.sql.adaptive.allowAdditionalShuffle=true;set spark.sql.adaptive.join.enabled=true;set spark.sql.adaptive.skewedJoin.enabled=true;set spark.sql.adaptive.minNumPostShufflePartitions=1;set spark.sql.adaptive.maxNumPostShufflePartitions=1000;set spark.sql.planner.skewJoin=true;set spark.sql.planner.skewJoin.threshold=100000;set spark.sql.cbo.enabled=true;set spark.sql.cbo.joinReorder.card.weight=0.8;set spark.executor.extraJavaOptions=-XX:ParallelGCThreads=4 -XX:+UseParallelGC;set spark.sql.autoBroadcastJoinThreshold=10485760;set spark.sql.broadcastTimeout=600s;set spark.sql.bigdata.useExecutorBroadcast=true;set spark.hadoopRDD.ignoreEmptySplits=true;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><h2 id="kafka数据同步-镜像工具-kafka-mirror-maker"><a href="#kafka数据同步-镜像工具-kafka-mirror-maker" class="headerlink" title="kafka数据同步/镜像工具 kafka mirror maker"></a>kafka数据同步/镜像工具 kafka mirror maker</h2><p>MirrorMaker为kafka的镜像工具，如果没有这个需求就可以不启动这个服务。</p><p>可以使用kafkamaker来进行kafka之间的数据迁移/发送</p><h2 id="Kafka为什么快"><a href="#Kafka为什么快" class="headerlink" title="Kafka为什么快"></a>Kafka为什么快</h2><h3 id="磁盘读写"><a href="#磁盘读写" class="headerlink" title="磁盘读写"></a>磁盘读写</h3><p><a href="https://mp.weixin.qq.com/s/b5d1zNec-RcFwgEtNxNRUg">原文地址</a></p><p><img src="/zwhblog.cn/2020/11/03/da-shu-ju-zhi-shi-zong-jie/ddd70f0e1e858cc507a23112e6d05010.png" alt="磁盘原理"></p><p>磁盘读写过程</p><ol><li>先进行寻址（找到对应的柱面，磁头要瞄准相应的磁道）</li><li>旋转（等待扇区从磁头地下旋转经过）</li><li>数据传输（从内存和磁盘中进行实际传输）</li></ol><p>kafka读取数据是采用的是顺序读写的方式，省去了磁盘寻址的时间，比随机读写要快约1000倍</p><h3 id="页缓存pagecache-buffcache"><a href="#页缓存pagecache-buffcache" class="headerlink" title="页缓存pagecache+buffcache"></a>页缓存pagecache+buffcache</h3><p><code>pagecache</code>（以page为单位，进行缓存文件内容）</p><p>缓存在pagecache中的文件数据能够更快的被用户读取</p><p>同时，带有buffer的写入操作，数据写入到page cache中就立即返回，不需要等待持久化到磁盘中，提高了上层应用读写文件的整体性能。cached这列的数值表示的是当前的页缓存（page cache）的占用量，page cache文件的页数据，页是逻辑上的概念，因此page cache是与文件系统同级的</p><p><strong>好处是</strong>：避免了brock的内存开销，避免了GC问题，应用程序重启数据不会丢失。操作系统层面的缓存利用率会更高，服务重启不会消失，避免了缓存重建的过程</p><p><code>buffer cache</code>：磁盘等设备缓冲</p><p>buffers列 表示当前的块缓存（buffer cache）占用量，buffer cache用于缓存块设备（如磁盘）的块数据。块是物理上的概念，因此buffer cache是与块设备驱动程序同级的。</p><h3 id="mmap（内存文件映射）"><a href="#mmap（内存文件映射）" class="headerlink" title="mmap（内存文件映射）"></a>mmap（内存文件映射）</h3><p>把物理磁盘文件和page cache进行映射，可以向读写硬盘一样读写内存</p><h3 id="零拷贝（zero-copy）"><a href="#零拷贝（zero-copy）" class="headerlink" title="零拷贝（zero-copy）"></a>零拷贝（zero-copy）</h3><p> 操作系统非零拷贝过程：</p><ol><li>从磁盘copy到page cache</li><li>从page cache copy到用户缓存区中</li><li>从用户缓存区中copy到socket缓存中</li><li>socket缓存中copy到网卡接口中</li></ol><p>零拷贝的过程：</p><ol><li>磁盘文件copy到page cache中</li><li>从page cachecopy到网卡接口中</li></ol><h3 id="存储设计"><a href="#存储设计" class="headerlink" title="存储设计"></a>存储设计</h3><p>topic分为了多个partition</p><p>partition存储时分成了多个sgement</p><p>sgement中存储了.index和.log文件</p><p>sgement只允许追加的形式</p><p>offset支持连续的预读和批量写</p><h3 id="批量发送"><a href="#批量发送" class="headerlink" title="批量发送"></a>批量发送</h3><p>为了减少网络io的开销，kafka支持batch.size和linger.ms</p><p><code>batch.szie</code>:消息条数达到个数就立刻发送</p><p><code>linger.ms</code>:消息不够，但是超过一定时间就发送</p><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>节省网络io</p><p>如果每个消息都压缩，但是压缩率相对很低，所以Kafka使用了批量压缩，即将多个消息一起压缩而不是单个消息压缩</p><p>Kafka允许使用递归的消息集合，批量的消息可以通过压缩的形式传输并且在日志中也可以保持压缩格式，直到被消费者解压缩</p><p>Kafka支持多种压缩协议，包括Gzip和Snappy压缩协议</p><h3 id="消息写入过程"><a href="#消息写入过程" class="headerlink" title="消息写入过程"></a>消息写入过程</h3><p><img src="/zwhblog.cn/2020/11/03/da-shu-ju-zhi-shi-zong-jie/640" alt="img"></p><p>producer需要从用户空间到网卡(zero-copy)</p><p>生产者发送批量压缩的数据到broker，broker通过MappedByteBuffer的map()函数映射其地址到你的虚拟内存地址。</p><p>接着就可以对这个MappedByteBuffer执行写入操作了，写入的时候他会直接进入PageCache中，然后过一段时间之后，由os的线程异步刷入磁盘中，可以看上面的示意图。</p><p>上图中似乎只有一次数据拷贝的过程，他就是从PageCache里拷贝到磁盘文件里而已！这个就是你使用mmap技术之后，相比于传统磁盘IO的一个性能优化</p><h3 id="消息读的过程"><a href="#消息读的过程" class="headerlink" title="消息读的过程"></a>消息读的过程</h3><p>读取数据会先判断消息是否在page cache存在，存在就可以直接从page cache消费数据，所以消费实时数据会很快。</p><p>但是消费历史数据，就得将之前的历史数据和邻近的数据块，加载到page cache中。</p><p>这里加载邻近的数据就是一个预读的过程，是一个优化的过程</p>]]></content>
      
      
      <categories>
          
          <category> 复习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive/Spark小文件的处理</title>
      <link href="/zwhblog.cn/2020/11/03/xiao-wen-jian-chu-li/"/>
      <url>/zwhblog.cn/2020/11/03/xiao-wen-jian-chu-li/</url>
      
        <content type="html"><![CDATA[<p>解决hive/Spark的大量小文件问题</p><p>原文链接：<a href="https://mp.weixin.qq.com/s/m4NPnZaKJMXKrTwtZoOQeQ">https://mp.weixin.qq.com/s/m4NPnZaKJMXKrTwtZoOQeQ</a></p><h3 id="1、hive解决小文件问题"><a href="#1、hive解决小文件问题" class="headerlink" title="1、hive解决小文件问题"></a>1、hive解决小文件问题</h3><p>小文件问题存在程序执行之前<br>程序可能会需要读取多个数据源的数据，或者动态分区中生成了大量的小文件，再或者上一个mr执行完成的结果文件，<br>这些数据以分大量的小文件形式分布在磁盘中，如果按照默认的形式去执行，那么这些小文件将会每个都产生一个mr任务，而mr任务的启动和销毁都会消耗大量的资源，导致集群运行缓慢，或者直接导致集群崩溃<br>而且mr的执行比mr的初始化时间和销毁时间短</p><p>解决问题的思路：<br>1、少用动态分区，<br>在使用动态分区的时候，使用distribute by 来进行数据的划分（将map端的数据按照指定字段来进行划分到不同的reduce来进行处理）</p><p>2、上面的方式运行完毕后，发现每个动态分区的目录中都只有一个文件，这是因为没有指定每个文件的大小和reduce的个数，在hive-site.xml配置文件中配置他们的文件数量</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">-- 在 map only 的任务结束时合并小文件set hive.merge.mapfiles = true;-- 在 MapReduce 的任务结束时合并小文件set hive.merge.mapredfiles = true;-- 作业结束时合并文件的大小 set hive.merge.size.per.task = 256000000;-- 每个Map最大输入大小(这个值决定了合并后文件的数量) set mapred.max.split.size=256000000;   -- 每个reducer的大小， 默认是1G，输入文件如果是10G，那么就会起10个reducer；set hive.exec.reducers.bytes.per.reducer=1073741824;set hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、Spark的优化小文件"><a href="#2、Spark的优化小文件" class="headerlink" title="2、Spark的优化小文件"></a>2、Spark的优化小文件</h3><p>sparksql并行度默认是200，在使用了group by join等产生shuffle算子后会产生大量的小文件，可以使用repartition/coalesce算子来进行优化</p><p>coalesce算子在不产生shuffle的情况下进行数据分区的合并，但是内存不足会oom</p><p>常用情况：</p><p>一般有使用到Spark进行完业务处理后，为了避免小文件问题，对RDD/DataFrame进行分区的缩减，避免写入HDFS有大量的小文件问题，从而给HDFS的NameNode内存造成大的压力，而调用coalesce，实则源码调用的是case class Repartition shuffle参数为false的，默认是不走shuffle的。</p><ol><li>假设当前spark作业的提交参数是num-executor 10 ，executor-core 2，那么就会有20个Task同时并行，如果对最后结果DataFrame进行coalesce操作缩减为(10)，最后也就只会生成10个文件，也表示只会运行10个task，就会有大量executor空跑，cpu core空转的情况；</li><li>而且coalesce的分区缩减是全在内存里进行处理，如果当前处理的数据量过大，这样很容易就导致程序OOM异常</li><li> 如果 coalesce 前的分区数小于 后预想得到的分区数，coalesce就不会起作用，也不会进行shuffle，因为父RDD和子RDD是窄依赖</li></ol><p>Repartition Hint可以增加或减少分区数量，它执行数据的完全shuffle，并确保数据平均分配。</p><p>常用情况：</p><p>上游数据分区数据分布不均匀，才会对RDD/DataFrame等数据集进行重分区，将数据重新分配均匀</p><p>假设原来有N个分区，现在repartition(M)的参数传为M，</p><p>​    而 N &lt; M ，则会根据HashPartitioner （key的hashCode % M）进行数据的重新划分</p><p>​    而 N  远大于 M ，那么还是建议走repartition，这样所有的executor都会运作起来，效率更高，如果还是走coalesce，假定参数是1，那么即使原本申请了10个executor，那么最后执行的也只会有1个executor。</p><h3 id="3、Hadoop-HAR归档"><a href="#3、Hadoop-HAR归档" class="headerlink" title="3、Hadoop HAR归档"></a>3、Hadoop HAR归档</h3><p>Hadoop Archive是一种特殊的归档格式，Hadoop Archive映射到文件系统目录，一个HAR以扩展名.har结尾，一个HAR目录包含元数据（以_index和_masterindex的形式）和data（part- *）文件。 _index文件包含文件名称，这些文件时归档的一部分，并且包含这些文件在归档中的位置。</p><p>对于已经产生小文件的hive表可以使用har归档，而且Hive提供了原生支持：</p><pre class="line-numbers language-none"><code class="language-none">set  hive.archive.enabled=  true ;set  hive.archive.har.parentdir.settable=  true ;set  har.partfile.size=256000000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在配置项设置完之后，就可以使用以下命令进行归档。</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE table_name ARCHIVE PARTITION (partition_col = partition_col_value, partition_col = partiton_col_value, ...)ALTER TABLE srcpart ARCHIVE PARTITION(ds='2008-04-08', hr='12')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以对已归档的分区恢复为原文件。</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE srcpart UNARCHIVE PARTITION(ds='2008-04-08', hr='12')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 小文件优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小文件优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的使用</title>
      <link href="/zwhblog.cn/2020/11/03/git/git-de-shi-yong/"/>
      <url>/zwhblog.cn/2020/11/03/git/git-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="Git的使用"><a href="#Git的使用" class="headerlink" title="Git的使用"></a>Git的使用</h2><p>1、下载安装过程，此处省略，安装过程中，可以选择是否可以通过第三方软件控制</p><p>2、注册git的账号，github,gitlab都可以，</p><h4 id="3、打开git的命令行窗口-设置账号"><a href="#3、打开git的命令行窗口-设置账号" class="headerlink" title="3、打开git的命令行窗口,设置账号"></a>3、打开git的命令行窗口,设置账号</h4><pre class="line-numbers language-none"><code class="language-none">//在这里设置自己的账号和邮箱git config --global user.name "zhanghao"   git config --global user.email "e-mail"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4、在指定位置初始化你的本地仓库"><a href="#4、在指定位置初始化你的本地仓库" class="headerlink" title="4、在指定位置初始化你的本地仓库"></a>4、在指定位置初始化你的本地仓库</h4><pre class="line-numbers language-none"><code class="language-none">git init//该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5、查看文件状态"><a href="#5、查看文件状态" class="headerlink" title="5、查看文件状态"></a>5、查看文件状态</h4><pre class="line-numbers language-none"><code class="language-none">//本地仓库目录下使用命令git status //如果没有提交到本地仓库上，那么就是红色的//提交了就是绿色的git status是用来查看当前工作状态，假如有文件为红色，说明文件修改了，此时在工作区。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6、添加数据到本地仓库"><a href="#6、添加数据到本地仓库" class="headerlink" title="6、添加数据到本地仓库"></a>6、添加数据到本地仓库</h4><pre class="line-numbers language-none"><code class="language-none">git add 文件名称//将指定文件添加到本地仓库，之后就是绿色的了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="7、git-提交"><a href="#7、git-提交" class="headerlink" title="7、git 提交"></a>7、git 提交</h4><pre class="line-numbers language-none"><code class="language-none">git commit -m "这里面就是message"提交时，会将本地仓库提交上去，需要指定 commit message 数据git <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="8、git-创建分支并切换到新建分支"><a href="#8、git-创建分支并切换到新建分支" class="headerlink" title="8、git 创建分支并切换到新建分支"></a>8、git 创建分支并切换到新建分支</h4><pre class="line-numbers language-none"><code class="language-none">git checkout -b dev//git checkout 命令加上 -b 参数表示创建并切换，相当于以下两条命令：$ git branch dev //创建分支$ git checkout dev  //切换到指定分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9、查看所有分支列表"><a href="#9、查看所有分支列表" class="headerlink" title="9、查看所有分支列表"></a>9、查看所有分支列表</h4><pre class="line-numbers language-none"><code class="language-none">git branch <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/zwhblog.cn/2020/11/03/git/git-de-shi-yong/TyporaImage\image-20210112140653747.png" alt="image-20210112140653747"></p><h4 id="10、合并分支"><a href="#10、合并分支" class="headerlink" title="10、合并分支"></a>10、合并分支</h4><pre class="line-numbers language-none"><code class="language-none">git merge dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="11、删除分支"><a href="#11、删除分支" class="headerlink" title="11、删除分支"></a>11、删除分支</h4><pre class="line-numbers language-none"><code class="language-none">$ git branch -d dev//删除dev这个分支克隆远程仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">git clone &lt;url&gt; $ git clone //Git 克隆的是该 Git 仓库服务器上的几乎所有数据，而不是仅仅复制完成你的工作所需要文件。 当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来//克隆的仓库名称取别名git clone &lt;url&gt;  myurlname$ git clone https://github.com/libgit2/libgit2 mylibgit//这样克隆下来的仓库名称就变成了mylibgit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12、忽略文件"><a href="#12、忽略文件" class="headerlink" title="12、忽略文件"></a>12、忽略文件</h4><pre class="line-numbers language-none"><code class="language-none">在你的项目总创建一个  .gitignore 的文件，列出要忽略的文件的模式。cat .gitignore 案例：.[oa]//第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件*~//第二行告诉 Git 忽略所有名字以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。# 忽略所有的 .a 文件*.a# 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件!lib.a# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO/TODO# 忽略任何目录下名为 build 的文件夹build/# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txtdoc/*.txt# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件doc/**/*.pdf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">文件 .gitignore 的格式规范如下：所有空行或者以 # 开头的行都会被 Git 忽略。可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。匹配模式可以以（/）开头防止递归。匹配模式可以以（/）结尾指定目录。要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>13、查看已暂存和未暂存的修改</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud</title>
      <link href="/zwhblog.cn/2020/11/03/spring/spring-cloud/"/>
      <url>/zwhblog.cn/2020/11/03/spring/spring-cloud/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><p>官方文档：<a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></p><h2 id="什么是Spring-Cloud？"><a href="#什么是Spring-Cloud？" class="headerlink" title="什么是Spring Cloud？"></a>什么是Spring Cloud？</h2><p>Spring Cloud为开发人员提供了工具，以快速构建分布式系统中的某些常见模式（例如，配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁，领导选举，分布式会话，群集状态）。分布式系统的协调导致样板式样，并且使用Spring Cloud开发人员可以快速站起来实现这些样板的服务和应用程序。它们可以在任何分布式环境中正常工作，包括开发人员自己的笔记本电脑，裸机数据中心以及Cloud Foundry等托管平台。</p><h2 id="项目服务组件"><a href="#项目服务组件" class="headerlink" title="项目服务组件"></a>项目服务组件</h2><p>Spring Cloud专注于为典型的用例和可扩展性机制（包括其他用例）提供良好的开箱即用体验。</p><ul><li>分布式/版本化配置</li><li>服务注册和发现</li><li>路由</li><li>服务到服务的呼叫</li><li>负载均衡</li><li>断路器</li><li>全局锁</li><li>领导选举和集群状态</li><li>分布式消息传递</li></ul><h2 id="Spring-Cloud-的版本"><a href="#Spring-Cloud-的版本" class="headerlink" title="Spring Cloud 的版本"></a>Spring Cloud 的版本</h2><p>Spring Cloud 的版本号并不是我们通常见的数字版本号，而是一些很奇怪的单词。这些单词均为英国伦敦地铁站的站名。同时根据字母表的顺序来对应版本时间顺序，比如：最早 的 Release 版本 Angel，第二个 Release 版本 Brixton（英国地名），然后是 Camden、 Dalston、Edgware、Finchley、Greenwich、Hoxton。</p><p>SpringCloud和SpringBoot的对应版本在官方文档有</p><h2 id="Spring-Cloud-的服务发现框架"><a href="#Spring-Cloud-的服务发现框架" class="headerlink" title="Spring Cloud 的服务发现框架"></a>Spring Cloud 的服务发现框架</h2><p><strong>服务发现</strong>：其实就是一个“中介”，整个过程中有三个角色：**服务提供者(出租房子的)、服务消费者(租客)、服务中介(房屋中介)**。</p><p><strong>服务提供者</strong>： 就是提供一些自己能够执行的一些服务给外界。</p><p><strong>服务消费者</strong>： 就是需要使用一些服务的“用户”。</p><p><strong>服务中介</strong>： 其实就是服务提供者和服务消费者之间的“桥梁”，服务提供者可以把自己注册到服务中介那里，而服务消费者如需要消费一些服务(使用一些功能)就可以在服务中介中寻找注册在服务中介的服务提供者。</p><h3 id="1、服务注册中心"><a href="#1、服务注册中心" class="headerlink" title="1、服务注册中心"></a>1、服务注册中心</h3><h4 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h4><p>Eureka已经停止了更新，可以替换成zookeeper、Consul</p><h4 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h4><p>可以在技术不发生大改变的情况下替换掉Eureka</p><h4 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h4><p>不建议使用</p><h4 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h4><p>阿里巴巴旗下的产品</p><h3 id="2、服务负载和调用"><a href="#2、服务负载和调用" class="headerlink" title="2、服务负载和调用"></a>2、服务负载和调用</h3><h4 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h4><p>Ribbon官方进入了维护状态，已经停止了更新</p><h4 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h4><p>LoadBalancer是未来替换Ribbon的组件，官方已经声明了，但是还没出来。</p><h3 id="3、服务调用2"><a href="#3、服务调用2" class="headerlink" title="3、服务调用2"></a>3、服务调用2</h3><h4 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h4><p>官方已经不更新了，而且技术上已经不在使用。</p><h4 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h4><p>openFeign是Spring自己的组件，替换掉了OpenFeign</p><h3 id="4、服务降级"><a href="#4、服务降级" class="headerlink" title="4、服务降级"></a>4、服务降级</h3><h4 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h4><p>Spring Cloud自带的服务降级和熔断框架，国内大规模使用，但是官网不建议使用，未来会被取代，不建议使用</p><h4 id="resilience4j"><a href="#resilience4j" class="headerlink" title="resilience4j"></a>resilience4j</h4><p>国外实用的多，国内用的很少</p><h4 id="Alibaba-Sentinel"><a href="#Alibaba-Sentinel" class="headerlink" title="Alibaba Sentinel"></a>Alibaba Sentinel</h4><p>阿里旗下的实现熔断和限流的组件，建议使用</p><h3 id="5、服务网关"><a href="#5、服务网关" class="headerlink" title="5、服务网关"></a>5、服务网关</h3><h4 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h4><p>这个组件已经不再使用</p><h4 id="gateway"><a href="#gateway" class="headerlink" title="gateway"></a>gateway</h4><p>Spring Cloud 推荐的网关服务组件，建议使用</p><h3 id="6、服务配置"><a href="#6、服务配置" class="headerlink" title="6、服务配置"></a>6、服务配置</h3><h4 id="Config"><a href="#Config" class="headerlink" title="Config"></a><a href="https://spring.io/projects/spring-cloud-config">Config</a></h4><p>之前使用的是Config，现在不建议使用了</p><p>Spring Cloud Config为分布式系统中的外部化配置提供服务器和客户端支持。使用Config Server，您可以集中管理所有环境中应用程序的外部属性。客户端和服务器上的概念与SpringEnvironment和PropertySource抽象，因此它们非常适合Spring应用程序，但可以与以任何语言运行的任何应用程序一起使用。当应用程序从开发人员迁移到测试人员并进入生产过程时，您可以管理这些环境之间的配置，并确保应用程序具有迁移时所需的一切。服务器存储后端的默认实现使用git，因此它轻松支持配置环境的标记版本，并且可以通过各种工具来访问这些内容来管理内容。添加替代实现并将其插入Spring配置很容易。</p><h4 id="apollo"><a href="#apollo" class="headerlink" title="apollo"></a>apollo</h4><p>不推荐使用，使用的很少</p><h4 id="Nacos-1"><a href="#Nacos-1" class="headerlink" title="Nacos"></a>Nacos</h4><p>阿里旗下的服务配置组件，后来居上，建议使用</p><h3 id="7、服务总线"><a href="#7、服务总线" class="headerlink" title="7、服务总线"></a>7、服务总线</h3><h4 id="Bus"><a href="#Bus" class="headerlink" title="Bus"></a><a href="https://spring.io/projects/spring-cloud-bus">Bus</a></h4><p>Spring Cloud原生的组件，可以使用</p><h4 id="Nacos-2"><a href="#Nacos-2" class="headerlink" title="Nacos"></a>Nacos</h4><p>阿里巴巴旗下的，建议使用</p><h3 id="Spring-Cloud-Netflix"><a href="#Spring-Cloud-Netflix" class="headerlink" title="Spring Cloud Netflix"></a><a href="https://spring.io/projects/spring-cloud-netflix">Spring Cloud Netflix</a></h3><p>与各种Netflix OSS组件（Eureka，Hystrix，Zuul，Archaius等）集成。</p><h3 id="Spring-Cloud-Bus"><a href="#Spring-Cloud-Bus" class="headerlink" title="Spring Cloud Bus"></a><a href="https://spring.io/projects/spring-cloud-bus">Spring Cloud Bus</a></h3>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拉链表的示例</title>
      <link href="/zwhblog.cn/2020/11/03/shu-ju-cang-ku/la-lian-biao/"/>
      <url>/zwhblog.cn/2020/11/03/shu-ju-cang-ku/la-lian-biao/</url>
      
        <content type="html"><![CDATA[<p><strong><em>*</em>*2020-04-06 mysql对应的user_info表*\</strong>***</p><table><thead><tr><th>用户id</th><th>姓名</th><th>年龄</th><th>手机号</th><th>创建时间</th><th>修改时间</th></tr></thead><tbody><tr><td>0001</td><td>张三</td><td>20</td><td>111111</td><td>2020-04-06</td><td>2020-04-06</td></tr><tr><td>0002</td><td>小红</td><td>21</td><td>222222</td><td>2020-04-06</td><td>2020-04-06</td></tr></tbody></table><p><strong><em>*</em>*2020-04-07 mysql对应的user_info表*\</strong>***</p><table><thead><tr><th>用户id</th><th>姓名</th><th>年龄</th><th>手机号</th><th>创建时间</th><th>修改时间</th></tr></thead><tbody><tr><td>0001</td><td>张三</td><td>20</td><td>111222</td><td>2020-04-06</td><td>2020-04-07</td></tr><tr><td>0002</td><td>小红</td><td>21</td><td>222222</td><td>2020-04-06</td><td>2020-04-06</td></tr><tr><td>0003</td><td>李四</td><td>22</td><td>333333</td><td>2020-04-07</td><td>2020-04-07</td></tr><tr><td>0004</td><td>王五</td><td>44</td><td>444444</td><td>2020-04-07</td><td>2020-04-07</td></tr></tbody></table><p><strong><em>*</em>*2020-04-08 mysql对应的user_info表*\</strong>***</p><table><thead><tr><th>用户id</th><th>姓名</th><th>年龄</th><th>手机号</th><th>创建时间</th><th>修改时间</th></tr></thead><tbody><tr><td>0001</td><td>张三</td><td>20</td><td>111233</td><td>2020-04-06</td><td>2020-04-08</td></tr><tr><td>0002</td><td>小红</td><td>21</td><td>222221</td><td>2020-04-06</td><td>2020-04-08</td></tr><tr><td>0003</td><td>李四</td><td>22</td><td>333333</td><td>2020-04-07</td><td>2020-04-07</td></tr><tr><td>0004</td><td>王五</td><td>44</td><td>444445</td><td>2020-04-07</td><td>2020-04-08</td></tr><tr><td>005</td><td>德玛</td><td>55</td><td>555555</td><td>2020-04-08</td><td>2020-04-08</td></tr></tbody></table><p>抽取到ods之后，现在要保留用户的历史数据和新增数据，负责后期我要查看这个用户历史使用的手机号没法查看</p><p>所以我们要变成这样的结构：</p><table><thead><tr><th>用户id</th><th>姓名</th><th>年龄</th><th>手机号</th><th>创建时间</th><th>修改时间</th><th>start_time</th><th>end_time</th><th>date_id</th></tr></thead><tbody><tr><td>0001</td><td>张三</td><td>20</td><td>111111</td><td>2020-04-06</td><td>2020-04-06</td><td>2020-04-06</td><td>2020-04-06</td><td>2020-04-08</td></tr><tr><td>0001</td><td>张三</td><td>20</td><td>111222</td><td>2020-04-06</td><td>2020-04-07</td><td>2020-04-07</td><td>2020-04-07</td><td>2020-04-08</td></tr><tr><td>0001</td><td>张三</td><td>20</td><td>111233</td><td>2020-04-06</td><td>2020-04-08</td><td>2020-04-08</td><td>9999-12-31</td><td>2020-04-08</td></tr><tr><td>0002</td><td>小红</td><td>21</td><td>222222</td><td>2020-04-06</td><td>2020-04-06</td><td>2020-04-06</td><td>2020-04-07</td><td>2020-04-08</td></tr><tr><td>0002</td><td>小红</td><td>21</td><td>222221</td><td>2020-04-06</td><td>2020-04-08</td><td>2020-04-08</td><td>9999-12-31</td><td>2020-04-08</td></tr><tr><td>0003</td><td>李四</td><td>22</td><td>333333</td><td>2020-04-07</td><td>2020-04-07</td><td>2020-04-07</td><td>9999-12-31</td><td>2020-04-08</td></tr><tr><td>0004</td><td>王五</td><td>44</td><td>444444</td><td>2020-04-07</td><td>2020-04-07</td><td>2020-04-07</td><td>2020-04-07</td><td>2020-04-08</td></tr><tr><td>0004</td><td>王五</td><td>44</td><td>444445</td><td>2020-04-07</td><td>2020-04-08</td><td>2020-04-08</td><td>9999-12-31</td><td>2020-04-08</td></tr><tr><td>005</td><td>德玛</td><td>55</td><td>555555</td><td>2020-04-08</td><td>2020-04-08</td><td>2020-04-08</td><td>9999-12-31</td><td>2020-04-08</td></tr></tbody></table><p>保留历史可以选择的方式：</p><p>1、可以选择全量</p><p>但是每次都全量，肯定行不通，极大的浪费空间和造成数据的重复性</p><p>2、增量</p><p>可以获取到增量数据，但是改变的数据，你没有办法获取到</p><p>3、拉链</p><p>这里使用拉链表，是最适合解决这个问题的</p><p>要保留每个用户的历史手机号和修改时间</p><ol><li>创建一个拉链表</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> wedw_dwd<span class="token punctuation">.</span>test_user_info_dz <span class="token keyword">drop</span> <span class="token keyword">if</span> <span class="token keyword">EXISTS</span> <span class="token keyword">PARTITION</span><span class="token punctuation">(</span>date_id<span class="token operator">=</span><span class="token string">'2020-04-07'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>插入数据</li></ol><p>a表是建的拉链表，b表是ods层的数据表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> wedw_dwd<span class="token punctuation">.</span>test_user_info_dz <span class="token keyword">PARTITION</span><span class="token punctuation">(</span>date_id<span class="token operator">=</span><span class="token string">'2020-04-07'</span><span class="token punctuation">)</span><span class="token keyword">select</span>      a<span class="token punctuation">.</span>user_id    <span class="token punctuation">,</span>a<span class="token punctuation">.</span>user_name    <span class="token punctuation">,</span>a<span class="token punctuation">.</span>user_age    <span class="token punctuation">,</span>a<span class="token punctuation">.</span>user_cellphone    <span class="token punctuation">,</span>a<span class="token punctuation">.</span>create_time    <span class="token punctuation">,</span>a<span class="token punctuation">.</span>update_time    <span class="token punctuation">,</span>a<span class="token punctuation">.</span>start_time    <span class="token punctuation">,</span>a<span class="token punctuation">.</span>end_time<span class="token keyword">from</span> wedw_dwd<span class="token punctuation">.</span>test_user_info_dz a <span class="token keyword">left</span> <span class="token keyword">join</span> wedw_ods<span class="token punctuation">.</span>test_user_info_${DATA_DATE} b <span class="token keyword">on</span> b<span class="token punctuation">.</span>user_id<span class="token operator">=</span>a<span class="token punctuation">.</span>user_id <span class="token operator">and</span> b<span class="token punctuation">.</span>create_time <span class="token operator">&lt;</span> <span class="token string">'2020-04-08'</span>   <span class="token keyword">where</span> a<span class="token punctuation">.</span>date_id <span class="token operator">=</span> <span class="token string">'2020-04-06'</span> <span class="token operator">and</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>user_id <span class="token operator">is</span> <span class="token boolean">null</span>       <span class="token operator">or</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>user_id <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">and</span> a<span class="token punctuation">.</span>end_time <span class="token operator">&lt;=</span><span class="token string">'2020-04-06'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><table><thead><tr><th>用户id</th><th>姓名</th><th>年龄</th><th>手机号</th><th>创建时间</th><th>修改时间</th><th>start_time</th><th>end_time</th><th>date_id</th></tr></thead><tbody><tr><td>0001</td><td>张三</td><td>20</td><td>111233</td><td>2020-04-06</td><td>2020-04-08</td><td>2020-04-08</td><td>9999-12-31</td><td>2020-04-08</td></tr><tr><td>0002</td><td>小红</td><td>21</td><td>222221</td><td>2020-04-06</td><td>2020-04-08</td><td>2020-04-08</td><td>9999-12-31</td><td>2020-04-08</td></tr><tr><td>0003</td><td>李四</td><td>22</td><td>333333</td><td>2020-04-07</td><td>2020-04-07</td><td>2020-04-07</td><td>9999-12-31</td><td>2020-04-08</td></tr><tr><td>0004</td><td>王五</td><td>44</td><td>444445</td><td>2020-04-07</td><td>2020-04-08</td><td>2020-04-08</td><td>9999-12-31</td><td>2020-04-08</td></tr><tr><td>005</td><td>德玛</td><td>55</td><td>555555</td><td>2020-04-08</td><td>2020-04-08</td><td>2020-04-08</td><td>9999-12-31</td><td>2020-04-08</td></tr></tbody></table></li></ol><p>原文链接：<a href="https://mp.weixin.qq.com/s/mrM2x-YH2Bs69JGCXLBRdA">https://mp.weixin.qq.com/s/mrM2x-YH2Bs69JGCXLBRdA</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据仓库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据仓库 </tag>
            
            <tag> 拉链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓慢变化维解决的几种方式</title>
      <link href="/zwhblog.cn/2020/11/03/shu-ju-cang-ku/huan-man-bian-hua-wei/"/>
      <url>/zwhblog.cn/2020/11/03/shu-ju-cang-ku/huan-man-bian-hua-wei/</url>
      
        <content type="html"><![CDATA[<h2 id="缓慢变化纬"><a href="#缓慢变化纬" class="headerlink" title="缓慢变化纬"></a>缓慢变化纬</h2><p>Slowly Changing Dimensions are dimensions that have data that slowly changes. 意思就是说数据会发生缓慢变化的维度就叫”缓慢变化维”。</p><p>处理缓慢变化维度是Kimball数仓体系中永恒的话题，因为数据仓库的本质，以及维度表在维度建模中的基础作用，我们几乎总是要跟踪维度的变更（change tracking），以保留历史，并提供准确的查询和分析结果。在《The Data Warehouse Toolkit, 3rd Edition》一书的第5章，Kimball提出了多种缓慢变化维度的类型和处理方法，其中前五种是原生的，后面的方法都是混合方法（hybrid techniques），因此下面来看看前五种，即Type 0~Type 4。</p><h4 id="Tpye0-保留原始值"><a href="#Tpye0-保留原始值" class="headerlink" title="Tpye0 保留原始值"></a>Tpye0 保留原始值</h4><p>某一个属性值绝不会变化。事实表始终按照该原始值进行分组。比如在用户维度表中，用户注册时使用的原始用户名（original_user_name）。如果它发生变化，那么变化后的值是无效的，会被抛弃，始终按照用户第一次填写的数据为准。很明显这种方式是不推荐的。</p><p>说白话就是只要第一次的数据，不要变化后的数据</p><h4 id="Type1-覆盖更新"><a href="#Type1-覆盖更新" class="headerlink" title="Type1 覆盖更新"></a>Type1 覆盖更新</h4><p>与业务数据保持一致，同样为直接update。这样就难以记录历史变化，例如如果周杰伦于15年7月调入北京，那么我们想要知道北京销售员在15年的销售数据时，就会将周杰伦的业绩算入北京分公司下，实际上周杰伦7月份以前的销售数据均应算在台北，所以为了避免这样的问题就有了TYPE2的处理方式。</p><p>这样的方式就是Mysql中一般表的处理方式，如果变中的值发生了变化就直接update，不保留历史数据，这样显然是不符合我们需求的。</p><h4 id="Type2-增加新的列"><a href="#Type2-增加新的列" class="headerlink" title="Type2 增加新的列"></a>Type2 增加新的列</h4><p>数据仓库系统的目标之一是正确地表示历史记录。我们在生产环境中的基于Hive的数仓建设过程中，拉链表就是直接的体现。</p><p>这种类型在维度表中<strong>添加两个辅助列</strong>：该行的有效日期（effective date）和过期日期（expiration date），分别指示该行从哪个时间点开始生效，以及在哪个时间点过后会变为无效。<strong>每当一个或多个维度发生更改时，就创建一个新的行</strong>，新行包含有修改后的维度值，而旧行包含有修改前的维度值，且旧行的过期日期也会同步修改。书中的例子如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2MNlco9pTMxjCHkDStQYtm6g4ftCUE2aCXeuBwYmguksjwnR0SJ7W4MXmKHcrR1e1svztIWiaTheew/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>在上图中，当前有效列（current列）的过期日期会被记录为9999-12-31。当Department Name维度变化时，旧有的Product Key为12345的行的过期日期被更新为修改日期，并且新建了一个Key为25984的行，包含新的数据。</p><p>需要注意的是，这里的Product Key是所谓代理键（surrogate key），即不表示具体业务含义，而只是代表表内数据行的唯一ID。在处理SCD时，代理键可以直接用来区分同一自然键（natural key）的数据的新旧版本。上图中的SKU就是自然键。</p><p>这种类型的SCD处理方式能够非常有效且精确地保留历史与反映变更，但缺点是会造成数据的膨胀，因为即使只有一个维度变化，也要创建新行。</p><h4 id="Type3-新增属性列"><a href="#Type3-新增属性列" class="headerlink" title="Type3 新增属性列"></a>Type3 新增属性列</h4><p>用不同的字段来保存不同的值，就是在表中增加一个字段，这个字段用来保存变化后的当前值，而原来的值则被称为变化前的值。我们举个很简单的例子，例如我们在用户表中的用户住址这一列会变化，那么我们可以通过新增一个列来表示曾经的地址：</p><p>这么做虽然解决上面的数据膨胀的问题，但是如果很多个列都会变化，那么我们要新增很多系列，显然这是不合理的。另外，这种做法只能保留上一次的数据，那么更久远的变化就丢失了。</p><p>这种方式是我第一次了解拉链表时，最快想到的方式，但是这样并不理想，如果某一列持续update 那么会一直新增column，如果column没有了那么就会覆盖上次的值，有这上面两种类型的缺点</p><h4 id="Type4-新增维度表"><a href="#Type4-新增维度表" class="headerlink" title="Type4 新增维度表"></a>Type4 新增维度表</h4><p>如果我们的表规模非常大，数据量千万以上，大量的列变化非常频繁，那么这时候就不能用上面的办法来支撑了，我们需要将那些快速变化的维度从原来的大维度表中拆分出来单独处理，是为微维度（mini-dimension）。</p><p>我们用书中的内容举例，如果顾客维度中有一部分人口统计学（demographic）维度是RCD，就将它们拆成单独的维度表：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2MNlco9pTMxjCHkDStQYtm6jRhnoDkSk0Vul1Tibv26TmyqQDSBmbLk4OAsxAUQ2afib2b3ibtxFEfhQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>最后给出一张《The Data Warehouse Toolkit, 3rd Edition》中的这几种方式的比较图：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/UdK9ByfMT2MNlco9pTMxjCHkDStQYtm6Eia8ZWvH3J25UmIj5uyau7vHSesHuSoMSBmlsmzrBGnNCNOnb4QeibeA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> 数据仓库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据仓库 </tag>
            
            <tag> 缓慢变化维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop Federation</title>
      <link href="/zwhblog.cn/2020/11/03/cdh/hadoop/hadoop-federation-lian-bang/"/>
      <url>/zwhblog.cn/2020/11/03/cdh/hadoop/hadoop-federation-lian-bang/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop-Federation联邦"><a href="#Hadoop-Federation联邦" class="headerlink" title="Hadoop Federation联邦"></a>Hadoop Federation联邦</h1><p>Hadoop    namenode 水平扩展</p><p><a href="https://www.cnblogs.com/jifengblog/p/9307702.html">https://www.cnblogs.com/jifengblog/p/9307702.html</a></p><p>单 NameNode 的架构使得 HDFS 在集群扩展性和性能上都有潜在的问题，当集群大到一定程度后，NameNode 进程使用的内存可能会达到上百 G，NameNode 成为了性能的瓶颈。因而提出了 namenode 水平扩展方案– Federation。</p><p>NameNode 的 Federation,也就是会有多个NameNode。多个 NameNode 的情况意味着有多个 namespace(命名空间)，区别于 HA 模式下的多 NameNode，它们是拥有着同一个 namespace。</p><p>所有关于存储数据的信息和管理是放在 NameNode 这边,而真实数据的存储则是在各个 DataNode 下。而这些隶属于同一个 NameNode 所管理的数据都是在同一个命名空间下的。而一个 namespace 对应一个 block pool。Block Pool 是同一个 namespace 下的 block 的集合.当然这是我们最常见的单个 namespace 的情况,也就是一个 NameNode 管理集群中所有元数据信息的时候.如果我们遇到了之前提到的 NameNode 内存使用过高的问题,这时候怎么办?元数据空间依然还是在不断增大,一味调高 NameNode 的 jvm 大小绝对不是一个持久的办法.这时候就诞生了 HDFS Federation 的机制.</p><h2 id="Federation-架构设计"><a href="#Federation-架构设计" class="headerlink" title="Federation 架构设计"></a>Federation 架构设计</h2><p>HDFS Federation 是解决 namenode 内存瓶颈问题的水平横向扩展方案。</p><p>Federation 意味着在集群中将会有多个 namenode/namespace。这些 namenode 之间是联合的，也就是说，他们之间相互独立且不需要互相协调，各自分工，管理自己的区域。分布式的 datanode 被用作通用的数据块存储存储设备。每个 datanode 要向集群中所有的namenode 注册，且周期性地向所有 namenode 发送心跳和块报告，并执行来自所有 namenode的命令。</p><p><img src="https://images2018.cnblogs.com/blog/1385779/201807/1385779-20180713221451764-694934100.png" alt="img"></p><p><img src="https://images2018.cnblogs.com/blog/1385779/201807/1385779-20180713221458715-863634950.png" alt="img"></p><p>Federation 一个典型的例子就是上面提到的 NameNode 内存过高问题,我们完全可以将上面部分大的文件目录移到另外一个NameNode上做管理. 更重要的一点在于,, 这些 NameNode是共享集群中所有的 e DataNode 的 , 它们还是在同一个集群内的 。</p><p>这时候在DataNode上就不仅仅存储一个Block Pool下的数据了,而是多个(在DataNode的 datadir 所在目录里面查看 BP-xx.xx.xx.xx 打头的目录)。</p><h3 id="概括起来："><a href="#概括起来：" class="headerlink" title="概括起来："></a>概括起来：</h3><p>　　　　多个 NN 共用一个集群里的存储资源，每个 NN 都可以单独对外提供服务。</p><p>　　　　每个 NN 都会定义一个存储池，有单独的 id，每个 DN 都为所有存储池提供存储。</p><p>　　　　DN 会按照存储池 id 向其对应的 NN 汇报块信息，同时，DN 会向所有 NN 汇报本地存储可用资源情况。</p><p><img src="https://images2018.cnblogs.com/blog/1385779/201807/1385779-20180713221819834-409214850.png" alt="img"></p><h3 id="HDFS-Federation不足"><a href="#HDFS-Federation不足" class="headerlink" title="HDFS Federation不足"></a>HDFS Federation不足</h3><p>　　HDFS Federation 并没有完全解决单点故障问题。虽然 namenode/namespace 存在多个，但是从单个 namenode/namespace 看，仍然存在单点故障：如果某个 namenode 挂掉了，其管理的相应的文件便不可以访问。Federation中每个namenode仍然像之前HDFS上实现一样，配有一个 secondary namenode，以便主 namenode 挂掉一下，用于还原元数据信息。</p><p>　　所以一般集群规模真的很大的时候，会采用 HA+Federation 的部署方案。也就是每个联合的 namenodes 都是 ha 的。</p><h1 id="HA方案之QJM"><a href="#HA方案之QJM" class="headerlink" title="HA方案之QJM"></a>HA方案之QJM</h1>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadopp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch的学习使用</title>
      <link href="/zwhblog.cn/2020/11/03/elasticsearch/elasticsearch/"/>
      <url>/zwhblog.cn/2020/11/03/elasticsearch/elasticsearch/</url>
      
        <content type="html"><![CDATA[<h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><p>当阅读本书时，将会遇到有关 Elasticsearch 分布式特性的补充章节。这些章节将介绍有关集群扩容、故障转移(<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distributed-cluster.html"><em>集群内的原理</em></a>) 、应对文档存储(<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distributed-docs.html"><em>分布式文档存储</em></a>) 、执行分布式搜索(<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distributed-search.html"><em>执行分布式检索</em></a>) ，以及分区（shard）及其工作原理(<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/inside-a-shard.html"><em>分片内部原理</em></a>) 。</p><p>这些章节并非必读，完全可以无需了解内部机制就使用 Elasticsearch，但是它们将从另一个角度帮助你了解更完整的 Elasticsearch 知识。可以根据需要跳过它们，或者想更完整地理解时再回头阅读也无妨。</p><h2 id="Elasticsearch是什么"><a href="#Elasticsearch是什么" class="headerlink" title="Elasticsearch是什么"></a>Elasticsearch是什么</h2><p>Elasticsearch 是一个开源的搜索引擎，建立在一个全文搜索引擎库 <a href="https://lucene.apache.org/core/">Apache Lucene™</a> 基础之上。 Lucene 可以说是当下最先进、高性能、全功能的搜索引擎库—无论是开源还是私有。</p><p>但是 Lucene 仅仅只是一个库。为了充分发挥其功能，你需要使用 Java 并将 Lucene 直接集成到应用程序中。 更糟糕的是，您可能需要获得信息检索学位才能了解其工作原理。Lucene <em>非常</em> 复杂。</p><p>Elasticsearch 不仅仅是 Lucene，并且也不仅仅只是一个全文搜索引擎。 它可以被下面这样准确的形容：</p><ul><li>一个分布式的实时文档存储，<em>每个字段</em> 可以被索引与搜索</li><li>一个分布式实时分析搜索引擎</li><li>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</li></ul><p>Elasticsearch 天生就是分布式的，并且在设计时屏蔽了分布式的复杂性。</p><p>Elasticsearch 在分布式方面几乎是透明的。教程中并不要求了解分布式系统、分片、集群发现或其他的各种分布式概念。</p><p>Elasticsearch 尽可能地屏蔽了分布式系统的复杂性。这里列举了一些在后台自动执行的操作：</p><ul><li>分配文档到不同的容器 或 <em>分片</em> 中，文档可以储存在一个或多个节点中</li><li>按集群节点来均衡分配这些分片，从而对索引和搜索过程进行负载均衡</li><li>复制每个分片以支持数据冗余，从而防止硬件故障导致的数据丢失</li><li>将集群中任一节点的请求路由到存有相关数据的节点</li><li>集群扩容时无缝整合新节点，重新分配分片以便从离群节点恢复</li></ul><h2 id="Elasticsearch-请求语句的组成"><a href="#Elasticsearch-请求语句的组成" class="headerlink" title="Elasticsearch 请求语句的组成"></a>Elasticsearch 请求语句的组成</h2><p>一个 Elasticsearch 请求和任何 HTTP 请求一样由若干相同的部件组成：</p><pre class="line-numbers language-none"><code class="language-none">curl -X&lt;VERB&gt; '&lt;PROTOCOL&gt;://&lt;HOST&gt;:&lt;PORT&gt;/&lt;PATH&gt;?&lt;QUERY_STRING&gt;' -d '&lt;BODY&gt;'curl -XGET 'http://localhost:9200/_count?pretty' -d '{    "query": {        "match_all": {}    }}'Elasticsearch 返回一个 HTTP 状态码（例如：200 OK）和（除`HEAD`请求）一个 JSON 格式的返回值。前面的 curl 请求将返回一个像下面一样的 JSON 体：{    "count" : 0,    "_shards" : {        "total" : 5,        "successful" : 5,        "failed" : 0    }}在返回结果中没有看到 HTTP 头信息是因为我们没有要求`curl`显示它们。想要看到头信息，需要结合 -i 参数来使用 curl 命令：curl -i -XGET 'localhost:9200/'缩写格式:省略请求中所有相同的部分，例如主机名、端口号以及 curl 命令本身。而不是像下面显示的那样用一个完整的请求：curl -XGET 'localhost:9200/_count?pretty' -d '{    "query": {        "match_all": {}    }}'变成了GET /_count{    "query": {        "match_all": {}    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Elasticsearch-请求语句的参数"><a href="#Elasticsearch-请求语句的参数" class="headerlink" title="Elasticsearch 请求语句的参数"></a>Elasticsearch 请求语句的参数</h2><p>被 <code>&lt; &gt;</code> 标记的部件：</p><table><thead><tr><th><code>PROTOCOL</code></th><th><code>http</code> 或者 <code>https</code>（如果你在 Elasticsearch 前面有一个 <code>https</code> 代理）</th></tr></thead><tbody><tr><td><code>VERB</code></td><td>适当的 HTTP <em>方法</em> 或 <em>谓词</em> : <code>GET</code>、 <code>POST</code>、 <code>PUT</code>、 <code>HEAD</code> 或者 <code>DELETE</code>。</td></tr><tr><td><code>HOST</code></td><td>Elasticsearch 集群中任意节点的主机名，或者用 <code>localhost</code> 代表本地机器上的节点。</td></tr><tr><td><code>PORT</code></td><td>运行 Elasticsearch HTTP 服务的端口号，默认是 <code>9200</code> 。</td></tr><tr><td><code>PATH</code></td><td>API 的终端路径（例如 <code>_count</code> 将返回集群中文档数量）。Path 可能包含多个组件，例如：<code>_cluster/stats</code> 和 <code>_nodes/stats/jvm</code> 。</td></tr><tr><td><code>QUERY_STRING</code></td><td>任意可选的查询字符串参数 (例如 <code>?pretty</code> 将格式化地输出 JSON 返回值，使其更容易阅读)</td></tr><tr><td><code>BODY</code></td><td>一个 JSON 格式的请求体 (如果请求需要的话)</td></tr></tbody></table><h2 id="ES-基本概念"><a href="#ES-基本概念" class="headerlink" title="ES 基本概念"></a>ES 基本概念</h2><p><strong>1）节点（Node）</strong></p><p>运行了<strong>单个实例的ES主机称为节点</strong>，它是集群的一个成员，可以存储数据、参与集群索引及搜索操作。节点通过为其配置的ES集群名称确定其所要加入的集群。</p><p><strong>2）集群（cluster）</strong></p><p>ES可以作为一个独立的单个搜索服务器。不过，一般为了处理大型数据集，实现容错和高可用性，ES可以运行在许多互相合作的服务器上。这些服务器的集合称为集群。</p><p><strong>3）分片（Shard）</strong></p><p>ES的“分片(shard)”机制可将一个索引内部的数据分布地存储于多个节点，它通过<strong>将一个索引切分为多个</strong>底层物理的Lucene索引完成<strong>索引数据的分割存储</strong>功能，这每一个物理的Lucene索引称为一个分片(shard)。</p><p>这样的好处是可以<strong>把一个大的索引拆分成多个，分布到不同的节点上</strong>。降低单服务器的压力，构成分布式搜索，<strong>提高整体检索的效率（分片数的最优值与硬件参数和数据量大小有关）。</strong>分片的数量<strong>只能在索引创建前指定，并且索引创建后不能更改。</strong></p><p><strong>4）副本（Replica）</strong></p><p>副本是一个分片的<strong>精确复制</strong>，每个分片可以有零个或多个副本。副本的作用一是<strong>提高系统的容错性</strong>，当某个节点某个分片损坏或丢失时可以从副本中恢复。二是<strong>提高es的查询效率</strong>，es会自动对搜索请求进行负载均衡。</p><h2 id="面向文档"><a href="#面向文档" class="headerlink" title="面向文档"></a>面向文档</h2><p>在应用程序中对象很少只是一个简单的键和值的列表。通常，它们拥有更复杂的数据结构，可能包括日期、地理信息、其他对象或者数组等。</p><p>也许有一天你想把这些对象存储在数据库中。使用关系型数据库的行和列存储，这相当于是把一个表现力丰富的对象塞到一个非常大的电子表格中：为了适应表结构，你必须设法将这个对象扁平化—通常一个字段对应一列—而且每次查询时又需要将其重新构造为对象。</p><p>Elasticsearch 是 <em>面向文档</em> 的，意味着它存储整个对象或 <em>文档</em>。<strong>Elasticsearch 不仅存储文档，而且 <em>索引</em> 每个文档的内容，使之可以被检索。在 Elasticsearch 中，我们对文档进行索引、检索、排序和过滤—而不是对行列数据</strong>。这是一种完全不同的思考数据的方式，也是 Elasticsearch 能支持复杂全文检索的原因。</p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>Elasticsearch 使用 JavaScript Object Notation（或者 <a href="http://en.wikipedia.org/wiki/Json"><em>JSON</em></a>）作为文档的序列化格式。JSON 序列化为大多数编程语言所支持，并且已经成为 NoSQL 领域的标准格式</p><p>官方 <a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">Elasticsearch 客户端</a> 自动为您提供 JSON 转化。</p><p>一个 Elasticsearch 集群可以 包含多个 <em>索引</em> ，相应的每个索引可以包含多个 <em>类型</em> 。 这些不同的类型存储着多个 <em>文档</em> ，每个文档又有 多个 <em>属性</em> 。</p><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>Elasticsearch 使用一种称为 <em>倒排索引</em> 的结构，它适用于快速的全文搜索。一个倒排索引由文档中所有不重复词的列表构成，对于其中每个词，有一个包含它的文档列表。</p><p>例如，假设我们有两个文档，每个文档的 <code>content</code> 域包含如下内容：</p><ol><li>The quick brown fox jumped over the lazy dog</li><li>Quick brown foxes leap over lazy dogs in summer</li></ol><p>为了创建倒排索引，我们首先将每个文档的 <code>content</code> 域拆分成单独的 词（我们称它为 <code>词条</code> 或 <code>tokens</code> ），创建一个包含所有不重复词条的排序列表，然后列出每个词条出现在哪个文档。结果如下所示：</p><pre class="line-numbers language-none"><code class="language-none">Term      Doc_1  Doc_2-------------------------Quick   |       |  XThe     |   X   |brown   |   X   |  Xdog     |   X   |dogs    |       |  Xfox     |   X   |foxes   |       |  Xin      |       |  Xjumped  |   X   |lazy    |   X   |  Xleap    |       |  Xover    |   X   |  Xquick   |   X   |summer  |       |  Xthe     |   X   |------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们想搜索 <code>quick brown</code> ，我们只需要查找包含每个词条的文档：</p><pre class="line-numbers language-none"><code class="language-none">Term      Doc_1  Doc_2-------------------------brown   |   X   |  Xquick   |   X   |------------------------Total   |   2   |  1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分析-的过程："><a href="#分析-的过程：" class="headerlink" title="分析 的过程："></a><em>分析</em> 的过程：</h2><ul><li>首先，将一块文本分成适合于倒排索引的独立的 <em>词条</em> ，</li><li>之后，将这些词条统一化为标准格式以提高它们的“可搜索性”，或者 <em>recall</em></li></ul><p>分析器执行上面的工作。 <em>分析器</em> 实际上是将三个功能封装到了一个包里：</p><ul><li><p><strong>字符过滤器</strong></p><p>首先，字符串按顺序通过每个 <em>字符过滤器</em> 。他们的任务是在分词前整理字符串。一个字符过滤器可以用来去掉HTML，或者将 <code>&amp;</code> 转化成 <code>and</code>。</p></li><li><p><strong>分词器</strong></p><p>其次，字符串被 <em>分词器</em> 分为单个的词条。一个简单的分词器遇到空格和标点的时候，可能会将文本拆分成词条。</p></li><li><p><strong>Token 过滤器</strong></p><p>最后，词条按顺序通过每个 <em>token 过滤器</em> 。这个过程可能会改变词条（例如，小写化 <code>Quick</code> ），删除词条（例如， 像 <code>a</code>， <code>and</code>， <code>the</code> 等无用词），或者增加词条（例如，像 <code>jump</code> 和 <code>leap</code> 这种同义词）。</p></li></ul><p>Elasticsearch提供了开箱即用的字符过滤器、分词器和token 过滤器。 这些可以组合起来形成自定义的分析器以用于不同的目的。我们会在 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/custom-analyzers.html">自定义分析器</a> 章节详细讨论。</p><h2 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h2><p>Elasticsearch还附带了可以直接使用的预包装的分析器。接下来我们会列出最重要的分析器。为了证明它们的差异，我们看看每个分析器会从下面的字符串得到哪些词条：</p><pre class="line-numbers language-none"><code class="language-none">"Set the shape to semi-transparent by calling set_trans(5)"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>标准分析器</strong></p><p>标准分析器是Elasticsearch默认使用的分析器。它是分析各种语言文本最常用的选择。它根据 <a href="http://www.unicode.org/reports/tr29/">Unicode 联盟</a> 定义的 <em>单词边界</em> 划分文本。删除绝大部分标点。最后，将词条小写。它会产生<code>set, the, shape, to, semi, transparent, by, calling, set_trans, 5</code></p></li><li><p><strong>简单分析器</strong></p><p>简单分析器在任何不是字母的地方分隔文本，将词条小写。它会产生<code>set, the, shape, to, semi, transparent, by, calling, set, trans</code></p></li><li><p><strong>空格分析器</strong></p><p>空格分析器在空格的地方划分文本。它会产生<code>Set, the, shape, to, semi-transparent, by, calling, set_trans(5)</code></p></li><li><p><strong>语言分析器</strong></p><p>特定语言分析器可用于 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/analysis-lang-analyzer.html">很多语言</a>。它们可以考虑指定语言的特点。例如， <code>英语</code> 分析器附带了一组英语无用词（常用单词，例如 <code>and</code> 或者 <code>the</code> ，它们对相关性没有多少影响），它们会被删除。 由于理解英语语法的规则，这个分词器可以提取英语单词的 <em>词干</em> 。<code>英语</code> 分词器会产生下面的词条：<code>set, shape, semi, transpar, call, set_tran, 5</code>注意看 <code>transparent</code>、 <code>calling</code> 和 <code>set_trans</code> 已经变为词根格式。</p></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="添加内容"><a href="#添加内容" class="headerlink" title="添加内容"></a>添加内容</h3><pre class="line-numbers language-sense" data-language="sense"><code class="language-sense">PUT /megacorp/employee/1{    "first_name" : "John",    "last_name" :  "Smith",    "age" :        25,    "about" :      "I love to go rock climbing",    "interests": [ "sports", "music" ]}PUT /megacorp/employee/2{    "first_name" :  "Jane",    "last_name" :   "Smith",    "age" :         32,    "about" :       "I like to collect rock albums",    "interests":  [ "music" ]}PUT /megacorp/employee/3{    "first_name" :  "Douglas",    "last_name" :   "Fir",    "age" :         35,    "about":        "I like to build cabinets",    "interests":  [ "forestry" ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，路径 <code>/megacorp/employee/1</code> 包含了三部分的信息：</p><ul><li><p><strong><code>megacorp</code></strong></p><p>索引名称</p></li><li><p><strong><code>employee</code></strong></p><p>类型名称</p></li><li><p><strong><code>1</code></strong></p><p>特定雇员的ID</p></li></ul><p>请求体 —— JSON 文档 —— 包含了这位员工的所有详细信息，他的名字叫 John Smith ，今年 25 岁，喜欢攀岩。</p><h3 id="获取单条数据"><a href="#获取单条数据" class="headerlink" title="获取单条数据"></a>获取单条数据</h3><pre class="line-numbers language-sense" data-language="sense"><code class="language-sense">GET /megacorp/employee/1获取的值：{  "_index" :   "megacorp",  "_type" :    "employee",  "_id" :      "1",  "_version" : 1,  "found" :    true,  "_source" :  {      "first_name" :  "John",      "last_name" :   "Smith",      "age" :         25,      "about" :       "I love to go rock climbing",      "interests":  [ "sports", "music" ]  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询所有数据"><a href="#查询所有数据" class="headerlink" title="查询所有数据"></a>查询所有数据</h3><pre class="line-numbers language-sense" data-language="sense"><code class="language-sense">GET /megacorp/employee/_search<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，我们仍然使用索引库 megacorp 以及类型 employee，但与指定一个文档 ID 不同，这次使用 _search 。返回结果包括了所有三个文档，放在数组 hits 中。一个搜索默认返回十条结果。</p><pre class="line-numbers language-none"><code class="language-none">{   "took":      6,   "timed_out": false,   "_shards": { ... },   "hits": {      "total":      3,      "max_score":  1,      "hits": [         {            "_index":         "megacorp",            "_type":          "employee",            "_id":            "3",            "_score":         1,            "_source": {               "first_name":  "Douglas",               "last_name":   "Fir",               "age":         35,               "about":       "I like to build cabinets",               "interests": [ "forestry" ]            }         },         {            "_index":         "megacorp",            "_type":          "employee",            "_id":            "1",            "_score":         1,            "_source": {               "first_name":  "John",               "last_name":   "Smith",               "age":         25,               "about":       "I love to go rock climbing",               "interests": [ "sports", "music" ]            }         },         {            "_index":         "megacorp",            "_type":          "employee",            "_id":            "2",            "_score":         1,            "_source": {               "first_name":  "Jane",               "last_name":   "Smith",               "age":         32,               "about":       "I like to collect rock albums",               "interests": [ "music" ]            }         }      ]   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="轻量搜索-条件查询"><a href="#轻量搜索-条件查询" class="headerlink" title="轻量搜索-条件查询"></a>轻量搜索-条件查询</h3><p>这个方法一般涉及到一个 <em>查询字符串</em> （<em>query-string</em>） 搜索，因为我们通过一个URL参数来传递查询信息给搜索接口：</p><p>尝试下搜索姓氏为 <code>Smith</code> 的雇员：</p><p>就是查询后面加上?q=条件</p><pre class="line-numbers language-none"><code class="language-none">GET /megacorp/employee/_search?q=last_name:Smith<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">{   ...   "hits": {      "total":      2,      "max_score":  0.30685282,      "hits": [         {            ...            "_source": {               "first_name":  "John",               "last_name":   "Smith",               "age":         25,               "about":       "I love to go rock climbing",               "interests": [ "sports", "music" ]            }         },         {            ...            "_source": {               "first_name":  "Jane",               "last_name":   "Smith",               "age":         32,               "about":       "I like to collect rock albums",               "interests": [ "music" ]            }         }      ]   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询表达式-条件查询"><a href="#查询表达式-条件查询" class="headerlink" title="查询表达式-条件查询"></a>查询表达式-条件查询</h3><p>Query-string 搜索通过命令非常方便地进行临时性的即席搜索 ，但它有自身的局限性（参见 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/search-lite.html"><em>轻量</em> 搜索</a> ）。Elasticsearch 提供一个丰富灵活的查询语言叫做 <em>查询表达式</em> ， 它支持构建更加复杂和健壮的查询。</p><p><em>领域特定语言</em> （DSL）， 使用 JSON 构造了一个请求。我们可以像这样重写之前的查询所有名为 Smith 的搜索 ：    </p><pre class="line-numbers language-none"><code class="language-none">GET /megacorp/employee/_search{    "query" : {        "match" : {            "last_name" : "Smith"        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回结果与之前的查询一样，但还是可以看到有一些变化。其中之一是，不再使用 <em>query-string</em> 参数，而是一个请求体替代。这个请求使用 JSON 构造，并使用了一个 <code>match</code> 查询（属于查询类型之一，后面将继续介绍）。</p><h3 id="查询表达式-复杂查询"><a href="#查询表达式-复杂查询" class="headerlink" title="查询表达式-复杂查询"></a>查询表达式-复杂查询</h3><p>同样搜索姓氏为 Smith 的员工，但这次我们只需要年龄大于 30 的。查询需要稍作调整，使用过滤器 <em>filter</em> ，它支持高效地执行一个结构化查询。</p><pre class="line-numbers language-none"><code class="language-none">GET /megacorp/employee/_search{    "query" : {        "bool": {            "must": {                "match" : {                    "last_name" : "smith"                 }            },            "filter": {                "range" : {                    "age" : { "gt" : 30 }                 }            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了bool只要对应的，并且锁定age  的 range 是 gt 大于 30的 </p><pre class="line-numbers language-none"><code class="language-none">结果：{   ...   "hits": {      "total":      1,      "max_score":  0.30685282,      "hits": [         {            ...            "_source": {               "first_name":  "Jane",               "last_name":   "Smith",               "age":         32,               "about":       "I like to collect rock albums",               "interests": [ "music" ]            }         }      ]   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询表达式-全文搜索"><a href="#查询表达式-全文搜索" class="headerlink" title="查询表达式-全文搜索"></a>查询表达式-全文搜索</h3><p>搜索下所有喜欢攀岩（rock climbing）的员工：</p><pre class="line-numbers language-none"><code class="language-none">GET /megacorp/employee/_search{    "query" : {        "match" : {            "about" : "rock climbing"        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然我们依旧使用之前的 <code>match</code> 查询在<code>about</code> 属性上搜索 “rock climbing” 。得到两个匹配的文档：</p><pre class="line-numbers language-none"><code class="language-none">{   ...   "hits": {      "total":      2,      "max_score":  0.16273327,      "hits": [         {            ...            "_score":         0.16273327,             "_source": {               "first_name":  "John",               "last_name":   "Smith",               "age":         25,               "about":       "I love to go rock climbing",               "interests": [ "sports", "music" ]            }         },         {            ...            "_score":         0.016878016,             "_source": {               "first_name":  "Jane",               "last_name":   "Smith",               "age":         32,               "about":       "I like to collect rock albums",               "interests": [ "music" ]            }         }      ]   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找出一个属性中的独立单词是没有问题的，但有时候想要精确匹配一系列单词或者<em>短语</em> 。 比如， 我们想执行这样一个查询，仅匹配同时包含 “rock” <em>和</em> “climbing” ，<em>并且</em> 二者以短语 “rock climbing” 的形式紧挨着的雇员记录。</p><h3 id="查询表达式-短语搜索"><a href="#查询表达式-短语搜索" class="headerlink" title="查询表达式-短语搜索"></a>查询表达式-短语搜索</h3><p>短语就是指把查询的多个词看成一个整体来查询</p><p>找出一个属性中的独立单词是没有问题的，但有时候想要精确匹配一系列单词或者<em>短语</em> 。 比如， 我们想执行这样一个查询，仅匹配同时包含 “rock” <em>和</em> “climbing” ，<em>并且</em> 二者以短语 “rock climbing” 的形式紧挨着的雇员记录。</p><p>为此对 <code>match</code> 查询稍作调整，使用一个叫做 <code>match_phrase</code> 的查询：</p><pre class="line-numbers language-sense" data-language="sense"><code class="language-sense">GET /megacorp/employee/_search{    "query" : {        "match_phrase" : {            "about" : "rock climbing"        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">结果：{   ...   "hits": {      "total":      1,      "max_score":  0.23013961,      "hits": [         {            ...            "_score":         0.23013961,            "_source": {               "first_name":  "John",               "last_name":   "Smith",               "age":         25,               "about":       "I love to go rock climbing",               "interests": [ "sports", "music" ]            }         }      ]   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询表达式-高亮搜索"><a href="#查询表达式-高亮搜索" class="headerlink" title="查询表达式-高亮搜索"></a>查询表达式-高亮搜索</h3><p>许多应用都倾向于在每个搜索结果中 <em>高亮</em> 部分文本片段，以便让用户知道为何该文档符合查询条件。在 Elasticsearch 中检索出高亮片段也很容易。</p><p>再次执行前面的查询，并增加一个新的 <code>highlight</code> 参数：</p><pre class="line-numbers language-none"><code class="language-none">GET /megacorp/employee/_search{    "query" : {        "match_phrase" : {            "about" : "rock climbing"        }    },    "highlight": {        "fields" : {            "about" : {}        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当执行该查询时，返回结果与之前一样，与此同时结果中还多了一个叫做 <code>highlight</code> 的部分。这个部分包含了 <code>about</code> 属性匹配的文本片段，并以 HTML 标签 <code>&lt;em&gt;&lt;/em&gt;</code> 封装：</p><pre class="line-numbers language-none"><code class="language-none">结果：{   ...   "hits": {      "total":      1,      "max_score":  0.23013961,      "hits": [         {            ...            "_score":         0.23013961,            "_source": {               "first_name":  "John",               "last_name":   "Smith",               "age":         25,               "about":       "I love to go rock climbing",               "interests": [ "sports", "music" ]            },            "highlight": {               "about": [                  "I love to go &lt;em&gt;rock&lt;/em&gt; &lt;em&gt;climbing&lt;/em&gt;"                ]            }         }      ]   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询表达式-聚合"><a href="#查询表达式-聚合" class="headerlink" title="查询表达式-聚合"></a>查询表达式-聚合</h3><p>支持管理者对员工目录做分析。 Elasticsearch 有一个功能叫聚合（aggregations），允许我们基于数据生成一些精细的分析结果。聚合与 SQL 中的 <code>GROUP BY</code> 类似但更强大。</p><pre class="line-numbers language-none"><code class="language-none">GET /megacorp/employee/_search{  "aggs": {    "all_interests": {      "terms": { "field": "interests" }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">结果：{   ...   "hits": { ... },   "aggregations": {      "all_interests": {         "buckets": [            {               "key":       "music",               "doc_count": 2            },            {               "key":       "forestry",               "doc_count": 1            },            {               "key":       "sports",               "doc_count": 1            }         ]      }   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，两位员工对音乐感兴趣，一位对林业感兴趣，一位对运动感兴趣。这些聚合的结果数据并非预先统计，而是根据匹配当前查询的文档即时生成的。</p><h3 id="查询表达式-组合查询"><a href="#查询表达式-组合查询" class="headerlink" title="查询表达式-组合查询"></a>查询表达式-组合查询</h3><p>如果想知道叫 Smith 的员工中最受欢迎的兴趣爱好，可以直接构造一个组合查询：</p><pre class="line-numbers language-none"><code class="language-none">GET /megacorp/employee/_search{  "query": {    "match": {      "last_name": "smith"    }  },  "aggs": {    "all_interests": {      "terms": {        "field": "interests"      }     }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>all_interests</code> 聚合已经变为只包含匹配查询的文档：</p><pre class="line-numbers language-none"><code class="language-none">结果：...  "all_interests": {     "buckets": [        {           "key": "music",           "doc_count": 2        },        {           "key": "sports",           "doc_count": 1        }     ]  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="相关性得分"><a href="#相关性得分" class="headerlink" title="相关性得分"></a>相关性得分</h2><p>Elasticsearch 默认按照相关性得分排序，即每个文档跟查询的匹配程度。第一个最高得分的结果很明显：John Smith 的 <code>about</code> 属性清楚地写着 “rock climbing” 。</p><p>但为什么 Jane Smith 也作为结果返回了呢？原因是她的 <code>about</code> 属性里提到了 “rock” 。因为只有 “rock” 而没有 “climbing” ，所以她的相关性得分低于 John 的。</p><p>这是一个很好的案例，阐明了 Elasticsearch 如何 <em>在</em> 全文属性上搜索并返回相关性最强的结果。Elasticsearch中的 <em>相关性</em> 概念非常重要，也是完全区别于传统关系型数据库的一个概念，数据库中的一条记录要么匹配要么不匹配。</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8文档笔记</title>
      <link href="/zwhblog.cn/2020/11/03/java/java8-wen-dang-xue-xi-bi-ji/"/>
      <url>/zwhblog.cn/2020/11/03/java/java8-wen-dang-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>Java 有三个显式关键字来设置类中的访问权限：<code>public</code>（公开），<code>private</code>（私有）和<code>protected</code>（受保护）。这些访问修饰符决定了谁能使用它们修饰的方法、变量或类。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a><a href="https://lingcoder.github.io/OnJava8/#/book/01-What-is-an-Object?id=%E5%A4%9A%E6%80%81">多态</a></h4><p>在传统意义上，编译器不能进行函数调用。由非 OOP（面向对象程序设计） 编译器产生的函数调用会引起所谓的<strong>早期绑定</strong>，这个术语你可能从未听说过，不会想过其他的函数调用方式。这意味着编译器生成对特定函数名的调用，该调用会被解析为将执行的代码的绝对地址。</p><p>通过继承，程序直到运行时才能确定代码的地址，因此发送消息给对象时，还需要其他一些方案。为了解决这个问题，面向对象语言使用<strong>后期绑定</strong>的概念。当向对象发送信息时，被调用的代码直到运行时才确定。编译器确保方法存在，并对参数和返回值执行类型检查，但是它不知道要执行的确切代码。</p><p>为了执行后期绑定，Java 使用一个特殊的代码位来代替绝对调用。这段代码使用对象中存储的信息来计算方法主体的地址（此过程在多态性章节中有详细介绍）。因此，每个对象的行为根据特定代码位的内容而不同。当你向对象发送消息时，对象知道该如何处理这条消息。在某些语言中，必须显式地授予方法后期绑定属性的灵活性。例如，C++ 使用 <strong>virtual</strong> 关键字。在这些语言中，默认情况下方法不是动态绑定的。在 Java 中，动态绑定是默认行为，不需要额外的关键字来实现多态性。</p><p>这种把子类当成其基类来处理的过程叫做“向上转型”（<strong>upcasting</strong>）。在面向对象的编程里，经常利用这种方法来给程序解耦。</p><p>发送消息给对象时，如果程序不知道接收的具体类型是什么，但最终执行是正确的，这就是对象的“多态性”（Polymorphism）。面向对象的程序设计语言是通过“动态绑定”的方式来实现对象的多态性的。编译器和运行时系统会负责对所有细节的控制；我们只需知道要做什么，以及如何利用多态性来更好地设计程序。</p><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a><a href="https://lingcoder.github.io/OnJava8/#/book/01-What-is-an-Object?id=%E9%9B%86%E5%90%88">集合</a></h4><p>一般优秀的 OOP 语言都会将“集合”作为其基础包。在 C++ 中，“集合”是其标准库的一部分，通常被称为 STL（Standard Template Library，标准模板库）。SmallTalk 有一套非常完整的集合库。同样，Java 的标准库中也提供许多现成的集合类。</p><p>“集合”这种类型的对象可以存储任意类型、数量的其他对象。它能根据需要自动扩容，我们不用关心过程是如何实现的。</p><p>在一些库中，一两个泛型集合就能满足我们所有的需求了，而在其他一些类库（Java）中，不同类型的集合对应不同的需求：常见的有 List，常用于保存序列；Map，也称为关联数组，常用于将对象与其他对象关联；Set，只能保存非重复的值；其他还包括如队列（Queue）、树（Tree）、栈（Stack）、堆（Heap）等等。从设计的角度来看，我们真正想要的是一个能够解决某个问题的集合。如果一种集合就满足所有需求，那么我们就不需要剩下的了。之所以选择集合有以下两个原因：</p><ol><li>集合可以提供不同类型的接口和外部行为。堆栈、队列的应用场景和集合、列表不同，它们中的一种提供的解决方案可能比其他灵活得多。</li><li>不同的集合对某些操作有不同的效率。例如，List 的两种基本类型：ArrayList 和 LinkedList。虽然两者具有相同接口和外部行为，但是在某些操作中它们的效率差别很大。在 ArrayList 中随机查找元素是很高效的，而 LinkedList 随机查找效率低下。反之，在 LinkedList 中插入元素的效率要比在 ArrayList 中高。由于底层数据结构的不同，每种集合类型在执行相同的操作时会表现出效率上的差异。</li></ol><p>在 Java 5 泛型出来之前，集合中保存的是通用类型 <code>Object</code>。Java 单继承的结构意味着所有元素都基于 <code>Object</code> 类，所以在集合中可以保存任何类型的数据，易于重用。要使用这样的集合，我们先要往集合添加元素。由于 Java 5 版本前的集合只保存 <code>Object</code>，当我们往集合中添加元素时，元素便向上转型成了 <code>Object</code>，从而丢失自己原有的类型特性。这时我们再从集合中取出该元素时，元素的类型变成了 <code>Object</code>。那么我们该怎么将其转回原先具体的类型呢？这里，我们使用了强制类型转换将其转为更具体的类型，这个过程称为对象的“向下转型”。通过“向上转型”，我们知道“圆形”也是一种“形状”，这个过程是安全的。可是我们不能从“Object”看出其就是“圆形”或“形状”，所以除非我们能确定元素的具体类型信息，否则“向下转型”就是不安全的。也不能说这样的错误就是完全危险的，因为一旦我们转化了错误的类型，程序就会运行出错，抛出“运行时异常”（RuntimeException）。（后面的章节会提到） 无论如何，我们要寻找一种在取出集合元素时确定其具体类型的方法。另外，每次取出元素都要做额外的“向下转型”对程序和程序员都是一种开销。以某种方式创建集合，以确认保存元素的具体类型，减少集合元素“向下转型”的开销和可能出现的错误难道不好吗？这种解决方案就是：参数化类型机制（Parameterized Type Mechanism）。</p><p>参数化类型机制可以使得编译器能够自动识别某个 <code>class</code> 的具体类型并正确地执行。举个例子，对集合的参数化类型机制可以让集合仅接受“形状”这种类型的元素，并以“形状”类型取出元素。Java 5 版本支持了参数化类型机制，称之为“泛型”（Generic）。泛型是 Java 5 的主要特性之一。你可以按以下方式向 ArrayList 中添加 Shape（形状）：</p><h4 id="对象创建与生命周期"><a href="#对象创建与生命周期" class="headerlink" title="对象创建与生命周期"></a><a href="https://lingcoder.github.io/OnJava8/#/book/01-What-is-an-Object?id=%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E4%B8%8E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">对象创建与生命周期</a></h4><p>我们在使用对象时要注意的一个关键问题就是对象的创建和销毁方式。每个对象的生存都需要资源，尤其是内存。为了资源的重复利用，当对象不再被使用时，我们应该及时释放资源，清理内存。</p><p>在简单的编程场景下，对象的清理并不是问题。我们创建对象，按需使用，最后销毁它。然而，情况往往要比这更复杂：</p><p>假设，我们正在为机场设计一个空中交通管制的系统（该例也适用于仓库货柜管理、影带出租或者宠物寄养仓库系统）。第一步比较简单：创建一个用来保存飞机的集合，每当有飞机进入交通管制区域时，我们就创建一个“飞机”对象并将其加入到集合中，等到飞机离开时将其从这个集合中清除。与此同时，我们还需要一个记录飞机信息的系统，也许这些数据不像主要控制功能那样引人注意。比如，我们要记录所有飞机中的小型飞机的的信息（比如飞行计划）。此时，我们又创建了第二个集合来记录所有小型飞机。 每当创建一个“飞机”对象的时候，将其放入第一个集合；若它属于小型飞机，也必须同时将其放入第二个集合里。</p><p>现在问题开始棘手了：我们怎么知道何时该清理这些对象呢？当某一个系统处理完成，而其他系统可能还没有处理完成。这样的问题在其他的场景下也可能发生。在 C++ 程序设计中，当使用完一个对象后，必须明确将其删除，这就让问题变复杂了。</p><p>对象的数据在哪？它的生命周期是怎么被控制的？ 在 C++ 设计中采用的观点是效率第一，因此它将选择权交给了程序员。为了获得最大的运行时速度，程序员可以在编写程序时，通过将对象放在栈（Stack，有时称为自动变量或作用域变量）或静态存储区域（static storage area）中来确定内存占用和生存时间。这些区域的对象会被优先分配内存和释放。这种控制在某些情况下非常有用。</p><p>然而相对的，我们也牺牲了程序的灵活性。因为在编写代码时，我们必须要弄清楚对象的数量、生存时间还有类型。如果我们要用它来解决一个相当普遍的问题时（如计算机辅助设计、仓库管理或空中交通管制等），限制就太大了。</p><p>第二种方法是在堆内存（Heap）中动态地创建对象。在这种方式下，直到程序运行我们才能确定需要创建的对象数量、生存时间和类型。什么时候需要，什么时候在堆内存中创建。 因为内存的占用是动态管理的，所以在运行时，在堆内存上开辟空间所需的时间可能比在栈内存上要长（但也不一定）。在栈内存开辟和释放空间通常是一条将栈指针向下移动和一条将栈指针向上移动的汇编指令。开辟堆内存空间的时间取决于内存机制的设计。</p><p>动态方法有这样一个合理假设：对象通常是复杂的，相比于对象创建的整体开销，寻找和释放内存空间的开销微不足道。（原文：*The dynamic approach makes the generally logical assumption that objects tend to be complicated, so the extra overhead of finding storage and releasing that storage will not have an important impact on the creation of an object.*）此外，更好的灵活性对于问题的解决至关重要。</p><p>Java 使用动态内存分配。每次创建对象时，使用 <code>new</code> 关键字构建该对象的动态实例。这又带来另一个问题：对象的生命周期。较之堆内存，在栈内存中创建对象，编译器能够确定该对象的生命周期并自动销毁它；然而如果你在堆内存创建对象的话，编译器是不知道它的生命周期的。在 C++ 中你必须以编程方式确定何时销毁对象，否则可能导致内存泄漏。Java 的内存管理是建立在垃圾收集器上的，它能自动发现对象不再被使用并释放内存。垃圾收集器的存在带来了极大的便利，它减少了我们之前必须要跟踪的问题和编写相关代码的数量。因此，垃圾收集器提供了更高级别的保险，以防止潜在的内存泄漏问题，这个问题使得许多 C++ 项目没落。</p><p>Java 的垃圾收集器被设计用来解决内存释放的问题（虽然这不包括对象清理的其他方面）。垃圾收集器知道对象什么时候不再被使用并且自动释放内存。结合单继承和仅可在堆中创建对象的机制，Java 的编码过程比用 C++ 要简单得多。我们所要做的决定和要克服的障碍也会少很多！</p><h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a><a href="https://lingcoder.github.io/OnJava8/#/book/03-Objects-Everywhere?id=%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8">数据存储</a></h4><p>那么，程序在运行时是如何存储的呢？尤其是内存是怎么分配的。有5个不同的地方可以存储数据：</p><ol><li><strong>寄存器</strong>（Registers）最快的存储区域，位于 CPU 内部 <a href="https://lingcoder.github.io/OnJava8/#/%E5%A4%A7%E5%A4%9A%E6%95%B0%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8%E8%8A%AF%E7%89%87%E9%83%BD%E6%9C%89%E9%A2%9D%E5%A4%96%E7%9A%84%E9%AB%98%E9%80%9F%E7%BC%93%E5%86%B2%E5%AD%98%E5%82%A8%E5%99%A8%EF%BC%8C%E4%BD%86%E8%BF%99%E6%98%AF%E6%8C%89%E7%85%A7%E4%BC%A0%E7%BB%9F%E5%AD%98%E5%82%A8%E5%99%A8%E8%80%8C%E4%B8%8D%E6%98%AF%E5%AF%84%E5%AD%98%E5%99%A8%E3%80%82">^2</a>。然而，寄存器的数量十分有限，所以寄存器根据需求进行分配。我们对其没有直接的控制权，也无法在自己的程序里找到寄存器存在的踪迹（另一方面，C/C++ 允许开发者向编译器建议寄存器的分配）。</li><li><strong>栈内存</strong>（Stack）存在于常规内存 RAM（随机访问存储器，Random Access Memory）区域中，可通过栈指针获得处理器的直接支持。栈指针下移分配内存，上移释放内存。这是一种仅次于寄存器的非常快速有效的分配存储方式。创建程序时，Java 系统必须知道栈内保存的所有项的生命周期。这种约束限制了程序的灵活性。因此，虽然在栈内存上存在一些 Java 数据（如对象引用），但 Java 对象本身的数据却是保存在堆内存的。</li><li><strong>堆内存</strong>（Heap）这是一种通用的内存池（也在 RAM 区域），所有 Java 对象都存在于其中。与栈内存不同，编译器不需要知道对象必须在堆内存上停留多长时间。因此，用堆内存保存数据更具灵活性。创建一个对象时，只需用 <code>new</code> 命令实例化对象即可，当执行代码时，会自动在堆中进行内存分配。这种灵活性是有代价的：分配和清理堆内存要比栈内存需要更多的时间（如果可以用 Java 在栈内存上创建对象，就像在 C++ 中那样的话）。随着时间的推移，Java 的堆内存分配机制现在已经非常快，因此这不是一个值得关心的问题了。</li><li><strong>常量存储</strong>（Constant storage）常量值通常直接放在程序代码中，因为它们永远不会改变。如需严格保护，可考虑将它们置于只读存储器 ROM （只读存储器，Read Only Memory）中 <a href="https://lingcoder.github.io/OnJava8/#/%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E3%80%82%E6%89%80%E6%9C%89%E6%96%87%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%80%BC%E5%B8%B8%E9%87%8F%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%83%BD%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%94%BE%E5%85%A5%E7%89%B9%E6%AE%8A%E7%9A%84%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8%E4%B8%AD%E3%80%82">^3</a>。</li><li><strong>非 RAM 存储</strong>（Non-RAM storage）数据完全存在于程序之外，在程序未运行以及脱离程序控制后依然存在。两个主要的例子：（1）序列化对象：对象被转换为字节流，通常被发送到另一台机器；（2）持久化对象：对象被放置在磁盘上，即使程序终止，数据依然存在。这些存储的方式都是将对象转存于另一个介质中，并在需要时恢复成常规的、基于 RAM 的对象。Java 为轻量级持久化提供了支持。而诸如 JDBC 和 Hibernate 这些类库为使用数据库存储和检索对象信息提供了更复杂的支持。</li></ol><h5 id="基本类型的存储"><a href="#基本类型的存储" class="headerlink" title="基本类型的存储"></a><a href="https://lingcoder.github.io/OnJava8/#/book/03-Objects-Everywhere?id=%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AD%98%E5%82%A8">基本类型的存储</a></h5><p>有一组类型在 Java 中使用频率很高，它们需要特殊对待，这就是 Java 的基本类型。之所以这么说，是因为它们的创建并不是通过 <code>new</code> 关键字来产生。通常 <code>new</code> 出来的对象都是保存在堆内存中的，以此方式创建小而简单的变量往往是不划算的。所以对于这些基本类型的创建方法，Java 使用了和 C/C++ 一样的策略。也就是说，不是使用 <code>new</code> 创建变量，而是使用一个“自动”变量。 这个变量直接存储”值”，并置于栈内存中，因此更加高效。</p><p>Java 确定了每种基本类型的内存占用大小。 这些大小不会像其他一些语言那样随着机器环境的变化而变化。这种不变性也是 Java 更具可移植性的一个原因。</p><h5 id="数组的存储"><a href="#数组的存储" class="headerlink" title="数组的存储"></a><a href="https://lingcoder.github.io/OnJava8/#/book/03-Objects-Everywhere?id=%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%98%E5%82%A8">数组的存储</a></h5><p>许多编程语言都支持数组类型。在 C 和 C++ 中使用数组是危险的，因为那些数组只是内存块。如果程序访问了内存块之外的数组或在初始化之前使用该段内存（常见编程错误），则结果是不可预测的。</p><p>Java 的设计主要目标之一是安全性，因此许多困扰 C 和 C++ 程序员的问题不会在 Java 中再现。在 Java 中，数组使用前需要被初始化，并且不能访问数组长度以外的数据。这种范围检查，是以每个数组上少量的内存开销及运行时检查下标的额外时间为代价的，但由此换来的安全性和效率的提高是值得的。（并且 Java 经常可以优化这些操作）。</p><p>当我们创建对象数组时，实际上是创建了一个引用数组，并且每个引用的初始值都为 <strong>null</strong> 。在使用该数组之前，我们必须为每个引用指定一个对象 。如果我们尝试使用为 <strong>null</strong> 的引用，则会在运行时报错。因此，在 Java 中就防止了数组操作的常规错误。</p><p>我们还可创建基本类型的数组。编译器通过将该数组的内存全部置零来保证初始化。本书稍后将详细介绍数组，特别是在数组章节中。</p><h4 id="对象清理"><a href="#对象清理" class="headerlink" title="对象清理"></a><a href="https://lingcoder.github.io/OnJava8/#/book/03-Objects-Everywhere?id=%E5%AF%B9%E8%B1%A1%E6%B8%85%E7%90%86">对象清理</a></h4><p>我们在 Java 中并没有主动清理这些对象，那么它是如何避免 C++ 中出现的内存被填满从而阻塞程序的问题呢？答案是：Java 的垃圾收集器会检查所有 <code>new</code> 出来的对象并判断哪些不再可达，继而释放那些被占用的内存，供其他新的对象使用。也就是说，我们不必担心内存回收的问题了。你只需简单创建对象即可。当其不再被需要时，能自行被垃圾收集器释放。垃圾回收机制有效防止了因程序员忘记释放内存而造成的“内存泄漏”问题。</p><h4 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a><a href="https://lingcoder.github.io/OnJava8/#/book/03-Objects-Everywhere?id=static%E5%85%B3%E9%94%AE%E5%AD%97">static关键字</a></h4><p>类是对象的外观及行为方式的描述。通常只有在使用 <code>new</code> 创建那个类的对象后，数据存储空间才被分配，对象的方法才能供外界调用。这种方式在两种情况下是不足的。</p><ol><li>有时你只想为特定字段（注：也称为属性、域）分配一个共享存储空间，而不去考虑究竟要创建多少对象，甚至根本就不创建对象。</li><li>创建一个与此类的任何对象无关的方法。也就是说，即使没有创建对象，也能调用该方法。</li></ol><p><strong>static</strong> 关键字（从 C++ 采用）就符合上述两点要求。当我们说某个事物是静态时，就意味着该字段或方法不依赖于任何特定的对象实例 。 即使我们从未创建过该类的对象，也可以调用其静态方法或访问其静态字段。相反，对于普通的非静态字段和方法，我们必须要先创建一个对象并使用该对象来访问字段或方法，因为非静态字段和方法必须与特定对象关联 <a href="https://lingcoder.github.io/OnJava8/#/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%9C%A8%E4%BD%BF%E7%94%A8%E4%B9%8B%E5%89%8D%E4%B8%8D%E9%9C%80%E8%A6%81%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%9B%A0%E6%AD%A4%E5%AE%83%E4%BB%AC%E4%B8%8D%E8%83%BD%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8%E9%9D%9E%E9%9D%99%E6%80%81%E7%9A%84%E6%88%90%E5%91%98%E6%88%96%E6%96%B9%E6%B3%95%EF%BC%88%E5%9B%A0%E4%B8%BA%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%92%8C%E6%96%B9%E6%B3%95%E5%BF%85%E9%A1%BB%E8%A6%81%E5%85%88%E5%AE%9E%E4%BE%8B%E5%8C%96%E4%B8%BA%E5%AF%B9%E8%B1%A1%E6%89%8D%E5%8F%AF%E4%BB%A5%E8%A2%AB%E4%BD%BF%E7%94%A8%EF%BC%89%E3%80%82">^6</a> 。</p><p><strong>static</strong> 关键字不能应用于局部变量，所以只能作用于属性（字段、域）。</p><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=this%E5%85%B3%E9%94%AE%E5%AD%97">this关键字</a></h4><p><strong>this</strong> 关键字只能在非静态方法内部使用。当你调用一个对象的方法时，<strong>this</strong> 生成了一个对象引用。你可以像对待其他引用一样对待这个引用。如果你在一个类的方法里调用该类的其他方法，不要使用 <strong>this</strong>，直接调用即可，<strong>this</strong> 自动地应用于其他方法上了。</p><p><strong>this</strong> 关键字只用在一些必须显式使用当前对象引用的特殊场合。</p><h4 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8">垃圾回收器</a></h4><p>使用完一个对象就不管它并非总是安全的。Java 中有垃圾回收器回收无用对象占用的内存。但现在考虑一种特殊情况：你创建的对象不是通过 <strong>new</strong> 来分配内存的，而垃圾回收器只知道如何释放用 <strong>new</strong> 创建的对象的内存，所以它不知道如何回收不是 <strong>new</strong> 分配的内存。为了处理这种情况，Java 允许在类中定义一个名为 <code>finalize()</code> 的方法。</p><p>在 Java 中，对象并非总是被垃圾回收，或者换句话说：</p><ol><li>对象可能不被垃圾回收。</li><li>垃圾回收不等同于析构。</li></ol><p>也许你会发现，只要程序没有濒临内存用完的那一刻，对象占用的空间就总也得不到释放。如果程序执行结束，而垃圾回收器一直没有释放你创建的任何对象的内存，则当程序退出时，那些资源会全部交还给操作系统。这个策略是恰当的，因为垃圾回收本身也有开销，要是不使用它，那就不用支付这部分开销了。</p><h5 id="finalize-的用途"><a href="#finalize-的用途" class="headerlink" title="finalize() 的用途"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=finalize-%E7%9A%84%E7%94%A8%E9%80%94"><code>finalize()</code> 的用途</a></h5><p>如果你不能将 <code>finalize()</code> 作为通用的清理方法，那么这个方法有什么用呢？</p><p>这引入了要记住的第3点：</p><ol><li>垃圾回收只与内存有关。</li></ol><h5 id="终结条件"><a href="#终结条件" class="headerlink" title="终结条件"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=%E7%BB%88%E7%BB%93%E6%9D%A1%E4%BB%B6">终结条件</a></h5><p>通常，不能指望 <code>finalize()</code> ，你必须创建其他的”清理”方法，并明确地调用它们。所以看起来，<code>finalize()</code> 只对大部分程序员很难用到的一些晦涩内存清理里有用了。但是，<code>finalize()</code> 还有一个有趣的用法，它不依赖于每次都要对 <code>finalize()</code> 进行调用，这就是对象终结条件的验证。</p><p>当对某个对象不感兴趣时——也就是它将被清理了，这个对象应该处于某种状态，这种状态下它占用的内存可以被安全地释放掉。例如，如果对象代表了一个打开的文件，在对象被垃圾回收之前程序员应该关闭这个文件。只要对象中存在没有被适当清理的部分，程序就存在很隐晦的 bug。<code>finalize()</code> 可以用来最终发现这个情况，尽管它并不总是被调用。如果某次 <code>finalize()</code> 的动作使得 bug 被发现，那么就可以据此找出问题所在——这才是人们真正关心的。以下是个简单的例子，示范了 <code>finalize()</code> 的可能使用方式：</p><pre class="line-numbers language-none"><code class="language-none">// housekeeping/TerminationCondition.java// Using finalize() to detect a object that// hasn't been properly cleaned upimport onjava.*;class Book {    boolean checkedOut = false;    Book(boolean checkOut) {        checkedOut = checkOut;    }    void checkIn() {        checkedOut = false;    }    @Override    protected void finalize() throws Throwable {        if (checkedOut) {            System.out.println("Error: checked out");        }        // Normally, you'll also do this:        // super.finalize(); // Call the base-class version    }}public class TerminationCondition {    public static void main(String[] args) {        Book novel = new Book(true);        // Proper cleanup:        novel.checkIn();        // Drop the reference, forget to clean up:        new Book(true);        // Force garbage collection &amp; finalization:        System.gc();        new Nap(1); // One second delay    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本例的终结条件是：所有的 <strong>Book</strong> 对象在被垃圾回收之前必须被登记。但在 <code>main()</code> 方法中，有一本书没有登记。要是没有 <code>finalize()</code> 方法来验证终结条件，将会很难发现这个 bug。</p><p>你可能注意到使用了 <code>@Override</code>。<code>@</code> 意味着这是一个注解，注解是关于代码的额外信息。在这里，该注解告诉编译器这不是偶然地重定义在每个对象中都存在的 <code>finalize()</code> 方法——程序员知道自己在做什么。编译器确保你没有拼错方法名，而且确保那个方法存在于基类中。注解也是对读者的提醒，<code>@Override</code> 在 Java 5 引入，在 Java 7 中改善，本书通篇会出现。</p><p>注意，<code>System.gc()</code> 用于强制进行终结动作。但是即使不这么做，只要重复地执行程序（假设程序将分配大量的存储空间而导致垃圾回收动作的执行），最终也能找出错误的 <strong>Book</strong> 对象。</p><p>你应该总是假设基类版本的 <code>finalize()</code> 也要做一些重要的事情，使用 <strong>super</strong> 调用它，就像在 <code>Book.finalize()</code> 中看到的那样。本例中，它被注释掉了，因为它需要进行异常处理，而我们到现在还没有涉及到。</p><h5 id="垃圾回收器如何工作"><a href="#垃圾回收器如何工作" class="headerlink" title="垃圾回收器如何工作"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C">垃圾回收器如何工作</a></h5><p>重点</p><h4 id="初始化的顺序"><a href="#初始化的顺序" class="headerlink" title="初始化的顺序"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E9%A1%BA%E5%BA%8F">初始化的顺序</a></h4><p>class初始化会先初始化全部变量值，然后再调用构造器</p><h4 id="静态数据的初始化"><a href="#静态数据的初始化" class="headerlink" title="静态数据的初始化"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96">静态数据的初始化</a></h4><p>静态数据在class初始化变量之前初始化数据，静态初始化只有在必要时刻才会进行</p><p>无论创建多少个对象，静态数据都只占用一份存储区域。<strong>static</strong> 关键字不能应用于局部变量，所以只能作用于属性（字段、域）。如果一个字段是静态的基本类型，你没有初始化它，那么它就会获得基本类型的标准初值。如果它是对象引用，那么它的默认初值就是 <strong>null</strong>。</p><p>如果在定义时进行初始化，那么静态变量看起来就跟非静态变量一样。</p><h5 id="创建对象的过程"><a href="#创建对象的过程" class="headerlink" title="创建对象的过程"></a>创建对象的过程</h5><p>创建对象的过程，假设有个名为 <strong>Dog</strong> 的类：</p><ol><li>即使没有显式地使用 <strong>static</strong> 关键字，构造器实际上也是静态方法。所以，当首次创建 <strong>Dog</strong> 类型的对象或是首次访问 <strong>Dog</strong> 类的静态方法或属性时，Java 解释器必须在类路径中查找，以定位 <strong>Dog.class</strong>。</li><li>当加载完 <strong>Dog.class</strong> 后（后面会学到，这将创建一个 <strong>Class</strong> 对象），有关静态初始化的所有动作都会执行。因此，静态初始化只会在首次加载 <strong>Class</strong> 对象时初始化一次。</li><li>当用 <code>new Dog()</code> 创建对象时，首先会在堆上为 <strong>Dog</strong> 对象分配足够的存储空间。</li><li>分配的存储空间首先会被清零，即会将 <strong>Dog</strong> 对象中的所有基本类型数据设置为默认值（数字会被置为 0，布尔型和字符型也相同），引用被置为 <strong>null</strong>。</li><li>执行所有出现在字段定义处的初始化动作。</li><li>执行构造器</li></ol><h5 id="显式的静态初始化"><a href="#显式的静态初始化" class="headerlink" title="显式的静态初始化"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=%E6%98%BE%E5%BC%8F%E7%9A%84%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96">显式的静态初始化</a></h5><p>你可以将一组静态初始化动作放在类里面一个特殊的”静态子句”（有时叫做静态块）中</p><p>与其他静态初始化动作一样，这段代码仅执行一次：当首次创建这个类的对象或首次访问这个类的静态成员（甚至不需要创建该类的对象）时。</p><h4 id="非静态实例初始化"><a href="#非静态实例初始化" class="headerlink" title="非静态实例初始化"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=%E9%9D%9E%E9%9D%99%E6%80%81%E5%AE%9E%E4%BE%8B%E5%88%9D%E5%A7%8B%E5%8C%96">非静态实例初始化</a></h4><p>Java 提供了被称为<em>实例初始化</em>的类似语法，用来初始化每个对象的非静态变量，例如：</p><pre class="line-numbers language-none"><code class="language-none">class Mug {    Mug(int marker) {        System.out.println("Mug(" + marker + ")");    }}public class Mugs {    Mug mug1;    Mug mug2;    { // [1]        mug1 = new Mug(1);        mug2 = new Mug(2);        System.out.println("mug1 &amp; mug2 initialized");    }    Mugs() {        System.out.println("Mugs()");    }    Mugs(int i) {        System.out.println("Mugs(int)");    }     public static void main(String[] args) {        System.out.println("Inside main()");        new Mugs();        System.out.println("new Mugs() completed");        new Mugs(1);        System.out.println("new Mugs(1) completed");    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">Inside mainMug(1)Mug(2)mug1 &amp; mug2 initializedMugs()new Mugs() completedMug(1)Mug(2)mug1 &amp; mug2 initializedMugs(int)new Mugs(1) completed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看起来它很像静态代码块，只不过少了 <strong>static</strong> 关键字。</p><p>他会随着类的初始化执行，会执行多次，而static只会执行一次，并保存在存储区域中</p><h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B">枚举类型</a></h4><p>Java 5 中添加了一个看似很小的特性 <strong>enum</strong> 关键字，它使得我们在需要群组并使用枚举类型集时，可以很方便地处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// housekeeping/Spiciness.java</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Spiciness</span> <span class="token punctuation">{</span>    NOT<span class="token punctuation">,</span> MILD<span class="token punctuation">,</span> MEDIUM<span class="token punctuation">,</span> HOT<span class="token punctuation">,</span> FLAMING<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里创建了一个名为 <strong>Spiciness</strong> 的枚举类型，它有5个值。由于枚举类型的实例是常量，因此按照命名惯例，它们都用大写字母表示（如果名称中含有多个单词，使用下划线分隔）。</p><p>要使用 <strong>enum</strong>，需要创建一个该类型的引用，然后将其赋值给某个实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// housekeeping/SimpleEnumUse.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleEnumUse</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Spiciness</span> howHot <span class="token operator">=</span> <span class="token class-name">Spiciness</span><span class="token punctuation">.</span>MEDIUM<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>howHot<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在你创建 <strong>enum</strong> 时，编译器会自动添加一些有用的特性。例如，它会创建 <code>toString()</code> 方法，以便你方便地显示某个 <strong>enum</strong> 实例的名称，这从上面例子中的输出可以看出。编译器还会创建 <code>ordinal()</code> 方法表示某个特定 <strong>enum</strong> 常量的声明顺序，<code>static values()</code> 方法按照 enum 常量的声明顺序，生成这些常量值构成的数组：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumOrder</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Spiciness</span> s<span class="token operator">:</span> <span class="token class-name">Spiciness</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">", ordinal "</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">NOT, ordinal 0MILD, ordinal 1MEDIUM, ordinal 2HOT, ordinal 3FLAMING, ordinal 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>enum</strong> 有一个很实用的特性，就是在 <strong>switch</strong> 语句中使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// housekeeping/Burrito.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Burrito</span> <span class="token punctuation">{</span>    <span class="token class-name">Spiciness</span> degree<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Burrito</span><span class="token punctuation">(</span><span class="token class-name">Spiciness</span> degree<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>degree <span class="token operator">=</span> degree<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"This burrito is "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>degree<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> NOT<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"not spicy at all."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MILD<span class="token operator">:</span>            <span class="token keyword">case</span> MEDIUM<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a little hot."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> HOT<span class="token operator">:</span>            <span class="token keyword">case</span> FLAMING<span class="token operator">:</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"maybe too hot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Burrito</span> plain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Burrito</span><span class="token punctuation">(</span><span class="token class-name">Spiciness</span><span class="token punctuation">.</span>NOT<span class="token punctuation">)</span><span class="token punctuation">,</span>        greenChile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Burrito</span><span class="token punctuation">(</span><span class="token class-name">Spiciness</span><span class="token punctuation">.</span>MEDIUM<span class="token punctuation">)</span><span class="token punctuation">,</span>        jalapeno <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Burrito</span><span class="token punctuation">(</span><span class="token class-name">Spiciness</span><span class="token punctuation">.</span>HOT<span class="token punctuation">)</span><span class="token punctuation">;</span>        plain<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        greenChile<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jalapeno<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>复制<span class="token class-name">ErrorOK</span><span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">This burrito is not spicy at all.This burrito is a little hot.This burrito is maybe too hot.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将数据和方法包装进类中并把具体实现隐藏被称作是<em>封装</em>（encapsulation）</p><p>访问控制通常被称为<em>隐藏实现</em>（implementation hiding）。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/zwhblog.cn/2020/01/16/linux/linux-chang-yong-ming-ling/"/>
      <url>/zwhblog.cn/2020/01/16/linux/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><h3 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h3><table><thead><tr><th align="left">命令</th><th>命令解释</th></tr></thead><tbody><tr><td align="left">cd 路径</td><td>进入到路径下面 (../返回上一级目录)</td></tr><tr><td align="left">pwd</td><td>查看当前路径</td></tr><tr><td align="left">clear</td><td>清空屏幕</td></tr><tr><td align="left">ls</td><td>查看数据列表</td></tr><tr><td align="left">ls -l</td><td>显示文件列表及详情</td></tr><tr><td align="left">ls-la</td><td>显示所有文件（包含隐藏文件</td></tr><tr><td align="left">ls-l</td><td>等于 ll</td></tr><tr><td align="left">ls -R/data0</td><td>递归显示目录中的文件列表</td></tr><tr><td align="left">uname -r</td><td>显示操作系统的发行版号</td></tr><tr><td align="left">uname -a</td><td>显示系统名、节点名称、操作系统的发行版号、操作系统版本、运行系统的机器 ID 号。</td></tr><tr><td align="left">uname -m</td><td>显示电脑类型</td></tr><tr><td align="left">cat  文件名</td><td>查看具体的文件信息，默认不显示行号</td></tr><tr><td align="left">cat -n 文件名</td><td>查看文件内容显示行号</td></tr><tr><td align="left">tail   尾部</td><td></td></tr><tr><td align="left">head   头部</td><td></td></tr><tr><td align="left">tail -n /路径</td><td>查看尾部多少行</td></tr><tr><td align="left">head -n /路径</td><td>查看头部多少行</td></tr><tr><td align="left">vim</td><td>修改文件内容或新建一个不为空的文件</td></tr><tr><td align="left">shift+:</td><td>输入 wq 保存退出  q！强制退出</td></tr><tr><td align="left">shift+dd</td><td>删除此行</td></tr><tr><td align="left">shift+zz</td><td>保存退出 等同于 wq</td></tr><tr><td align="left">touch</td><td>可以新建一个空的文件</td></tr><tr><td align="left">poweroff</td><td>关机</td></tr><tr><td align="left">reboot</td><td>重启机器</td></tr><tr><td align="left">mkdir  路径</td><td>创建一个空的文件夹</td></tr></tbody></table><h4 id="Linux常用命令-1"><a href="#Linux常用命令-1" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h4><table><thead><tr><th>序号</th><th>命令</th><th>命令解释</th></tr></thead><tbody><tr><td>1</td><td>top</td><td>查看内存</td></tr><tr><td>2</td><td>df -h</td><td>查看磁盘存储情况</td></tr><tr><td>3</td><td>iotop</td><td>查看磁盘IO读写(yum install iotop安装）</td></tr><tr><td>4</td><td>iotop -o</td><td>直接查看比较高的磁盘读写程序</td></tr><tr><td>5</td><td>netstat -tunlp | grep 端口号</td><td>查看端口占用情况</td></tr><tr><td>6</td><td>uptime</td><td>查看报告系统运行时长及平均负载</td></tr><tr><td>7</td><td>ps aux</td><td>查看进程</td></tr></tbody></table><h3 id="Linux添加用户"><a href="#Linux添加用户" class="headerlink" title="Linux添加用户"></a>Linux添加用户</h3><p>useradd  添加用户 </p><p>自定义： 创建用户自定义<br>自定义用户信息：<br>    -u    指定uid<br>    -g    指定基本组    —-》基本组也存在<br>    -G    指定附加组 —–》附加组存在<br>Groups 用户名 ：查看这个用户所属的用户组（所有组）</p><p>useradd openlab   add</p><p>gpasswd -a openlab gropenlab  //将用户加入到组中  加入的附加组</p><p>gpasswd -d openlab gropenlab    //将用户从组中删除 删除的附加组 </p><p>userdel     //删除用户 不删除用户文件 </p><p>userdel -r //连主目录一起删除</p><p>id openlab  //显示用户信息 </p><p>Passwd:修改密码<br>cat /etc/shadow   查看用户密码 密码是乱码说明有密码<br>cat /etc/passwd   前面的用户的数字必须大于等于500和后面必须是/bin/bash此账号才能够登录</p><p>保存用户信息的文件：/etc/passwd</p><p>用户名 密码 UID GID 描述信息 宿主目录 执行脚本(bin/bash)</p><p>0    root</p><p>1-499   系统用户</p><p>500以上才能够使用</p><p>保存密码的文件：/etc/shadow<br>保存用户组的文件：/etc/group<br>保存用户组密码的文件：/etc/shadow<br>用户配置文件：/etc/default/useradd</p><h3 id="Linux修改主机名称"><a href="#Linux修改主机名称" class="headerlink" title="Linux修改主机名称"></a>Linux修改主机名称</h3><p>hostname   查看主机名<br>hostname name 临时改变主机名<br>在etc下面修改/etc/sysconfig/network文件 可以达到永久修改主机名称的目的 </p><h3 id="Linux时间查看和设置"><a href="#Linux时间查看和设置" class="headerlink" title="Linux时间查看和设置"></a>Linux时间查看和设置</h3><p>date     查看系统当前时间<br>date -s “2015-05-05 15:00:15” 设置当前系统时间</p><h3 id="Linux网卡查看"><a href="#Linux网卡查看" class="headerlink" title="Linux网卡查看"></a>Linux网卡查看</h3><p>ifconfig    查看当前网卡信息 （有eth0和io两个）</p><p>修改网卡信息</p><p><img src="/zwhblog.cn/2020/01/16/linux/linux-chang-yong-ming-ling/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565691729973.png" alt="1565691729973"></p><p><img src="/zwhblog.cn/2020/01/16/linux/linux-chang-yong-ming-ling/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565691740313.png" alt="1565691740313"></p><p>克隆的机器要删除70-persistent-net.rules第一行(eth0)，把eth1变成eth0,然后复制物理地址 </p><p>为了方便后续写代码，把window端的host文件也修改了 </p><p>C:\Windows\System32\drivers\etc\hosts</p><pre class="line-numbers language-none"><code class="language-none">192.168.237.10 linux01192.168.237.11 linux02192.168.237.12 linux03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Linux-copy、移动和删除文件"><a href="#Linux-copy、移动和删除文件" class="headerlink" title="Linux copy、移动和删除文件"></a>Linux copy、移动和删除文件</h3><p>cp /路径  /路径  复制文件 </p><p>移动，剪切，重命名<br>    23.1 mv / 文件 文件夹<br>    23.2 mv / 文件<br>    23.4 mv /原文件地址文件名称 /新文件名称</p><p>删除<br>rm     删除文件<br>rm -rf 强制删除 删除文件和文件夹</p><h3 id="Linux-gt-gt-gt-重定向"><a href="#Linux-gt-gt-gt-重定向" class="headerlink" title="Linux >,>>重定向"></a>Linux &gt;,&gt;&gt;重定向</h3><pre class="line-numbers language-none"><code class="language-none">&gt;重定向 先清空内容再进行添加内容 例: ls -l root&gt;tmp/file1.txt&gt;&gt;追加新的内容，旧的内容不会消除例: ls -l root&gt;&gt;tmp/file1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Linux解压"><a href="#Linux解压" class="headerlink" title="Linux解压"></a>Linux解压</h3><p>tar -zxvf 包名</p><h3 id="Linux防火墙"><a href="#Linux防火墙" class="headerlink" title="Linux防火墙"></a>Linux防火墙</h3><p>关闭虚拟机的防火墙<br>service iptables stop<br>重启配置文件<br>service network restart<br>查看防火墙状态<br>service iptables status<br>永久关闭防火墙（在临时关闭防火墙的基础之上的）<br>chkconfig iptables off </p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>ctrl+r 查找历史输过的的命令<br>tab    补全代码</p><p>linux find 模糊查找文件（名称，大小，时间，新旧）</p><p><a href="http://www.51gjie.com/linux/1024.html">http://www.51gjie.com/linux/1024.html</a></p><pre class="line-numbers language-none"><code class="language-none">//查找 profile 名称的 大于1M 处理时间1天之前更改过的  文件 sudo find / -name profile -size 1M -ctime +1 -type f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
