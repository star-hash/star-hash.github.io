<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Cloud组件说明</title>
      <link href="2021/01/25/spring/spring-cloud/spring-cloud/"/>
      <url>2021/01/25/spring/spring-cloud/spring-cloud/</url>
      
        <content type="html"><![CDATA[<p>官方文档：<a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></p><h2 id="什么是Spring-Cloud？"><a href="#什么是Spring-Cloud？" class="headerlink" title="什么是Spring Cloud？"></a>什么是Spring Cloud？</h2><p>Spring Cloud为开发人员提供了工具，以快速构建分布式系统中的某些常见模式（例如，配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁，领导选举，分布式会话，群集状态）。分布式系统的协调导致样板式样，并且使用Spring Cloud开发人员可以快速站起来实现这些样板的服务和应用程序。它们可以在任何分布式环境中正常工作，包括开发人员自己的笔记本电脑，裸机数据中心以及Cloud Foundry等托管平台。</p><h2 id="项目服务组件"><a href="#项目服务组件" class="headerlink" title="项目服务组件"></a>项目服务组件</h2><p>Spring Cloud专注于为典型的用例和可扩展性机制（包括其他用例）提供良好的开箱即用体验。</p><ul><li>分布式/版本化配置</li><li>服务注册和发现</li><li>路由</li><li>服务到服务的呼叫</li><li>负载均衡</li><li>断路器</li><li>全局锁</li><li>领导选举和集群状态</li><li>分布式消息传递</li></ul><h2 id="Spring-Cloud-的版本"><a href="#Spring-Cloud-的版本" class="headerlink" title="Spring Cloud 的版本"></a>Spring Cloud 的版本</h2><p>Spring Cloud 的版本号并不是我们通常见的数字版本号，而是一些很奇怪的单词。这些单词均为英国伦敦地铁站的站名。同时根据字母表的顺序来对应版本时间顺序，比如：最早 的 Release 版本 Angel，第二个 Release 版本 Brixton（英国地名），然后是 Camden、 Dalston、Edgware、Finchley、Greenwich、Hoxton。</p><p>SpringCloud和SpringBoot的对应版本在官方文档有</p><h2 id="Spring-Cloud-的服务发现框架"><a href="#Spring-Cloud-的服务发现框架" class="headerlink" title="Spring Cloud 的服务发现框架"></a>Spring Cloud 的服务发现框架</h2><p><strong>服务发现</strong>：其实就是一个“中介”，整个过程中有三个角色：**服务提供者(出租房子的)、服务消费者(租客)、服务中介(房屋中介)**。</p><p><strong>服务提供者</strong>： 就是提供一些自己能够执行的一些服务给外界。</p><p><strong>服务消费者</strong>： 就是需要使用一些服务的“用户”。</p><p><strong>服务中介</strong>： 其实就是服务提供者和服务消费者之间的“桥梁”，服务提供者可以把自己注册到服务中介那里，而服务消费者如需要消费一些服务(使用一些功能)就可以在服务中介中寻找注册在服务中介的服务提供者。</p><h3 id="1、服务注册中心"><a href="#1、服务注册中心" class="headerlink" title="1、服务注册中心"></a>1、服务注册中心</h3><h4 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h4><p>Eureka官网上已经停止了更新原来的架构，可以替换成zookeeper、Consul。</p><p>主管服务注册的组件。</p><h4 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h4><p>可以在技术不发生大改变的情况下替换掉Eureka</p><h4 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h4><p>也可以替换掉EureKa，使用go语言编写的，但是不建议使用</p><h4 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h4><p>阿里巴巴旗下的产品，替换Eureka的主要组件。</p><h3 id="2、服务负载和调用"><a href="#2、服务负载和调用" class="headerlink" title="2、服务负载和调用"></a>2、服务负载和调用</h3><h4 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h4><p>Ribbon官方进入了维护状态，已经停止了更新。提供了负载均衡的组件</p><h4 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h4><p>LoadBalancer是未来替换Ribbon的组件，官方已经声明了，但是还没出来。</p><h3 id="3、服务调用2"><a href="#3、服务调用2" class="headerlink" title="3、服务调用2"></a>3、服务调用2</h3><h4 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h4><p>官方已经不更新了，而且技术上已经不在使用。</p><h4 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h4><p>openFeign是Spring自己的组件，替换掉了Feign。</p><h3 id="4、服务降级"><a href="#4、服务降级" class="headerlink" title="4、服务降级"></a>4、服务降级</h3><h4 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h4><p>Spring Cloud自带的服务降级和熔断框架，国内正在大规模使用，但是官网不建议使用，未来会被取代，不建议使用。</p><h4 id="resilience4j"><a href="#resilience4j" class="headerlink" title="resilience4j"></a>resilience4j</h4><p>国外用的多，国内用的很少</p><h4 id="Alibaba-Sentinel"><a href="#Alibaba-Sentinel" class="headerlink" title="Alibaba Sentinel"></a>Alibaba Sentinel</h4><p>阿里旗下的实现<code>熔断和限流</code>的组件，建议使用</p><h3 id="5、服务网关"><a href="#5、服务网关" class="headerlink" title="5、服务网关"></a>5、服务网关</h3><h4 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h4><p>网关来进行服务的协调，但是这个组件已经不再使用</p><h4 id="gateway"><a href="#gateway" class="headerlink" title="gateway"></a>gateway</h4><p>Spring Cloud 推荐的网关服务组件，建议使用。着重的接触这个组件</p><h3 id="6、服务配置"><a href="#6、服务配置" class="headerlink" title="6、服务配置"></a>6、服务配置</h3><h4 id="Config"><a href="#Config" class="headerlink" title="Config"></a><a href="https://spring.io/projects/spring-cloud-config">Config</a></h4><p>之前使用的是Config，现在不建议使用了</p><p>Spring Cloud Config为分布式系统中的外部化配置提供服务器和客户端支持。使用Config Server，您可以集中管理所有环境中应用程序的外部属性。客户端和服务器上的概念与SpringEnvironment和PropertySource抽象，因此它们非常适合Spring应用程序，但可以与以任何语言运行的任何应用程序一起使用。当应用程序从开发人员迁移到测试人员并进入生产过程时，您可以管理这些环境之间的配置，并确保应用程序具有迁移时所需的一切。服务器存储后端的默认实现使用git，因此它轻松支持配置环境的标记版本，并且可以通过各种工具来访问这些内容来管理内容。添加替代实现并将其插入Spring配置很容易。</p><h4 id="apollo"><a href="#apollo" class="headerlink" title="apollo"></a>apollo</h4><p>不推荐使用，使用的很少</p><h4 id="Nacos-1"><a href="#Nacos-1" class="headerlink" title="Nacos"></a>Nacos</h4><p>阿里旗下的服务配置组件，后来居上，这里主要使用的组件</p><h3 id="7、服务总线"><a href="#7、服务总线" class="headerlink" title="7、服务总线"></a>7、服务总线</h3><h4 id="Bus"><a href="#Bus" class="headerlink" title="Bus"></a><a href="https://spring.io/projects/spring-cloud-bus">Bus</a></h4><p>Spring Cloud原生的组件，可以使用</p><h4 id="Nacos-2"><a href="#Nacos-2" class="headerlink" title="Nacos"></a>Nacos</h4><p>阿里巴巴旗下的，建议使用。Nacos有服务注册中心，服务配置和服务总线组建的合成</p><h3 id="Spring-Cloud-Netflix"><a href="#Spring-Cloud-Netflix" class="headerlink" title="Spring Cloud Netflix"></a><a href="https://spring.io/projects/spring-cloud-netflix">Spring Cloud Netflix</a></h3><p>与各种Netflix OSS组件（Eureka，Hystrix，Zuul，Archaius等）集成。</p><h3 id="Spring-Cloud-Bus"><a href="#Spring-Cloud-Bus" class="headerlink" title="Spring Cloud Bus"></a><a href="https://spring.io/projects/spring-cloud-bus">Spring Cloud Bus</a></h3>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud学习笔记</title>
      <link href="2021/01/25/spring/spring-cloud/springcloud-xue-xi-bi-ji/"/>
      <url>2021/01/25/spring/spring-cloud/springcloud-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Cloud项目环境搭建流程"><a href="#Spring-Cloud项目环境搭建流程" class="headerlink" title="Spring Cloud项目环境搭建流程"></a>Spring Cloud项目环境搭建流程</h2><p>建module，修改pom，写yml</p><p>更改配置，编码字符集，开启注解支持(如果还是不行那就需要安装lombak的插件)，文件过滤，java版本选择，文件过滤后缀设置</p><ol><li>首先建立就一个Spring项目，写入pom文件，cloud和boot的版本要对应上。</li></ol><h3 id="Spring-Boot-Cloud-版本选择"><a href="#Spring-Boot-Cloud-版本选择" class="headerlink" title="Spring Boot/Cloud 版本选择"></a>Spring Boot/Cloud 版本选择</h3><p>Spring Boot 选择2.0以后的版本<br>Java8以上的版本支持，这个项目是SpringBoot 2.3.4</p><p>Spring版本是 <code>A~I开头</code> 的，伦敦地铁站的名称，这个项目使用的是H版本。</p><p><img src="/2021/01/25/spring/spring-cloud/springcloud-xue-xi-bi-ji/image-20210125092647507-1611574568377.png" alt="image-20210125092647507"></p><p>在建立完成后，删除他们src和.mvn目录，resource也不用，只保留pom文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.exercise.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud2020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--这里只有父类设置成pom，默认是jar，还有war--&gt;</span>    <span class="token comment">&lt;!--pom 项目里没有java代码，也不执行任何代码，只是为了聚合工程或传递依赖用的。--&gt;</span>    <span class="token comment">&lt;!--jar 内部调用或者是作服务使用，默认的类型--&gt;</span>    <span class="token comment">&lt;!--war 部署项目--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>cloud-provider-payment8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>eurekaexercise<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>cloud-consumer-order80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--统一管理jar包版本--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.cloud.version</span><span class="token punctuation">&gt;</span></span>Hoxton.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.cloud.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.boot.version</span><span class="token punctuation">&gt;</span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.boot.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">&gt;</span></span>1.18.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">&gt;</span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>8.0.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">&gt;</span></span>1.1.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--版本管理器，并不会真正引入jar包，子模块引用jar包时不需要指定版本号--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-project-info-reports-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--spring boot 2.2.2--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--spring cloud 阿里巴巴--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--mysql--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- druid--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${druid.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--mybatis--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mybatis.spring.boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--junit--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--log4j--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父项目pom文件配置</p><ol><li>packaging设置成pom，来让子项目继承，在打包项目的时候将会见子模块包含到需要的项目中。不要使用jar</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;packaging&gt;pom&lt;/packaging&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/01/25/spring/spring-cloud/springcloud-xue-xi-bi-ji/image-20210125101650137.png" alt="image-20210125101650137"></p><ol start="2"><li>删除src文件夹等</li><li>在父项目中配置你的版本号和插件</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.exercise.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud2020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>cloud-provider-payment8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>eurekaexercise<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>cloud-consumer-order80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--统一管理jar包版本--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.cloud.version</span><span class="token punctuation">&gt;</span></span>Hoxton.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.cloud.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.boot.version</span><span class="token punctuation">&gt;</span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.boot.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">&gt;</span></span>1.18.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">&gt;</span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>8.0.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">&gt;</span></span>1.1.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--maven的版本管理器，让子项目引用依赖时不用在指定版本号，只是声明，并不会引入--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-project-info-reports-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--spring boot 2.2.2--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--spring cloud 阿里巴巴--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--mysql--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- druid--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${druid.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--mybatis--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mybatis.spring.boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--junit--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--log4j--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/01/25/spring/spring-cloud/springcloud-xue-xi-bi-ji/image-20210125093742067.png" alt="image-20210125093742067"></p><h2 id="开启热部署功能"><a href="#开启热部署功能" class="headerlink" title="开启热部署功能"></a>开启热部署功能</h2><p>1、导入devtools的包</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--热部署--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;    &lt;scope&gt;runtime&lt;/scope&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、进行idea设置</p><p><img src="/2021/01/25/spring/spring-cloud/springcloud-xue-xi-bi-ji/image-20210125142842401.png" alt="image-20210125142842401"></p><p>开启改变项目时重构项目</p><p>3、配置idea</p><p>ctrl+alt+shift+/</p><p><img src="/2021/01/25/spring/spring-cloud/springcloud-xue-xi-bi-ji/image-20210125143309330.png" alt="image-20210125143309330"></p><p><img src="/2021/01/25/spring/spring-cloud/springcloud-xue-xi-bi-ji/image-20210125143324213.png" alt="image-20210125143324213"></p><h2 id="什么是Eureka"><a href="#什么是Eureka" class="headerlink" title="什么是Eureka"></a>什么是Eureka</h2><p>什么是服务治理？</p><h3 id="什么是服务注册与发现？"><a href="#什么是服务注册与发现？" class="headerlink" title="什么是服务注册与发现？"></a>什么是服务注册与发现？</h3><p>Eureka采用了CS的设计架构，Eureka Server 作为服务注册功能的服务器。而系统的其他微服务，使用Eureka客户端连接到了Eureka Server 并维持心跳链接。这蓝系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常运行。</p><p>在服务注册与发现中，有一个注册中心。当服务器启动时，会把当前自己的服务器信息，比如 服务地址通讯地址等以及别名方式注册到注册到注册中心上。另一方（消费者|服务提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的依赖关系（服务治理概念）。在任何RPC远程框架中，都会有一个注册中心（存放服务地址相关信息（接口地址））</p><h3 id="Eureka和Dubbo的对比"><a href="#Eureka和Dubbo的对比" class="headerlink" title="Eureka和Dubbo的对比"></a>Eureka和Dubbo的对比</h3><p><img src="/2021/01/25/spring/spring-cloud/springcloud-xue-xi-bi-ji/image-20210125192449469.png" alt="image-20210125192449469"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql不常用命令总结</title>
      <link href="2021/01/20/mysql/mysql-bu-chang-yong-ming-ling/"/>
      <url>2021/01/20/mysql/mysql-bu-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql不常用命令总结"><a href="#Mysql不常用命令总结" class="headerlink" title="Mysql不常用命令总结"></a>Mysql不常用命令总结</h1><p>本文总结的不是Mysql8的语法，都是mysql8.0以下版本语法</p><p>数据库操作分类：</p><pre class="line-numbers language-none"><code class="language-none">DDL:数据定义语言 用于创建和删除数据库对象等操作 (create drop alter)DML：数据操作语言 用来操作数据库中所包含的数据(insert update delete)DQL：数据查询语言 对数据库中的数据进行查询(select)DCL：数据控制语言 控制数据库组件的存取许可，存取权限等(grant revoke commit rollback)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mysql连接"><a href="#mysql连接" class="headerlink" title="mysql连接"></a>mysql连接</h2><pre class="line-numbers language-none"><code class="language-none">mysql -h110.110.110.110 -u root -p 123;mysql -h 节点 -u 用户 -p 密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h2><p>1、create user </p><pre class="line-numbers language-none"><code class="language-none">create user 'test'@'%'identified by '123456';flush privileges;//create user 'username'@'登录权限' identified by 'password';create user '用户名'@'指定的ip地址' identified by '密码';-&gt;用户只能在指定的ip地址登录 create user '用户名'@'%' identified by '密码'-&gt;用户只能在任意的ip地址登录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="给用户授权"><a href="#给用户授权" class="headerlink" title="给用户授权:"></a>给用户授权:</h2><p>grant命令可以用来新增用户和修改用户密码、权限</p><p>下面的写法mysql8.0已经不支持了</p><pre class="line-numbers language-none"><code class="language-none">//第一种方式，部分授权的方式grant select,insert,update,delete on *.* to [email=test1@”%]test1@”%[/email]” Identified by “abc”;flush privileges;//第二种方式，授予全部的特权grant all privileges on *.* to 'test'@'%' identified by 'root' with grant option;flush privileges;//grant privileges select on 数据库.数据库对象 to 用户名@登录主机 identified by '密码'//如果不想用户有密码，可以将identified by ''设置为空来取消密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>grant 参数说明：</p><pre class="line-numbers language-none"><code class="language-none">GRANT privilege [, ...] ON object [, ...] TO { PUBLIC | GROUP group | username }有privilege代表了全部的权限，在不写privilege的时候写指定的权限可能的权限有：SELECT访问声明的表/视图的所有列/字段．INSERT向声明的表中插入所有列字段．UPDATE更新声明的表所有列/字段．DELETE从声明的表中删除所有行．RULE在表/视图上定义规则 （参见 CREATE RULE 语句）．ALL赋予所有权限．object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="回收权限"><a href="#回收权限" class="headerlink" title="回收权限:"></a>回收权限:</h2><pre class="line-numbers language-none"><code class="language-none">revoke 权限1,权限2,......权限n  on 数据库.* from  '用户名'@'ip地址';revoke all on *.* from '用户名'@'ip地址'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查看用户权限"><a href="#查看用户权限" class="headerlink" title="查看用户权限:"></a>查看用户权限:</h2><pre class="line-numbers language-none"><code class="language-none">show grants for '用户名'@'ip地址'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><p>1、delete </p><pre class="line-numbers language-none"><code class="language-none">delete from user where user='test' and host='%';flush privileges;//delete from user where user='username' and host='%'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、drop user</p><pre class="line-numbers language-none"><code class="language-none">DROP USER 'test'@'localhost';flush privileges;//drop user 'username'@'登陆权限'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看当前登录的用户"><a href="#查看当前登录的用户" class="headerlink" title="查看当前登录的用户"></a>查看当前登录的用户</h2><pre class="line-numbers language-none"><code class="language-none">select user();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>1、已过期方式：</p><p>下列命令在Mysql5.6.5中无法识别</p><pre class="line-numbers language-none"><code class="language-none">mysqladmin -u root -password ab12//第一次root没有密码，给root用户添加密码为ab12mysqladmin -u root -p ab12 password djg345//现在root有密码 修改密码为djg345//mysqladmin -u用户名 -p旧密码 password 新密码flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、set password</p><pre class="line-numbers language-none"><code class="language-none">set password for 'test'@'%' = '123456'//set password for 用户名@localhost = password('新密码');  //但是设置密码要求更新的密码是加密后的哈希值flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、update 修改表</p><pre class="line-numbers language-none"><code class="language-none">update user set password=password('123456') where user='test' and host='%';  flush privileges;//直接更新mysql数据库的表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h2><p>当你执行 RENAME 时，你不能有任何锁定的表或活动的事务。你同样也必须有对原初表的 ALTER 和 DROP 权限，以及对新表的 CREATE 和 INSERT 权限。</p><p>RENAME TABLE 在 MySQL 3.23.23 中被加入。</p><p>1、alter table</p><pre class="line-numbers language-none"><code class="language-none">alter table ts01 rename to ts01_new; alter table ts01 rename as ts01_new; //修改表名的语法:alter table rename to/as new_tablename;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、rename table</p><pre class="line-numbers language-none"><code class="language-none">//rename table tableoldname to tablenewname;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="设置字段默认值"><a href="#设置字段默认值" class="headerlink" title="设置字段默认值"></a>设置字段默认值</h2><pre class="line-numbers language-none"><code class="language-none">alter table 表名 add 字段 数据类型 default ‘默认值内容’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="设置字段自增"><a href="#设置字段自增" class="headerlink" title="设置字段自增"></a>设置字段自增</h2><pre class="line-numbers language-none"><code class="language-none">alter table 表名 modify 字段 数据类型 auto_increment;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="添加约束"><a href="#添加约束" class="headerlink" title="添加约束"></a>添加约束</h2><pre class="line-numbers language-none"><code class="language-none">alter table 表名 add constraint 约束名 约束类型 具体的约束说明ALTER TABLE 子表名称  ADD CONSTRAINT  约束名  Foreign  key(子表字段名称) references  主表名称(主键字段名称)主键 primary key 约束  pk_唯一 unique key 约束 UQ_默认 default key 约束 DF_检查 check key 约束 CK_外键 foreign key 约束 FK_CASCADE：父表delete、update的时候，子表会delete、update掉关联记录；SET NULL：父表delete、update的时候，子表会将关联记录的外键字段所在列设为null，所以注意在设计子表时外键不能设为not null；RESTRICT：如果想要删除父表的记录时，而在子表中有关联该父表的记录，则不允许删除父表中的记录；NO ACTION：同 RESTRICT，也是首先先检查外键；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加非空约束"><a href="#添加非空约束" class="headerlink" title="添加非空约束"></a>添加非空约束</h3><blockquote><p>用not null约束的字段不能为null值，必须给定具体的数据</p></blockquote><pre class="line-numbers language-none"><code class="language-none">create table t_user(id int(10),name varchar(32) not null);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加主键约束"><a href="#添加主键约束" class="headerlink" title="添加主键约束"></a>添加主键约束</h3><blockquote><p>给某个字段添加主键约束之后，该字段不能重复也不能为空，效果和”not null unique”约束相同，但是本质不同。</p></blockquote><blockquote><p>主键约束除了可以做到”not null unique”之外，还会默认添加”索引——index”</p></blockquote><ul><li>主键涉及术语<br>主键约束<br>主键字段<br>主键值</li></ul><pre class="line-numbers language-none"><code class="language-none">alter table 表名 add constraint 约束名 Primary key (字段名称);1. alter table 表名 add primary key(主键字段);2. alter table 表名 modify 主键字段 数据类型 primary key;3. alter table 表名 change 主键字段 主键字段 数据类型 primary key;添加复合主键alter table 表名 add primary key(主键字段1,主键字段2);删除主键alter table 表名 drop primary key;//主键 primary key 约束  pk_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加唯一约束"><a href="#添加唯一约束" class="headerlink" title="添加唯一约束"></a>添加唯一约束</h3><blockquote><p>unique约束的字段，具有唯一性，不可重复，但可以为null</p></blockquote><pre class="line-numbers language-none"><code class="language-none">alter table 表名 add constraint 约束名 UNIQUE (字段名称);//唯一 unique key 约束 UQ_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="添加检查约束"><a href="#添加检查约束" class="headerlink" title="添加检查约束"></a>添加检查约束</h3><pre class="line-numbers language-none"><code class="language-none">alter table 表名 add constraint 约束名 check (检查条件);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="添加外键约束"><a href="#添加外键约束" class="headerlink" title="添加外键约束"></a>添加外键约束</h3><ul><li>外键涉及到的术语<br>外键约束<br>外键字段<br>外键值</li></ul><pre class="line-numbers language-none"><code class="language-none">alter table 表名 add constraint 约束名 foreign key (子字段名称)references 主表名称 (主键字段名称);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p> 事务特性：独立性(隔离性) 持久性 原子性 一致性</p><pre class="line-numbers language-none"><code class="language-none">开始事务beginstart transaction;提交事务commit 回滚(撤销)事务rollback;set autocommit = 0/1;0 关闭自动提交1 开启自动提交 关闭自动提交后，从下一条SQL语句开始则开启新事务，需使用COMMIT或ROLLBACK语句结束该事务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="增加表中某一列"><a href="#增加表中某一列" class="headerlink" title="增加表中某一列"></a>增加表中某一列</h2><pre class="line-numbers language-none"><code class="language-none">alter table 表名 add 列名 列类型 列参数 [加的列在表的最后面]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h2><p>Mysql中数据备份使用的命令是:<strong><em>\</em>mysqldump**</strong>命令将数据库中的数据备份成一个<strong>文本文件</strong>。表的结构和表中的数据将存储在生成的文本文件中。</p><p>mysqldump不要再mysql中执行，要在外部执行</p><p><img src="/2021/01/20/mysql/mysql-bu-chang-yong-ming-ling/image-20210119133604603.png" alt="image-20210119133604603"></p><p>1、导出一整个数据库</p><pre class="line-numbers language-none"><code class="language-none">mysqldump -u test -p test &gt; test.sql//mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、导出一个表</p><pre class="line-numbers language-none"><code class="language-none">mysqldump -u test -p testaa testtable &gt; test.sql//mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、备份多个数据库</p><pre class="line-numbers language-none"><code class="language-none">mysqldump -u root -h host -p --databases dbname1, dbname2 &gt; backdb.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、备份所有数据库</p><pre class="line-numbers language-none"><code class="language-none">mysqldump -u root -h host -p --all-databases &gt; backdb.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用-sql文件"><a href="#使用-sql文件" class="headerlink" title="使用.sql文件"></a>使用.sql文件</h2><p>1、在外部使用</p><p><img src="/2021/01/20/mysql/mysql-bu-chang-yong-ming-ling/image-20210119134733857.png" alt="image-20210119134733857"></p><pre class="line-numbers language-none"><code class="language-none">mysql -u root -p 123456 &lt; /test.sql如果出错有提示，不出错就什么也没有<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、在Mysql命令行使用</p><p><img src="/2021/01/20/mysql/mysql-bu-chang-yong-ming-ling/image-20210119134547594.png" alt="image-20210119134547594"></p><pre class="line-numbers language-none"><code class="language-none">source .sql文件地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建数据库规则"><a href="#创建数据库规则" class="headerlink" title="创建数据库规则"></a>创建数据库规则</h2><p> （Rule）规则 就是数据库中对存储在表的列或用户自定义数据类型中的值的规定和限制。规则是单独存储的独立的数据库对象。规则与其作用的表或用户自定义数据类型是相互独立的，即表或用户自定义对象的删除、修改不会对与之相连的规则产生影响。规则和约束可以同时使用，表的列可以有一个规则及多个CHECK 约束。规则与CHECK 约束很相似，相比之下，使用在ALTERTABLE 或CREATE TABLE 命令中的CHECK 约束是更标准的限制列值的方法，但CHECK 约束不能直接作用于用户自定义数据类型。</p><pre class="line-numbers language-none"><code class="language-none">CREATE RULE rule_name AS condition_expression其中condition_expression 子句是规则的定义。condition_expression 子句可以是能用于 WHERE 条件子句中的任何表达式，它可以包含算术运算符、关系运算符和谓词（如IN、LIKE、 BETWEEN 等）。注意：condition_expression子句中的表达式必须以字符“@”开头。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDH的搭建</title>
      <link href="2021/01/18/cdh/centos7-chi-xian-an-zhuang-cdh5.16-ji-qun/"/>
      <url>2021/01/18/cdh/centos7-chi-xian-an-zhuang-cdh5.16-ji-qun/</url>
      
        <content type="html"><![CDATA[<p>手里有三台服务器，每台16内存，磁盘大小100G，搭建CDH集群<br>版本如下：</p><blockquote><p>Centos7.6.1810<br>Mysql5.6.50<br>Cloudera-manager5.16.2</p></blockquote><p>本文参考了网络上的CDH安装的文章<br><a href="https://blog.csdn.net/czz1141979570/article/details/86658416">https://blog.csdn.net/czz1141979570/article/details/86658416)</a><br><a href="https://blog.csdn.net/weixin_40079336/article/details/86648553">https://blog.csdn.net/weixin_40079336/article/details/86648553</a><br><a href="https://blog.csdn.net/u012448904/article/details/103702433">https://blog.csdn.net/u012448904/article/details/103702433</a><br><a href="https://yq.aliyun.com/articles/341408">https://yq.aliyun.com/articles/341408</a><br>以及自己搭建时遇到的一些问题，进行说明</p><h1 id="搭建CDH过程："><a href="#搭建CDH过程：" class="headerlink" title="搭建CDH过程："></a>搭建CDH过程：</h1><blockquote><p>这里前提是默认已经配置好centos的ip，关闭防火墙，ssh免疫，ntp同步，hosts映射和连接外网等一些配置了<br>因为服务器上的是最小化安装，什么都没带，自己还得安装很多东西，个人安装centos时不推荐最小化安装</p></blockquote><p>安装使用的root用户来安装</p><h2 id="1、-安装JDK"><a href="#1、-安装JDK" class="headerlink" title="1、 安装JDK"></a>1、 安装JDK</h2><p>安装jdk1.8以上版本，安装的目录<strong>必须</strong>要在/usr/java下面，因为CDH默认会从这里找<br>第一次安装时我安装在/opt下面，CDH会报错 检测不到jdk</p><p>查看机器是否自带jdk，进行卸载</p><pre class="line-numbers language-none"><code class="language-none">1.创建这个文件夹，存放jdkmkdir -p /usr/java/jdk1.8tar -zxvf jdk-8u161-linux-x64.tar.gz -C  /usr/java/必须存放在这个目录，否则后期机器默认找不到jdk，还得手动指定，挺麻烦的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">1.配置环境变量vim /etc/profile    2./etc/profile中添加下面配置项export JAVA_HOME=/usr/java/jdk1.8export CLASSPATH=.:${JAVA_HOME}/jre/lib/rt.jar:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jarexport PATH=$PATH:${JAVA_HOME}/bin3.刷新环境变量使配置立即生效    source /etc/profile    4.检查JDK是否配置成功    java -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、安装Mysql"><a href="#2、安装Mysql" class="headerlink" title="2、安装Mysql"></a>2、安装Mysql</h2><p>先安装Mysql，CHD集群的初始化数据和后续的组件(hive，oozie，cm的监控器和hue)的数据都会存放到Mysql中</p><pre class="line-numbers language-none"><code class="language-none">1、先查看linux是否带有mariadbrpm -qa|grep -i mariadb2、 卸载mariadbrpm -e --nodeps mariadb-libs3、如果之前安装过mysql，需要卸载干净rpm -qa |grep -i mysqlyum remove  **********find / -name mysqlrm -rf rm -rf /etc/my.cnfrm -rf /var/log/mysqld.log4、安装mysqlyum install mysqlyum install mysql-serveryum install mysql-devel这里安装mysql-server时可能会报错，这里我安装的是Mysql5.6.5，可以通过select version();查看可以参考下面https://www.cnblogs.com/yowamushi/p/8043054.html安装完成后启动mysql服务，首次没有密码service mysql startmysql##注意点，网上查找的mysql赋值语句可能因为Mysql版本的问题导致不支持。5、//首先更改root的密码update user set Password = password('123456') where user='root';   //查看用户密码和权限select host, user, authentication_string, plugin from user;    //刷新权限，下次登陆就使用'123456'flush privileges;6、开启远程登录grant all privileges on *.* to 'root'@'%' identified by '123456' with grant option;FLUSH PRIVILEGES;//grant 赋值的权限(这里是全部特权) on 授权的数据库 to 在任何主机上登录 密码为 '123456' 查看当前数据库的用户配置：7、授权root用户在主节点拥有所有数据库的访问权限grant all privileges on *.* to 'root'@'hadoop1' identified by '123456' with grant option;//这里是赋值了root本地登录权限8、创建数据库#hivecreate database hive DEFAULT CHARSET utf8 COLLATE utf8_general_ci; #activity monitorcreate database amon DEFAULT CHARSET utf8 COLLATE utf8_general_ci; #huecreate database hue DEFAULT CHARSET utf8 COLLATE utf8_general_ci; #ooziecreate database oozie DEFAULT CHARSET utf8 COLLATE utf8_general_ci;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果Mysql因为权限配置问题导致无法登录问题，处理方法：</p><pre class="line-numbers language-none"><code class="language-none">//关闭Mysql服务systemctl stop mysqld//修改my.cnf文件vim /etc/my.cnf//新增内容skip-grant-tables #添加这句话，这时候登入mysql就不需要密码symbolic-links=0//然后再开启Mysql服务，这时候登陆就不需要密码了修改完数据库之后，再重新启动Mysql服务service mysqld start # 启动mysql服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、安装依赖-所有机器"><a href="#3、安装依赖-所有机器" class="headerlink" title="3、安装依赖(所有机器)"></a>3、安装依赖(所有机器)</h2><p>CDH安装需要python的依赖，我没有安装，之后报错了，需要提前安装</p><pre class="line-numbers language-yum" data-language="yum"><code class="language-yum">yum -y install chkconfig python bind-utils psmisc libxslt zlib sqlite cyrus-sasl-plain cyrus-sasl-gssapi fuse fuse-libs redhat-lsb httpd mod_ssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4、CM下载"><a href="#4、CM下载" class="headerlink" title="4、CM下载"></a>4、CM下载</h2><p>  CM下载地址：<a href="http://archive.cloudera.com/cm5/cm/5/">http://archive.cloudera.com/cm5/cm/5/</a><br>  <img src="/2021/01/18/cdh/centos7-chi-xian-an-zhuang-cdh5.16-ji-qun/20201103105948599.png" alt="CM下载界面"><br>  下载完毕后上传，解压到/opt下面，解压后会生成两个文件夹cloudera和cm-5.16.2</p><pre class="line-numbers language-none"><code class="language-none">tar -zxvf /opt/software/cloudera-manager-centos7-cm5.16.2_x86_64.tar.gz  -C /opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5、添加系统用户-所有机器"><a href="#5、添加系统用户-所有机器" class="headerlink" title="5、添加系统用户(所有机器)"></a>5、添加系统用户(所有机器)</h2><p><code>cloudera-scm</code>用户是CM的配置文件中的系统默认用户，新建这个名称的用户就不用修改CM的配置文件了，是最简单的方式</p><pre class="line-numbers language-none"><code class="language-none">useradd --system --home=/opt/module/cloudera-manager/cm-5.12.1/run/cloudera-scm-server --no-create-home --shell=/bin/false --comment "Cloudera SCM User" cloudera-scm//Cloudera Manager默认用户为cloudera-scm，安装完成后，将自动使用此用户。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6、配置-opt-cloudera-manager-cm-5-16-2-etc-cloudera-scm-agent-config-ini"><a href="#6、配置-opt-cloudera-manager-cm-5-16-2-etc-cloudera-scm-agent-config-ini" class="headerlink" title="6、配置/opt/cloudera-manager/cm-5.16.2/etc/cloudera-scm-agent/ config.ini"></a>6、配置/opt/cloudera-manager/cm-5.16.2/etc/cloudera-scm-agent/ config.ini</h2><p>server_host改成主节点名称，server_port不用动</p><pre class="line-numbers language-none"><code class="language-none">vim /opt/cloudera-manager/cm-5.16.2/etc/cloudera-scm-agent/ config.ini[General]# Hostname of the CM server.server_host=hadoop1# Port that the CM server is listening on.server_port=7182<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、获取mysql的连接包"><a href="#7、获取mysql的连接包" class="headerlink" title="7、获取mysql的连接包"></a>7、获取mysql的连接包</h2><p>我这里用的是mysql5.1.28的连接包<br>下载地址：<a href="https://downloads.mysql.com/archives/get/p/3/file/mysql-connector-java-5.1.28.tar.gz">https://downloads.mysql.com/archives/get/p/3/file/mysql-connector-java-5.1.28.tar.gz</a></p><p>这里我并没有修改jar包的名称，网上说需要修改名称变为 <code>mysql-connector-java.jar</code></p><pre class="line-numbers language-none"><code class="language-none">cp /opt/software/mysql-connector-java-5.1.28/mysql-connector-java-5.1.28-bin.jar /opt/cm-5.16.2cm/share/cmf/lib/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将mysql连接的包放到这个/cm/share/cmf/lib目录下<br>网上两种方案存放这个包，一种是放在/usr/java/，一种是存放在/cm-5.16.2/share/cmf/lib/</p><p>这里经过这几天，证明只用放在/cm-5.16.2/share/cmf/lib/即可</p><h2 id="8、分发解压后的文件到其他节点上"><a href="#8、分发解压后的文件到其他节点上" class="headerlink" title="8、分发解压后的文件到其他节点上"></a>8、分发解压后的文件到其他节点上</h2><pre class="line-numbers language-none"><code class="language-none">scp -r cm5.16.2 hadoop2:/opt/scp -r cm5.16.2 hadoop3:/opt/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>传过去文件确认一下你的权限</p><pre class="line-numbers language-none"><code class="language-none">//给传过去的文件赋值给cloudera-scm用户chown -R cloudera-scm:cloudera-scm /opt/cm5.16.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="9、初始化CM数据库"><a href="#9、初始化CM数据库" class="headerlink" title="9、初始化CM数据库"></a>9、初始化CM数据库</h2><pre class="line-numbers language-none"><code class="language-none">/opt/cm-5.16.2/share/cmf/schema/scm_prepare_database.sh mysql cm -h hadoop1 -u root -p 123456 --scm-host localhost scm scm scm//这里的scm用户，数据库中如果没有它会自动创建此用户，所以前面没有新建立用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是数据库初始化语句，scm用户会在mysql冲初始化一个cm的数据库</p><p>如果初始化失败，还发现本地mysql登陆不成功等问题，可以在修改/etc/my.conf文件</p><p>进入mysql后修改mysql数据库的user表</p><blockquote><p>参考文章：</p><p><a href="https://blog.csdn.net/weixin_40079336/article/details/86648553">https://blog.csdn.net/weixin_40079336/article/details/86648553</a><br><img src="/2021/01/18/cdh/centos7-chi-xian-an-zhuang-cdh5.16-ji-qun/20190125162936470.png" alt="初始化cm数据库的语句含义"></p></blockquote><pre class="line-numbers language-none"><code class="language-none">//这里并没有使用root用来初始化，使用的scm用户，root用户的配置只是为了未来方便root的远程操作如果已经增加权限还是不能登录可使用下面语句，执行完是结果是user表会增加记录，mysql的user表条数有12条//这里的grant 语句可以用来新增用户或者调整用户的权限和密码grant all privileges on *.* to 'root'@'localhost' identified by '123456' with grant option;grant all privileges on *.* to 'root'@'hadoop1' identified by '123456' with grant option;grant all privileges on *.* to 'root'@'127*.*0*.*0*.*1' identified by '123456' with grant option;grant all privileges on *.* to 'root'@'%' identified by '123456' with grant option;grant all privileges on *.* to 'scm'@'localhost' identified by 'scm' with grant option;grant all privileges on *.* to 'scm'@'hadoop1' identified by 'scm' with grant option;grant all privileges on *.* to 'scm'@'127*.*0*.*0*.*1' identified by 'scm' with grant option;grant all privileges on *.* to 'scm'@'%' identified by 'scm' with grant option;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10、CDH离线包下载"><a href="#10、CDH离线包下载" class="headerlink" title="10、CDH离线包下载"></a>10、CDH离线包下载</h2><p>这里的版本跟你的CM版本对应上，后面的el，指的是Centos的版本，这里是7，所以选择el7</p><p><a href="http://archive.cloudera.com/cdh5/parcels/latest/">http://archive.cloudera.com/cdh5/parcels/latest/</a></p><p><img src="/2021/01/18/cdh/centos7-chi-xian-an-zhuang-cdh5.16-ji-qun/20201103103318108.png" alt="CDH下载内容"><br>下载三个文件</p><h2 id="11、创建Parcel-repo-目录（主节点操作）"><a href="#11、创建Parcel-repo-目录（主节点操作）" class="headerlink" title="11、创建Parcel-repo 目录（主节点操作）"></a>11、创建Parcel-repo 目录（主节点操作）</h2><pre class="line-numbers language-none"><code class="language-none">mkdir -p /opt/cloudera/parcel-repochown -R cloudera-scm:cloudera-scm /opt/cloudera/parcel-repo/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>将下载好的3个CDH文件放到parcel-repo这个目录中</code></p><p>SPARK2-2.4.0.cloudera2-1.cdh5.13.3.p0.1041012-el7.parcel.sha1</p><p>需要改名</p><p>SPARK2-2.4.0.cloudera2-1.cdh5.13.3.p0.1041012-el7.parcel.sha</p><p>把1去掉就行了</p><h2 id="12、所有节点创建parcels目录-所有节点"><a href="#12、所有节点创建parcels目录-所有节点" class="headerlink" title="12、所有节点创建parcels目录(所有节点)"></a>12、所有节点创建parcels目录(所有节点)</h2><pre class="line-numbers language-none"><code class="language-none">mkdir -p /opt/cloudera/parcelschown -R cloudera-scm:cloudera-scm /opt/cloudera/parcels<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="13、启动CM服务"><a href="#13、启动CM服务" class="headerlink" title="13、启动CM服务"></a>13、启动CM服务</h2><pre class="line-numbers language-none"><code class="language-none">hadoop1:/opt/cloudera-manager/cm-5.16.2/etc/init.d/cloudera-scm-server start/opt/cloudera-manager/cm-5.16.2/etc/init.d/cloudera-scm-agent starthadoop2:/opt/cloudera-manager/cm-5.16.2/etc/init.d/cloudera-scm-agent starthadoop3:/opt/cloudera-manager/cm-5.16.2/etc/init.d/cloudera-scm-agent start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14、访问WebUI"><a href="#14、访问WebUI" class="headerlink" title="14、访问WebUI"></a>14、访问WebUI</h2><pre class="line-numbers language-none"><code class="language-none">hadoop1:7180<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动命令后等一会，会有个启动过程，可能比较慢，到这里应该就能正常访问了，默认的用户名和密码都是<code>admin</code><br>进去添加服务组件，配置他们的节点位置和他们的存储目录</p><p>也可以点击集群-&gt;操作-&gt;添加服务<br><img src="/2021/01/18/cdh/centos7-chi-xian-an-zhuang-cdh5.16-ji-qun/20201106092122174.png" alt="在这里插入图片描述"></p><p>到此，CDH安装完成，文章有不足之处还请告知<br>CDH安装遇到问题可以参考以下连接<br><a href="https://blog.csdn.net/BalaBalaYi/article/details/76904274">https://blog.csdn.net/BalaBalaYi/article/details/76904274</a><br><a href="https://blog.csdn.net/qq_39680564/article/details/100013275">https://blog.csdn.net/qq_39680564/article/details/100013275</a></p>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK的安装</title>
      <link href="2021/01/18/elk/elasticsearch7.10-an-zhuang/"/>
      <url>2021/01/18/elk/elasticsearch7.10-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="下载es的包"><a href="#下载es的包" class="headerlink" title="下载es的包"></a>下载es的包</h2><p>官网地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><h2 id="解压es包"><a href="#解压es包" class="headerlink" title="解压es包"></a>解压es包</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tar -zxvf elasticsearch-7.10.0-linux-x86_64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h2><p>进入解压完毕后的包，查看目录，进入到config目录下，修改<code>elasticsearch.yml</code>文件<br><img src="https://img-blog.csdnimg.cn/20201130142309621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201130142429381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="启动es"><a href="#启动es" class="headerlink" title="启动es"></a>启动es</h2><p>按照上图修改完毕后，<strong>切换到非root用户</strong>，然后启动es</p><pre class="line-numbers language-none"><code class="language-none">bin/elasticsearch命令行启动bin/elasticsearch -d后台启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>可以访问ip:9200<br>查看返回值，返回下方返回值就正确</p><pre class="line-numbers language-none"><code class="language-none">{    "name": "node-1",    "cluster_name": "my-application",    "cluster_uuid": "9R_huW9yRcmGpH-fIcioAQ",    "version": {        "number": "7.10.0",        "build_flavor": "default",        "build_type": "tar",        "build_hash": "51e9d6f22758d0374a0f3f5c6e8f3a7997850f96",        "build_date": "2020-11-09T21:30:33.964949Z",        "build_snapshot": false,        "lucene_version": "8.7.0",        "minimum_wire_compatibility_version": "6.8.0",        "minimum_index_compatibility_version": "6.0.0-beta1"    },    "tagline": "You Know, for Search"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关闭es"><a href="#关闭es" class="headerlink" title="关闭es"></a>关闭es</h2><pre class="line-numbers language-none"><code class="language-none">命令行启动的  退出时就关闭了后台启动的可以查询进程  来关闭进程ps -ef | grep elasticsearchkill -9 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Azkaban的学习笔记</title>
      <link href="2021/01/16/azkaban/azkaban/"/>
      <url>2021/01/16/azkaban/azkaban/</url>
      
        <content type="html"><![CDATA[<h2 id="Azkaban"><a href="#Azkaban" class="headerlink" title="Azkaban"></a>Azkaban</h2><h3 id="azkaban是什么"><a href="#azkaban是什么" class="headerlink" title="azkaban是什么"></a>azkaban是什么</h3><p>linkedin公司推出的一个<strong>批量工作流任务调度器</strong>，主要用在一个工作流内以一个特定的顺序运行一组工作和流程，配置是通过key：value对的形式，通过配置中的dependencies来设置依赖关系，Azkaban使用job配置文件建立任务之间的依赖关系，并提供一个易于使用的web用户界面维护和跟踪你的工作流</p><p>azkaban只支持mysql，需安装mysql服务器，在已安装好mysql服务器，建立root用户和密码</p>]]></content>
      
      
      <categories>
          
          <category> Azkaban </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Azkaban </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDH5.16卸载</title>
      <link href="2021/01/16/cdh/cdh5.16-xie-zai/"/>
      <url>2021/01/16/cdh/cdh5.16-xie-zai/</url>
      
        <content type="html"><![CDATA[<p>集群卸载，因为一些搞不定的问题，所以卸载重装一遍</p><p>本文参考<br><a href="https://blog.csdn.net/weixin_35852328/article/details/81774627">https://blog.csdn.net/weixin_35852328/article/details/81774627</a></p><h2 id="1、停掉你的所有服务，包括cm"><a href="#1、停掉你的所有服务，包括cm" class="headerlink" title="1、停掉你的所有服务，包括cm"></a>1、停掉你的所有服务，包括cm</h2><p><img src="https://img-blog.csdnimg.cn/2020110609233197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201106092615880.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2、停止完毕服务后，把之前安装的parcel的包-停用-删除"><a href="#2、停止完毕服务后，把之前安装的parcel的包-停用-删除" class="headerlink" title="2、停止完毕服务后，把之前安装的parcel的包 停用-删除"></a>2、停止完毕服务后，把之前安装的parcel的包 停用-删除</h2><p><img src="https://img-blog.csdnimg.cn/20201106092948211.png#pic_center" alt="在这里插入图片描述"><br>下面的图是开头博主的图<br><img src="https://img-blog.csdnimg.cn/20201106093025338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="3、删除你的cluster"><a href="#3、删除你的cluster" class="headerlink" title="3、删除你的cluster"></a>3、删除你的cluster</h2><p><img src="https://img-blog.csdnimg.cn/20201106093201361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="4、停止你的进程"><a href="#4、停止你的进程" class="headerlink" title="4、停止你的进程"></a>4、停止你的进程</h2><pre class="line-numbers language-none"><code class="language-none">/opt/cm-5.16.2/etc/init.d/cloudera-scm-server stop/opt/cm-5.16.2/etc/init.d/cloudera-scm-agent stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5、查看又没有相关的进程"><a href="#5、查看又没有相关的进程" class="headerlink" title="5、查看又没有相关的进程"></a>5、查看又没有相关的进程</h2><pre class="line-numbers language-none"><code class="language-none">ps -ef |grep clouderakill 掉查出来的进程信息ps -ef | grep supervisordkill 掉查出来的进程信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、开始删除你的配置文件"><a href="#6、开始删除你的配置文件" class="headerlink" title="6、开始删除你的配置文件"></a>6、开始删除你的配置文件</h2><pre class="line-numbers language-none"><code class="language-none">rm -rf /var/lib/flume-ng /var/lib/hadoop* /var/lib/hue  /var/lib/navigator /var/lib/oozie /var/lib/solr /var/lib/sqoop*  /var/lib/zookeeper /var/lib/kudu /var/lib/kafka/ /var/lib/impala/ /var/lib/cloudera-scm-*rm -rf /etc/cloudera*umount /opt/cm-5.16.2/run/cloudera-scm-agent/process  rm -rf /var/run/hdfs-socketsrm -rf /usr/lib/huerm -rf /usr/bin/hadoop* /usr/bin/zookeeper* /usr/bin/hbase* /usr/bin/hive* /usr/bin/hdfs /usr/bin/mapred /usr/bin/yarn /usr/bin/sqoop* /usr/bin/oozie /usr/bin/impala /usr/bin/spark*rm -rf /etc/alternatives/hadoop* /etc/alternatives/flume-ng* /etc/alternatives/hbase* /etc/alternatives/hdfs /etc/alternatives/hive* /etc/alternatives/hue* /etc/alternatives/impala* /etc/alternatives/mahout* /etc/alternatives/mapred /etc/alternatives/oozie /etc/alternatives/pig* /etc/alternatives/solr* /etc/alternatives/spark* /etc/alternatives/sqoop* /etc/alternatives/yarn /etc/alternatives/zookeeper*rm -rf /var/cloudera-scm-serverrm -rf /var/lib/cloudera* /var/lib/yarn*rm -rf /dfsrm -rf /tmp/.scm_prepare_node.lockrm -rf /opt/cloudera/rm -rf /opt/cm-5.16.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除和卸载他们的相关数据和日志以及源文件存放的位置</p><pre class="line-numbers language-none"><code class="language-none">//下面是CDH的目录的说明/var/lib/cloudera-scm-server-db/data : 内嵌数据库目录。/etc/cloudera-scm-agent/ : agent的配置目录。/etc/cloudera-scm-server/ : server的配置目录。/var/run下面Hadoop生成的文件/var/log/cloudera-scm-installer : 安装日志目录。/var/log/* : 相关日志文件（相关服务的及CM的）。/usr/share/cmf/ : 程序安装目录。/usr/lib64/cmf/ : Agent程序代码。/usr/bin/postgres : 内嵌数据库程序。/opt/cloudera/parcels/ : Hadoop相关服务安装目录。/opt/cloudera/parcel-repo/ : 下载的服务软件包数据，数据格式为parcels。/opt/cloudera/parcel-cache/ : 下载的服务软件包缓存数据。/etc/hadoop/* : 客户端配置文件目录。/dfs:hadoop格式化的目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、-Mysql"><a href="#7、-Mysql" class="headerlink" title="7、 Mysql"></a>7、 Mysql</h2><p>mysql我的话没有遇到问题，也没有重新安装<br>如果只要要重新安装在mysql没有问题的情况下不需要动mysql，只需要把mysql的中的cm数据库和其他amon,oozie,hue和hive数据库删除就行</p><p>下面是删除数据库的过程</p><pre class="line-numbers language-none"><code class="language-none">service mysql stopps -ef |grep mysqlkill pidrpm -qa |grep -i mysqlyum remove  **********find / -name mysqlrm -rf rm -rf /etc/my.cnfrm -rf /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是说明的步骤和执行哪些，下面是整体需要执行的语句</p><pre class="line-numbers language-none"><code class="language-none">rm -rf /var/lib/flume-ng /var/lib/hadoop* /var/lib/hue  /var/lib/navigator /var/lib/oozie /var/lib/solr /var/lib/sqoop*  /var/lib/zookeeper /var/lib/kudu /var/lib/kafka/ /var/lib/impala/ /var/lib/cloudera-scm-*rm -rf /etc/cloudera*umount /opt/cm-5.16.2/run/cloudera-scm-agent/process  rm -rf /var/run/hdfs-socketsrm -rf /usr/lib/huerm -rf /usr/bin/hadoop* /usr/bin/zookeeper* /usr/bin/hbase* /usr/bin/hive* /usr/bin/hdfs /usr/bin/mapred /usr/bin/yarn /usr/bin/sqoop* /usr/bin/oozie /usr/bin/impala /usr/bin/spark*rm -rf /etc/alternatives/hadoop* /etc/alternatives/flume-ng* /etc/alternatives/hbase* /etc/alternatives/hdfs /etc/alternatives/hive* /etc/alternatives/hue* /etc/alternatives/impala* /etc/alternatives/mahout* /etc/alternatives/mapred /etc/alternatives/oozie /etc/alternatives/pig* /etc/alternatives/solr* /etc/alternatives/spark* /etc/alternatives/sqoop* /etc/alternatives/yarn /etc/alternatives/zookeeper*rm -rf /var/cloudera-scm-serverrm -rf /var/lib/cloudera* /var/lib/yarn*rm -rf /dfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kibana的安装</title>
      <link href="2021/01/16/elk/kibana7.10.0-an-zhuang/"/>
      <url>2021/01/16/elk/kibana7.10.0-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p><strong>Kibana，数据可视化平台</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>官网地址: <a href="https://www.elastic.co/cn/downloads/kibana">https://www.elastic.co/cn/downloads/kibana</a></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tar -zxvf kibana-7.10.0-linux-x86_64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置-kibana-home"><a href="#配置-kibana-home" class="headerlink" title="配置  kibana_home"></a>配置  kibana_home</h2><p>config/kibana.yml<br><img src="https://img-blog.csdnimg.cn/2020113014380215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="启动kibana"><a href="#启动kibana" class="headerlink" title="启动kibana"></a>启动kibana</h2><p>完成上面配置后，进行启动</p><pre class="line-numbers language-none"><code class="language-none">bin/kibana后台启动：bin/kibana &amp;启动后等待一段时间这里报错，不影响使用，他在重复入值的时报的错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201130144217995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> Kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kibana报：Driver class &#39;org.gjt.mm.mysql.Driver&#39; could not be found</title>
      <link href="2021/01/16/elk/kettle-an-zhuang-wan-bao-cuo-driver-class-org.gjt.mm.mysql.driver-could-not-be-found/"/>
      <url>2021/01/16/elk/kettle-an-zhuang-wan-bao-cuo-driver-class-org.gjt.mm.mysql.driver-could-not-be-found/</url>
      
        <content type="html"><![CDATA[<p>今天安装Kettle使用，下载解压到本地后双击<code>Spoon.bat</code> 打开应用<br>首先测试连接Mysql，但是报错，这时候知道他没有需要的Connection包，到Mysql官网下载后，这里我的Mysql是8.0.22的，下载的也是connect也是8.0.22的包<br>下载解压这个包之后<br><img src="https://img-blog.csdnimg.cn/20201124162623149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>把这个包放入到  <code> pdi-ce-8.2.0.0-342\data-integration\lib</code>    目录下<br>再次启动<br>还是报错，感觉没什么变化，还是依旧</p><p>仔细查看报错内容，发现要  ‘org.gjt.mm.mysql.Driver’  这个驱动</p><pre class="line-numbers language-none"><code class="language-none">Driver class 'org.gjt.mm.mysql.Driver' could not be found, make sure the 'MySQL' driver (jar file) is installed.org.gjt.mm.mysql.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个包在新版本中是没有的，而在老版本中有<br>Mysql官网下载5.1.49的connect包，解压后<br><img src="https://img-blog.csdnimg.cn/20201124162956846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>可以看到两个connect的包，把这两个都放入到 <code> pdi-ce-8.2.0.0-342\data-integration\lib</code>  目录下，重新启动kettle，再次尝试连接MySQL服务，成功！</p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> Kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kylin学习笔记</title>
      <link href="2021/01/16/kylin/kylin/"/>
      <url>2021/01/16/kylin/kylin/</url>
      
        <content type="html"><![CDATA[<h1 id="Kylin"><a href="#Kylin" class="headerlink" title="Kylin"></a>Kylin</h1><p>这里没有详细学习和使用，官方文档中文很友好，就没有做笔记</p><p>官方文档地址：(<a href="http://kylin.apache.org/cn/docs/">http://kylin.apache.org/cn/docs/</a>)</p>]]></content>
      
      
      <categories>
          
          <category> Kylin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kylin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql分库分表</title>
      <link href="2021/01/16/mysql/mysql-fen-ku-fen-biao/"/>
      <url>2021/01/16/mysql/mysql-fen-ku-fen-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要分库分表？"><a href="#为什么要分库分表？" class="headerlink" title="为什么要分库分表？"></a>为什么要分库分表？</h1><p><strong>原文链接</strong>：<a href="https://juejin.im/post/6844903992909103117">原文链接</a> </p><p>我没有用过分库分表，靠着这篇博客了解的</p><p>关系型数据库本身比较容易成为系统瓶颈，单机存储容量、连接数、处理能力都有限。当单表的数据量达到1000W或100G以后，由于查询维度较多，即使添加从库、优化索引，做很多操作时性能仍下降严重。此时就要考虑对其进行切分了，切分的目的就在于减少数据库的负担，缩短查询时间。</p><p>而切分数据库和表的方式就两种，垂直切分和水平切分</p><h1 id="数据库瓶颈产生原因和解决办法"><a href="#数据库瓶颈产生原因和解决办法" class="headerlink" title="数据库瓶颈产生原因和解决办法"></a>数据库瓶颈产生原因和解决办法</h1><p>不管是IO瓶颈还是CPU瓶颈，最终都会导致数据库的活跃连接数增加，进而逼近甚至达到数据库可承载的活跃连接数的阈值。在业务service来看， 就是可用数据库连接少甚至无连接可用，接下来就可以想象了（并发量、吞吐量、崩溃）。</p><h2 id="IO瓶颈"><a href="#IO瓶颈" class="headerlink" title="IO瓶颈"></a>IO瓶颈</h2><p>第一种：</p><p>磁盘读IO瓶颈，热点数据太多，数据库缓存放不下，每次查询会产生大量的IO，降低查询速度-&gt;分库和垂直分表</p><p>第二种：</p><p>网络IO瓶颈，请求的数据太多，网络带宽不够 -&gt;分库</p><h2 id="CPU瓶颈"><a href="#CPU瓶颈" class="headerlink" title="CPU瓶颈"></a>CPU瓶颈</h2><p>第一种：</p><p>SQl问题：如SQL中包含join,group by, order by，非索引字段条件查询等，增加CPU运算的操作-&gt;SQL优化，建立合适的索引，在业务Service层进行业务计算。</p><p>第二种：</p><p>单表数据量太大，查询时扫描的行太多，SQl效率低，增加CPU运算的操作。-&gt;水平分表。</p><h1 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h1><h2 id="水平分库"><a href="#水平分库" class="headerlink" title="水平分库"></a>水平分库</h2><p><img src="https://img-blog.csdnimg.cn/20201111123353102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>一张表的数据通过不同的分发策略发送到不同的数据库中</p><ul><li>两个数据库中的表结构完全一致</li><li>他们的数据完全不同</li><li>两个库中的所有数据的并集是全部的数据</li></ul><p>适用场景：<br>库多了，并发就上去了，解决了你的并发量问题</p><h2 id="垂直分库"><a href="#垂直分库" class="headerlink" title="垂直分库"></a>垂直分库</h2><p><img src="https://img-blog.csdnimg.cn/20201111124105338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>根据表中业务的不同来进行划分不同字段到不同的库中</p><ul><li>每个库中表结构都不同</li><li>每个库中数据和字段不一样</li><li>所有库的并集是全量数据</li></ul><p>适用场景：</p><p>划分成多个库，提高了并发度，并且需要按照业务模块划分到不同表中</p><p>表中业务模块都定义好的情况下，才能够使用，否则后期使用是灾难</p><h2 id="水平分表"><a href="#水平分表" class="headerlink" title="水平分表"></a>水平分表</h2><p><img src="https://img-blog.csdnimg.cn/20201111124945960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>将一张表的数据按照某种策略拆分到多个表中</p><ul><li>每个表的字段结构都相同</li><li>每个表的数据不一样</li><li>所有表的并集是全部的数据</li></ul><p>适用场景：</p><p>系统并发量没有到瓶颈，就是单表数据过多，导致查询缓慢，加重了CPU的负担，这种情况可以使用水平分表</p><h2 id="垂直分表"><a href="#垂直分表" class="headerlink" title="垂直分表"></a>垂直分表</h2><p><img src="https://img-blog.csdnimg.cn/2020111112551481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>将一张表的字段按照字段的活跃性拆分到不同的表中</p><ul><li>每个表的字段结构不一样</li><li>每个表的数据没有相同的，但是会有一个交集，通常是一个主键，用于关联数据</li><li>所有表的并集是全部的数据</li></ul><p>适用场景：</p><p>并发量没有上来，表的记录并不多，但是字段多，并且热点数据和非热点数据在一起，单行数据所需的存储空间较大，以至于数据库缓存的数据行减少，查询时回去读磁盘数据产生大量随机读IO，产生IO瓶颈。<br>总结就是，字段太多，查询时产生大量io，产生io瓶颈，导致查询慢，可以使用这种方式</p><h2 id="分库分表工具"><a href="#分库分表工具" class="headerlink" title="分库分表工具"></a>分库分表工具</h2><ol><li>List item</li><li>sharding-jdbc（当当）</li><li>TSharding（蘑菇街）</li><li>Atlas（奇虎360）</li><li>Cobar（阿里巴巴）</li><li>MyCAT（基于Cobar）</li><li>Oceanus（58同城）</li><li>Vitess（谷歌） 各种工具的利弊自查</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 关系型数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql分库分表带来的问题</title>
      <link href="2021/01/16/mysql/shu-ju-ku-fen-ku-fen-biao-ke-neng-chan-sheng-de-wen-ti/"/>
      <url>2021/01/16/mysql/shu-ju-ku-fen-ku-fen-biao-ke-neng-chan-sheng-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>原文链接：<a href="https://juejin.im/post/6844903992909103117">https://juejin.im/post/6844903992909103117</a></p><h1 id="分库分表带来的问题"><a href="#分库分表带来的问题" class="headerlink" title="分库分表带来的问题"></a>分库分表带来的问题</h1><p>分库分表能有效缓解单机和单表带来的性能瓶颈和压力，突破网络IO、硬件资源、连接数的瓶颈，同时也带来一些问题，下面将描述这些问题和解决思路。</p><h2 id="事务一致性问题"><a href="#事务一致性问题" class="headerlink" title="事务一致性问题"></a>事务一致性问题</h2><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p>当更新内容同时存在于不同库找那个，不可避免会带来跨库事务问题。跨分片事务也是分布式事务，没有简单的方案，一般可使用“XA协议”和“两阶段提交”处理。<br>分布式事务能最大限度保证了数据库操作的原子性。但在提交事务时需要协调多个节点，推后了提交事务的时间点，延长了事务的执行时间，导致事务在访问共享资源时发生冲突或死锁的概率增高。随着数据库节点的增多，这种趋势会越来越严重，从而成为系统在数据库层面上水平扩展的枷锁。</p><h3 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h3><p>对于那些性能要求很高，但对一致性要求不高的系统，往往不苛求系统的实时一致性，只要在允许的时间段内达到最终一致性即可，可采用事务补偿的方式。与事务在执行中发生错误立刻回滚的方式不同，事务补偿是一种事后检查补救的措施，一些常见的实现方法有：对数据进行对账检查，基于日志进行对比，定期同标准数据来源进行同步等。</p><h2 id="跨节点关联查询join问题"><a href="#跨节点关联查询join问题" class="headerlink" title="跨节点关联查询join问题"></a>跨节点关联查询join问题</h2><p>切分之前，系统中很多列表和详情表的数据可以通过join来完成，但是切分之后，数据可能分布在不同的节点上，此时join带来的问题就比较麻烦了，考虑到性能，尽量避免使用Join查询。解决的一些方法：</p><h3 id="全局表"><a href="#全局表" class="headerlink" title="全局表"></a>全局表</h3><p>全局表，也可看做“数据字典表”，就是系统中所有模块都可能依赖的一些表，为了避免库join查询，可以将这类表在每个数据库中都保存一份。这些数据通常很少修改，所以不必担心一致性的问题。</p><h3 id="字段冗余"><a href="#字段冗余" class="headerlink" title="字段冗余"></a>字段冗余</h3><p>一种典型的反范式设计，利用空间换时间，为了性能而避免join查询。例如，订单表在保存userId的时候，也将userName也冗余的保存一份，这样查询订单详情顺表就可以查到用户名userName，就不用查询买家user表了。但这种方法适用场景也有限，比较适用依赖字段比较少的情况，而冗余字段的一致性也较难保证。</p><h3 id="数据组装"><a href="#数据组装" class="headerlink" title="数据组装"></a>数据组装</h3><p>在系统service业务层面，分两次查询，第一次查询的结果集找出关联的数据id，然后根据id发起器二次请求得到关联数据，最后将获得的结果进行字段组装。这是比较常用的方法。</p><h3 id="ER分片"><a href="#ER分片" class="headerlink" title="ER分片"></a>ER分片</h3><p>关系型数据库中，如果已经确定了表之间的关联关系（如订单表和订单详情表），并且将那些存在关联关系的表记录存放在同一个分片上，那么就能较好地避免跨分片join的问题，可以在一个分片内进行join。在1:1或1：n的情况下，通常按照主表的ID进行主键切分。</p><h2 id="跨节点分页、排序、函数问题"><a href="#跨节点分页、排序、函数问题" class="headerlink" title="跨节点分页、排序、函数问题"></a>跨节点分页、排序、函数问题</h2><p>跨节点多库进行查询时，会出现limit分页、order by 排序等问题。分页需要按照指定字段进行排序，当排序字段就是分页字段时，通过分片规则就比较容易定位到指定的分片；当排序字段非分片字段时，就变得比较复杂.需要先在不同的分片节点中将数据进行排序并返回，然后将不同分片返回的结果集进行汇总和再次排序，最终返回给用户如下图：<br><img src="https://img-blog.csdnimg.cn/2020111113254786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>上图只是取第一页的数据，对性能影响还不是很大。但是如果取得页数很大，情况就变得复杂的多，因为各分片节点中的数据可能是随机的，为了排序的准确性，需要将所有节点的前N页数据都排序好做合并，最后再进行整体排序，这样的操作很耗费CPU和内存资源，所以页数越大，系统性能就会越差。<br>在使用Max、Min、Sum、Count之类的函数进行计算的时候，也需要先在每个分片上执行相应的函数，然后将各个分片的结果集进行汇总再次计算。</p><h2 id="全局主键避重问题"><a href="#全局主键避重问题" class="headerlink" title="全局主键避重问题"></a>全局主键避重问题</h2><p>在分库分表环境中，由于表中数据同时存在不同数据库中，主键值平时使用的自增长将无用武之地，某个分区数据库自生成ID无法保证全局唯一。因此需要单独设计全局主键，避免跨库主键重复问题。这里有一些策略：</p><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><p>UUID标准形式是32个16进制数字，分为5段，形式是8-4-4-4-12的36个字符。UUID是最简单的方案，本地生成，性能高，没有网络耗时，但是缺点明显，占用存储空间多，另外作为主键建立索引和基于索引进行查询都存在性能问题，尤其是InnoDb引擎下，UUID的无序性会导致索引位置频繁变动，导致分页。</p><h3 id="结合数据库维护主键ID表"><a href="#结合数据库维护主键ID表" class="headerlink" title="结合数据库维护主键ID表"></a>结合数据库维护主键ID表</h3><p>在数据库中建立sequence表：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE `sequence` (    `id` bigint(20) unsigned NOT NULL auto_increment,    `stub` char(1) NOT NULL default '',    PRIMARY KEY  (`id`),    UNIQUE KEY `stub` (`stub`)  ) ENGINE=MyISAM;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>stub字段设置为唯一索引，同一stub值在sequence表中只有一条记录，可以同时为多张表生辰全局ID。使用MyISAM引擎而不是InnoDb，已获得更高的性能。MyISAM使用的是表锁，对表的读写是串行的，所以不用担心并发时两次读取同一个ID。当需要全局唯一的ID时，执行：</p><pre class="line-numbers language-none"><code class="language-none">REPLACE INTO sequence (stub) VALUES ('a');  SELECT 1561439;  SELECT LAST_INSERT_ID();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此方案较为简单，但缺点较为明显：存在单点问题，强依赖DB，当DB异常时，整个系统不可用。配置主从可以增加<br>可用性。另外性能瓶颈限制在单台Mysql的读写性能。</p><p>另有一种主键生成策略，类似sequence表方案，更好的解决了单点和性能瓶颈问题。这一方案的整体思想是：建立2个以上的全局ID生成的服务器，每个服务器上只部署一个数据库，每个库有一张sequence表用于记录当前全局ID。表中增长的步长是库的数量，起始值依次错开，这样就能将ID的生成散列到各个数据库上<br><img src="https://img-blog.csdnimg.cn/20201111132949571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>这种方案将生成ID的压力均匀分布在两台机器上，同时提供了系统容错，第一台出现了错误，可以自动切换到第二台获取ID。但有几个缺点：系统添加机器，水平扩展较复杂；每次获取ID都要读取一次DB，DB的压力还是很大，只能通过堆机器来提升性能。</p><h2 id="Snowflake分布式自增ID算法"><a href="#Snowflake分布式自增ID算法" class="headerlink" title="Snowflake分布式自增ID算法"></a>Snowflake分布式自增ID算法</h2><p>Twitter的snowfalke算法解决了分布式系统生成全局ID的需求，生成64位Long型数字，组成部分：</p><p>第一位未使用</p><p>接下来的41位是毫秒级时间，41位的长度可以表示69年的时间</p><p>5位datacenterId,5位workerId。10位长度最多支持部署1024个节点</p><p>最后12位是毫秒内计数，12位的计数顺序号支持每个节点每毫秒产生4096个ID序列。</p><h2 id="数据迁移、扩容问题"><a href="#数据迁移、扩容问题" class="headerlink" title="数据迁移、扩容问题"></a>数据迁移、扩容问题</h2><p>当业务高速发展、面临性能和存储瓶颈时，才会考虑分片设计，此时就不可避免的需要考虑历史数据的迁移问题。一般做法是先读出历史数据，然后按照指定的分片规则再将数据写入到各分片节点中。此外还需要根据当前的数据量个QPS，以及业务发展速度，进行容量规划，推算出大概需要多少分片（一般建议单个分片的单表数据量不超过1000W）</p><h2 id="什么时候考虑分库分表"><a href="#什么时候考虑分库分表" class="headerlink" title="什么时候考虑分库分表"></a>什么时候考虑分库分表</h2><p>能不分就不分<br>并不是所有表都需要切分，主要还是看数据的增长速度。切分后在某种程度上提升了业务的复杂程度。不到万不得已不要轻易使用分库分表这个“大招”，避免“过度设计”和“过早优化”。分库分表之前，先尽力做力所能及的优化：升级硬件、升级网络、读写分离、索引优化等。当数据量达到单表瓶颈后，在考虑分库分表。</p><p>数据量过大，正常运维影响业务访问<br>这里的运维是指：</p><p>对数据库备份，如果单表太大，备份时需要大量的磁盘IO和网络IO</p><p>对一个很大的表做DDL，MYSQL会锁住整个表，这个时间会很长，这段时间业务不能访问此表，影响很大。</p><p>大表经常访问和更新，就更有可能出现锁等待。</p><p>随着业务发展，需要对某些字段垂直拆分<br>这里就不举例了。在实际业务中都可能会碰到，有些不经常访问或者更新频率低的字段应该从大表中分离出去。</p><p>数据量快速增长<br>随着业务的快速发展，单表中的数据量会持续增长，当性能接近瓶颈时，就需要考虑水平切分，做分库分表了。</p>]]></content>
      
      
      <categories>
          
          <category> 分库分表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx学习笔记</title>
      <link href="2021/01/16/nginx/nginx/"/>
      <url>2021/01/16/nginx/nginx/</url>
      
        <content type="html"><![CDATA[<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><h4 id="什么是nginx"><a href="#什么是nginx" class="headerlink" title="什么是nginx?"></a>什么是nginx?</h4><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。</p><p>其特点是占有内存少，并发能力强  </p><p><strong>HTTP</strong>：说明nginx可以提供http服务</p><p>​    web服务器：提供资源服务<br>​                     nginx做web服务器只能支持<strong>静态资源</strong></p><p><strong>正向代理和反向代理:</strong><br>                  正向代理 代理的是客户端<br>                  反向代理 代理的是服务器端</p><p><strong>反向代理</strong>：反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源。同时，用户不需要知道目标服务器的地址，也无须在用户端作任何设定。反向代理服务器通常可用来作为Web加速，即使用反向代理作为Web服务器的前置机来降低网络和服务器的负载，提高访问效率。</p><p><strong>IMAP/POP3/SMTP服务</strong>:nginx可以作为邮件服务器使用</p><h4 id="怎么安装Nginx？"><a href="#怎么安装Nginx？" class="headerlink" title="怎么安装Nginx？"></a>怎么安装Nginx？</h4><p> <a href="https://www.cnblogs.com/james-roger/p/7804612.html">https://www.cnblogs.com/james-roger/p/7804612.html</a> </p><p>1、安装prce（重定向支持）和openssl（https支持，如果不需要https可以不安装）</p><pre class="line-numbers language-none"><code class="language-none">yum -y install pcre*yum -y install openssl*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、下载Nginx.jar,进行上传，解压</p><p>3、进入目录编译安装，</p><pre class="line-numbers language-none"><code class="language-none">cd nginx-1.7.8./configure --prefix=/usr/local/nginx(此目录必须先建好)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、不报错执行</p><pre class="line-numbers language-none"><code class="language-none">makemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5、开启Nginx</p><p>sbin/nginx</p><p>进入到欢迎页面，即成功</p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><h5 id="反向代理负载均衡配置文件"><a href="#反向代理负载均衡配置文件" class="headerlink" title="反向代理负载均衡配置文件"></a>反向代理负载均衡配置文件</h5><p>修改nginx.conf配置文件</p><p>这里使用Nginx来负载均衡2个tomcat的访问请求</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">#upstream 修改哪几台进行负载均衡upstream localhost{#1是请求比例3分之一请求到8081端口上server localhost:8081 weight=1;server localhost:8082 weight=2;}#nginx服务默认监听80端口  80端口是http访问的默认端口server {        listen       80;        #server_name  localhost;        server_name flume01;        #charset koi8-r;        #access_log  logs/host.access.log  main;#在location内部要配置此时nginx作用是代理服务器#location进行了修改，使用正则表达式，满足正则表达式则可以触发收集日志操作，写入到logs中的日志文件中        location / {               proxy_connect_timeout   3;               proxy_send_timeout      30;               proxy_read_timeout      30;              #代理的地址               proxy_pass http://localhost;            #root   html;  指明请求资源保存的位置 默认是安装之后的html目录 可以改            #index  index.html index.htm;  指明哪个页面是欢迎页面        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="收集日志配置文件"><a href="#收集日志配置文件" class="headerlink" title="收集日志配置文件"></a>收集日志配置文件</h5><p>修改nginx.conf配置文件</p><pre class="line-numbers language-none"><code class="language-none">#采集的名称lf  log_format  配置日志写入的内容和日志的格式log_format lf '$remote_addr^A$msec^A$http_host^A$request_uri';#ip地址#时间戳#访问域名和ip地址#客户端uriserver {        listen       80;        #server_name  localhost;        server_name hadoop01;        location ~ .*(bwImg)\.(gif)$        {           default_type image/gif;           access_log /export/server/nginx/logs/access_log.log lf;           root /export/server/nginx/source;        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Nginx常用使用方式"><a href="#Nginx常用使用方式" class="headerlink" title="Nginx常用使用方式"></a>Nginx常用使用方式</h3><h4 id="做静态资源服务器"><a href="#做静态资源服务器" class="headerlink" title="做静态资源服务器"></a>做静态资源服务器</h4><p>在实际项目中通常都是把动态资源  静态资源分开部署</p><p>1、编辑配置文件，在http {下面添加以下内容：</p><blockquote><p>vi /etc/nginx/nginx.conf</p></blockquote><pre class="line-numbers language-none"><code class="language-none">autoindex on; #开启nginx目录浏览功能autoindex_exact_size off; #文件大小从KB开始显示autoindex_localtime on; #显示文件修改时间为服务器本地时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/01/16/nginx/nginx/image-20210122141501484.png" alt="配置图"></p><p>2、重新启动nginx</p><pre class="line-numbers language-none"><code class="language-none">nginx -s stop ＃停止nginxnginx     #重新启动ngnix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、上传资源到Nginx目录下</p><blockquote><p>/usr/share/nginx/html</p></blockquote><p><img src="/2021/01/16/nginx/nginx/image-20210122141927043.png" alt="image-20210122141927043"></p><p>4、尝试外部访问资源</p><blockquote><p>访问成功</p></blockquote><p><img src="/2021/01/16/nginx/nginx/image-20210122142224262.png" alt="image-20210122142224262"></p><h4 id="做负载均衡服务器"><a href="#做负载均衡服务器" class="headerlink" title="做负载均衡服务器"></a>做负载均衡服务器</h4><p>例子：使用nginx  给2个tomcat服务端 做负载均衡</p><p>2台tomcat是在1台机器安装了2个tomcat实例</p><p>如何在1台机器可以安装多个tomcat实例?<br>修改2个tomcat实例的端口号来区分不同的tomcat实例<br>               修改接收关闭信息的端口号<br>               修改接收http请求的端口号<br>               修改ajp协议的端口号</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="做日志服务器"><a href="#做日志服务器" class="headerlink" title="做日志服务器"></a>做日志服务器</h4><p>在当前的项目中模拟点击网站上某张图片  记录行为数据 写入nginx日志文件</p><p>nginx.conf文件中的log_format  配置日志写入的内容和日志的格式</p><pre class="line-numbers language-none"><code class="language-none">log_format lf '$remote_addr^A$msec^A$http_host^A$request_uri';//日志写入数据的分隔符是"^A"//日志写入数据的内容是 //客户端的ip地址//写入日志的时间戳//客户端输入的访问域名或者ip地址//客户端请求资源的uri日志样例：192.168.108.1^A1576549355.042^A192.168.108.128^A/bwImg.gif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">location进行了修改:使用正则表达式指定了为哪些请求提供服务.*(bwImg)\.(gif)$   http://192.168.108.128/bwImg.gif?xx=aa&amp;yy=bbaccess_log 配置的是日志文件的位置和名称root 配置访问资源图片的位置日志样例：192.168.108.1^A1576549355.042^A192.168.108.128^A/bwImg.gif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本编写</title>
      <link href="2021/01/16/shell-bian-cheng/centos-bian-xie-shell-jiao-ben/"/>
      <url>2021/01/16/shell-bian-cheng/centos-bian-xie-shell-jiao-ben/</url>
      
        <content type="html"><![CDATA[<h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><p>部分转载自：<a href="https://www.cnblogs.com/jacktian-it/p/11556826.html">https://www.cnblogs.com/jacktian-it/p/11556826.html</a></p><h2 id="命令的语法"><a href="#命令的语法" class="headerlink" title="$命令的语法"></a>$命令的语法</h2><p>$0 shell命令本身</p><p>$1~$9    表示shell的第几个参数</p><p>$？    显示最后命令的执行情况</p><p>$#    传递到脚本的参数个数</p><p>$$    脚本运行的当前进程id号</p><p>$*     单字符串显示所有向脚本传递的参数</p><p>$!        后台运行的最后一个进程的 ID 号   </p><p>$-        显示 Shell 使用的当前选项 </p><h2 id="“”、’’、-的区别"><a href="#“”、’’、-的区别" class="headerlink" title="“”、’’、``的区别"></a>“”、’’、``的区别</h2> <pre class="line-numbers language-none"><code class="language-none"> `` 是命令替换，执行你的命令''   单引号是单纯的字符，不会引用""双引号是可以引用的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="bash环境变量配置"><a href="#bash环境变量配置" class="headerlink" title="bash环境变量配置"></a>bash环境变量配置</h1><p>在编写Shell脚本之前，首先要配置好<br>JDK1.8<br>/etc/profile 环境变量，否则用户没有权限就无法跨界点访问</p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME=/usr/java/jdk1.8export CLASSPATH=.:${JAVA_HOME}/jre/lib/rt.jar:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jarexport PATH=$PATH:${JAVA_HOME}/bin           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>~/bashrc文件   环境变量的设置只对用户自己生效，配置这个文件，使用bash命令，只要以该用户身份运行命令行就会读取到该文件。</p><p>在所有节点上执行这个命令</p><pre class="line-numbers language-none"><code class="language-none">cat /etc/profile &gt;&gt; ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="所有节点运行相同命令脚本"><a href="#所有节点运行相同命令脚本" class="headerlink" title="所有节点运行相同命令脚本"></a>所有节点运行相同命令脚本</h1><p>写的时候注意，中间没有逗号</p><pre class="line-numbers language-none"><code class="language-none">#! /bin/bashfor i in hadoop1 hadoop2 hadoop3do        echo --------- $i ----------        ssh $i "$*"done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>i  是循环的变量（hadoop1,hadoop2,hadoop3），do是要干的事情，done是结束语句，这三个是shell中for循环一体的</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM</title>
      <link href="2021/01/16/spring/spring-ssm-zheng-he-kuang-jia-si/"/>
      <url>2021/01/16/spring/spring-ssm-zheng-he-kuang-jia-si/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM开发环境搭建"><a href="#SSM开发环境搭建" class="headerlink" title="SSM开发环境搭建"></a>SSM开发环境搭建</h1><p>SSM是Spring为中心，来整合其他框架</p><h2 id="搭建Spring"><a href="#搭建Spring" class="headerlink" title="搭建Spring"></a>搭建Spring</h2><p>Mybatis会给你生成实现类，你只要写接口就好了.</p><p>编写dao层和service层的接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>    <span class="token comment">// 查询所有账户</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from account"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 保存帐户信息</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into account (name,money) values (#{name},#{money})"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token comment">// 查询所有账户</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 保存帐户信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring整合SpringMvc"><a href="#Spring整合SpringMvc" class="headerlink" title="Spring整合SpringMvc"></a>Spring整合SpringMvc</h2><ol><li>配置Spring配置文件  <strong>applicatiocontext.xml</strong></li></ol><p>创建 applicationcontext.xml 配置文件，导入他们的头部文件</p><p>因为service和dao层由Spring来管理，而Controller由SpringMvc来，所以在扫描的时候不需要让他去扫描</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsdhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsdhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--开启注解的扫描，希望处理service和dao，controller不需要Spring框架去处理--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--配置哪些注解不扫描  写了controller的全路径--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--Spring整合MyBatis框架--&gt;</span>    <span class="token comment">&lt;!--配置连接池--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql:///ssm<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置SqlSessionFactory工厂--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置AccountDao接口所在包--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperScanner<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast.dao<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--配置Spring框架声明式事务管理--&gt;</span>    <span class="token comment">&lt;!--配置事务管理器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置事务通知--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">isolation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEFAULT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置AOP增强--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* cn.itcast.service.impl.*ServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>配置SpringMvc的两个文件：</li></ol><p><strong>springmvc.xml</strong>:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--开启注解扫描，只扫描Controller注解--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置的视图解析器对象--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--过滤静态资源--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/css/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--开启SpringMVC注解的支持--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>web.xml</strong>:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">web-app</span> <span class="token name">PUBLIC</span> <span class="token string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span> <span class="token string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">&gt;</span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--配置Spring的监听器，默认只加载WEB-INF目录下的applicationContext.xml配置文件--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--设置配置文件的路径--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--配置前端控制器--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--加载springmvc.xml配置文件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--启动服务器，创建该servlet--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--解决中文乱码的过滤器--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring整合Mybatis"><a href="#Spring整合Mybatis" class="headerlink" title="Spring整合Mybatis"></a>Spring整合Mybatis</h2><p>更改Spring配置文件applicationcontext.xml，加入以下内容，将sessionfactory、dao、代理对象 都存入到ioc容器中</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--Spring整合MyBatis框架--&gt;</span><span class="token comment">&lt;!--配置连接池--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql:///ssm<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--配置SqlSessionFactory工厂--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--配置AccountDao接口所在包--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperScanner<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast.dao<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h3><p>在applicationcontext.xml添加以下内容</p><h1 id="元注解说明"><a href="#元注解说明" class="headerlink" title="元注解说明"></a>元注解说明</h1><p>@Target()<br>说明了这个注解可以作用的范围，<br>method就是可以作用在方法上，type就是类和接口</p>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
            <tag> Java框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习</title>
      <link href="2021/01/16/spring/springboot-kuang-jia-wu/"/>
      <url>2021/01/16/spring/springboot-kuang-jia-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="原有Spring优缺点分析"><a href="#原有Spring优缺点分析" class="headerlink" title="原有Spring优缺点分析"></a>原有Spring优缺点分析</h2><p>Spring是java企业版j2ee的轻量级代替品。</p><p>虽然Spring的组件代码是轻量级的，但它的配置却是重量级的。一开始，Spring用XML配置，而且是很多XML配 置。Spring 2.5引入了基于注解的组件扫描，这消除了大量针对应用程序自身组件的显式XML配置。Spring 3.0引入 了基于Java的配置，这是一种类型安全的可重构配置方式，可以代替XML。</p><p>所有这些配置都代表了开发时的损耗。因为在思考Spring特性配置和解决业务问题之间需要进行思维切换，所以编 写配置挤占了编写应用程序逻辑的时间。和所有框架一样，Spring实用，但与此同时它要求的回报也不少。</p><p>除此之外，项目的依赖管理也是一件耗时耗力的事情。在环境搭建时，需要分析要导入哪些库的坐标，而且还需要分析导入与之有依赖关系的其他库的坐标，一旦选错了依赖的版本，随之而来的不兼容问题就会严重阻碍项目的开发进度 。</p><h2 id="SpringBoot常用注解"><a href="#SpringBoot常用注解" class="headerlink" title="SpringBoot常用注解"></a>SpringBoot常用注解</h2><h4 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h4><p>表明这是个启动类</p><p>项目在tomcat部署并启动，项目的扫描范围它默认是启动类的包以及它的子包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h4><p>返回前端请求类型并指明这是个控制类</p><p>里面包含了ResponseBody和Controller两个标签</p><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><p>自动配置的环境注解</p><h4 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h4><p>配置文件</p><h4 id="获取配置信息的注解"><a href="#获取配置信息的注解" class="headerlink" title="获取配置信息的注解"></a>获取配置信息的注解</h4><h5 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h5><p>方法和参数上可以使用</p><p>通过@Value注解将配置文件的值映射到Spring管理的Bean字段上面</p><h5 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h5><pre class="line-numbers language-none"><code class="language-none">@ConfigurationProperties(prefix = "person")指明配置文件中的前缀同时属性要提供get set方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--热部署配置--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>setting    -&gt;    compiler -&gt;    build project automatically</p><p>ctrl  shift alt /  配置compiler …. runner</p><p><img src="https://img-blog.csdnimg.cn/20201126133131201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java框架 </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper</title>
      <link href="2021/01/16/cdh/zookeeper/zookeeper/"/>
      <url>2021/01/16/cdh/zookeeper/zookeeper/</url>
      
        <content type="html"><![CDATA[<h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><p>注意：Zookeeper节点个数只能是基数！</p><h3 id="ZOOKEEPER（-分布式协调服务）"><a href="#ZOOKEEPER（-分布式协调服务）" class="headerlink" title="ZOOKEEPER（ 分布式协调服务）"></a>ZOOKEEPER（ 分布式协调服务）</h3><p>Zookeeper 分布式服务框架是 Apache Hadoop 的一个子项目，主要是用来解决分布式应用中经常遇到的一些数据管理问题</p><p>如：集群管理、统一命名服务、分布式配置管理、分布式消息队列jmq active amq、分布式锁、分布式通知协调等。</p><p>它是树形结构，每个节点称作一个ZNode，每个ZNode通过其路径唯一标识在每个ZNode可存储少量数据（默认是1M，可以通过配置修改，不建议在ZNode上存储大量的数据），在ZNode上存储了Acl信息，每个ZNode的Acl是独立的，字节点不会继承父节点</p><p>ZNode根据本身的特性，分为两类</p><p>常规性的ZNode，用户需要显示的创建、删除</p><p>临时性的ZNode，用户创建之后，可以删除，也可以在创建它的session结束后，有zookeeper server自动删除 </p><p>两组心跳</p><p>client 和 server 保持着心跳 </p><p>leader 和 follower 保持着心跳 </p><pre class="line-numbers language-none"><code class="language-none">czxid  是创建事务id，创建操作 会被记录ctime创建时间mzxid修改的事务的id mtime 修改的时间pZxid当前znode所在文件夹的事务id（子节点个数）ephemeralOwner临时节点的拥有者zookeeper也有类似的fsimage和edits分别是Edits （wal）  fsImage（snapshot）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="zookeeper读写模式"><a href="#zookeeper读写模式" class="headerlink" title="zookeeper读写模式"></a>zookeeper读写模式</h3><p>在zookeeper集群中，读可以从任意一个zookeeper server读，保证了较好的读性能的关键，向forwarder到leader，然后leader来通过通过zookeeper中的原子广播协议，将请求广播给所有的foollower，leader收到一半以上的写成功的ack后，就认为写成功了</p><h3 id="zookeeper分布式搭建"><a href="#zookeeper分布式搭建" class="headerlink" title="zookeeper分布式搭建"></a>zookeeper分布式搭建</h3><p>1.解压zookeepertar包<br>2.配置文件 /etc/profile<br>3.conf 文件夹中修改zoo.cfg文件</p><pre class="line-numbers language-none"><code class="language-none">tickTime=2000initLimit=10#用来配置Zookeeper接受客户端初始化连接时最长能忍受多少个心跳时间间隔数，超过10个心跳时间长度后没有收到客户端的返回信息，表明这个客户端连接失败syncLimit=5#（同步的几倍心跳时间）配置leader和follower之间发送消息，请求和应答时间长度，最长不能超过多少个tickTime的时间长度,这里是5倍的心跳时间clientPort=2181#端口号server.1=192.168.237.1:2888:3888 server.2=192.168.237.2:2888:3888server.3=192.168.237.3:2888:38882888  zk节点通信端口号3888  选取机制的端口号fifo  先进先出 #server.A=B:C:D表达了a是一个数据这是几号服务器b是服务器的ip地址c是服务器和集群中leader服务器交换信息的端口d是执行选举时的服务器相互通信的端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/01/16/cdh/zookeeper/zookeeper/1571141126560.png" alt="1571141126560"></p><p>4.创建文件夹logs和data(文件夹必须存在)</p><p>5.myid 文件</p><p>data文件中创建myid文件并 三个节点写不同的值 1，2，3</p><p>传到三台机器上</p><p>6.启动zookeeper</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">//启动zookeeper进程 QuorumPeerMain进程zkServer.sh start //查看zookeeper的启动状态 zkServer.sh status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>6.进入到zookeeper客户端 </p><p>zkCli.sh</p><h3 id="zookeeper命令"><a href="#zookeeper命令" class="headerlink" title="zookeeper命令"></a>zookeeper命令</h3><pre class="line-numbers language-none"><code class="language-none">//查看目录下的文件ls ///创建字节点 create 目录名 挂载数据//查看目录下的文件get /目录名 connect ip:2181  //切换server服务端cZxid = 0x200000002ctime = Mon Oct 21 01:46:04 PDT 2019mZxid = 0x200000002mtime = Mon Oct 21 01:46:04 PDT 2019pZxid = 0x200000002cversion = 0dataVersion = 0aclVersion = 0ephemeralOwner = 0x0dataLength = 2numChildren = 0czxid  是创建事务id，创建操作 会被记录ctime创建时间mzxid修改的事务的id,自动增加，以编号大的为准，全局有序mtime 修改的时间pZxid当前znode所在文件夹的事务id（子节点个数）ephemeralOwner临时节点的拥有者//修改目录下的数据 set 目录名 数据 delete  path  //删除节点rmr  path   强制删除节点-e  临时节点，会话失效后自动删除zookeeper的状态有四种not_connected //没有链接connecting    //连接中connected   //连接上closed      //连接关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ZNode的基本概念"><a href="#ZNode的基本概念" class="headerlink" title="ZNode的基本概念"></a>ZNode的基本概念</h3><p>Zookeeper 分布式服务框架是 Apache Hadoop 的一个子项目，主要是用来解决分布式应用中经常遇到的一些数据管理问题</p><p>1 分布式的：大量的节点 。实现集群来管理集群</p><p>2 数据管理： 管理数据的 管理集群的变化 —数据</p><p>ZooKeeper数据模型的结构与Linux文件系统很类似(根目录下的分配)，整体上可以看作是一棵树，每个节点称做一个ZNode。每个ZNode都可以通过其路径唯一标识，在每个ZNode上可存储少量数据(默认是1M, 可以通过配置修改, 通常不建议在ZNode上存储大量的数据)。zookeeper挂载的数据存放在内存中 备份 （磁盘），放重要文件，读取和写入速度快。</p><p>ZNode根据其本身的特性，可以分为下面两类：</p><p>常规型ZNode, 用户需要显式的创建、删除</p><p>临时型ZNode, 用户创建它之后，可以正常的删除，也可以在创建它的Session结束后，由ZooKeeper Server自动删除</p><pre class="line-numbers language-none"><code class="language-none">znode -s -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Zookeeper这种数据结构有如下这些特点："><a href="#Zookeeper这种数据结构有如下这些特点：" class="headerlink" title="Zookeeper这种数据结构有如下这些特点："></a>Zookeeper这种数据结构有如下这些特点：</h3><p>1）类似于Linux的节点文件夹都被称作为znode，这个znode是被它所在的路径唯一标识，如Server1这个znode的标识为/NameService/Server1。</p><p>2）znode可以有子节点目录，并且每个znode可以存储数据，注意临时类型的目录节点不能有子节点目录。ZNode有一个特性，如果创建的时候指定-s的话，该ZNode的名字后面会自动Append一个不断增加的SequenceNo</p><p>3）znode可以是临时节点，可以是持久节点。如果创建的是临时节点，一旦创建这个EPHEMERALznode的客户端与服务器失去联系，这个znode也将自动删除，Zookeeper的客户端和服务器进行连接，每个客户端和服务器通过心跳来保持连接，这个连接状态称为session，如果znode是临时节点，这个session失效，znode也就删除了。</p><p>4）znode的目录名可以自动编号，如App1已经存在，再创建的话，将会自动命名为App2。-s的情况下</p><p>5）znode可以被监控，包括这个目录节点中存储的数据的修改，子节点目录的变化等，一旦变化可以通知设置监控的客户端，这个是Zookeeper的核心特性，Zookeeper的很多功能都是基于这个特性实现的。Watcher ZooKeeper支持一种Watch操作，Client可以在某个ZNode上设置一个Watcher，来Watch该ZNode上的变化。如果该ZNode上有相应的变化，就会触发这个Watcher，把相应的事件通知给设置Watcher的Client。需要注意的是，ZooKeeper中的Watcher是一次性的，即触发一次就会被取消，如果想继续Watch的话，需要客户端重新设置Watcher。</p><p>6）ZXID：每次对Zookeeper的状态的改变都会产生一个zxid，zxid是全局有序的，如果zxid1小于zxid2，则zxid1在zxid2之前发生。</p><p>7)Session: Client与ZooKeeper之间的通信，需要创建一个Session，这个Session会有一个超时时间，所以在Session没超时之前，Client与ZooKeeper Server的连接可以在各个ZooKeeper Server之间透明地移动  connect + ip:端口号）ZooKeeper Client会每t/3 ms发一次心跳给Server，如果Client 2t/3 ms没收到来自Server的心跳回应，就会换到一个新的ZooKeeper Server上。这里t是用户配置的Session的超时时间。</p><p><img src="/2021/01/16/cdh/zookeeper/zookeeper/clip_image002.jpg" alt="img"> <img src="/2021/01/16/cdh/zookeeper/zookeeper/clip_image004.jpg" alt="img"></p><p>(client不论连接到哪个Server，展示给它都是同一个视图，这是zookeeper最重要的性能。)</p><h3 id="读写模式"><a href="#读写模式" class="headerlink" title="读写模式"></a>读写模式</h3><p>在ZooKeeper集群中，读可以从任意一个ZooKeeper Server读，这一点是保证ZooKeeper比较好的读性能的关键；写的请求会先Forwarder到Leader，然后由Leader来通过ZooKeeper中的原子广播协议，将请求广播给所有的Follower，Leader收到一半以上的写成功的Ack（acknowlage）后，就认为该写成功了，就会将该写进行持久化，并告诉客户端写成功了。</p><h3 id="Zookeeper具体写入过程："><a href="#Zookeeper具体写入过程：" class="headerlink" title="Zookeeper具体写入过程："></a>Zookeeper具体写入过程：</h3><p>election投票功能</p><p>正常情况下：集群中，形成读写分离的状态，读可以从任何一台机器进行读取，</p><p>Zk里面在写入数据的时候有独特的算法：</p><p>F1（zxid 0） f2  f3</p><p>Client – f1 f2 f3</p><p>client提交请求，set /zhangsan 3  zxid</p><p>F1 (leader)提议修改数据 - f2  - f3</p><p>F1 f2 f3 如果要进行文件修改，那么就会对应一个zxid这个zxid1是最新的，</p><p>F1提议修改数据，那么f1提议的数据一定要是大于0，f1 f2 f3只能接受最新的提议  zxid—-&gt;最新的</p><p>F2 f3 f1 三个人都要判决，如果投票大于半数以上，那么这个提议就生效，三台机器将数据修改</p><p>集群中机器比较多：冲突</p><p>F1 zhangsan 3 zxid 1 f2 zhangan 4 zxid 1</p><p>争夺，f1 f2同时到达，那么就应该进行投票，如果其中一个提议投票大于半数，那么将要执行提议，另一个提议因为他的zxid和刚才执行完毕的zxid一样，这个提议属于过期提议 （以用的那个提议的zxid当做是最新的zxid），紧接着可以发送第二次的提议</p><p>因为当前的提议人数较多：</p><p>出现leader的角色，因为leader的出现，使得于这个提议的功能只能有leader执行，client —leader那么你的这次请求会直接被提议</p><p>Client—follower—leader，因为leader的存在，使得所有的提议都交给leader，那么leader就会形成一个队列，所以所有的修改都是全局有序的</p><h3 id="WAL和Snapshot"><a href="#WAL和Snapshot" class="headerlink" title="WAL和Snapshot"></a>WAL和Snapshot</h3><p>Edits （wal）</p><p>fsImage（snapshot）</p><p>Edits+fsimage</p><p>快照  = secondaryNamenode的日志合并</p><p>Edits日志文件保存的是全部的操作信息</p><p>和大多数分布式系统一样，ZooKeeper也有WAL(Write-Ahead-Log)edits，对于每一个更新操作，ZooKeeper都会先写WAL, 然后再对内存中的数据做更新，然后向Client通知更新结果。另外，ZooKeeper还会定期将内存中的目录树进行Snapshot fsimage，落地到磁盘上，这个跟HDFS中的FSImage是比较类似的。这么做的主要目的，一当然是数据的持久化，二是加快重启之后的恢复速度，如果全部通过Replay WAL的形式恢复的话，会比较慢。</p><h3 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h3><p>对于每一个ZooKeeper客户端而言，所有的操作都是遵循FIFO顺序的，这一特性是由下面两个基本特性来保证的：一是ZooKeeper Client与Server之间的网络通信是基于TCP，TCP保证了Client/Server之间传输命令的顺序；二是ZooKeeper Server执行客户端请求也是严格按照FIFO顺序的。</p><h3 id="ZooKeeper-Session"><a href="#ZooKeeper-Session" class="headerlink" title="ZooKeeper Session"></a><strong>ZooKeeper Session</strong></h3><p>Client和Zookeeper集群建立连接，整个session状态变化如图所示：</p><p><img src="/2021/01/16/cdh/zookeeper/zookeeper/clip_image005.jpg" alt="img"></p><p>如果Client因为Timeout和Zookeeper Server失去连接，client处在CONNECTING状态，会自动尝试再去连接Server，如果在session有效期内再次成功连接到某个Server，则回到CONNECTED状态。</p><p>注意：如果因为网络状态不好，client和Server失去联系，client会停留在当前状态，会尝试主动再次连接Zookeeper Server。client不能宣称自己的session expired(会话超时)，session expired是由Zookeeper Server来决定的，client可以选择自己主动关闭session。 </p><h3 id="ZooKeeper-Watch"><a href="#ZooKeeper-Watch" class="headerlink" title="ZooKeeper Watch"></a><strong>ZooKeeper Watch</strong></h3><p>Zookeeper watch是一种监听通知机制。Zookeeper所有的读操作getData(), getChildren()和 exists()都可以设置监视(watch)，监视事件可以理解为一次性的触发器 One-time trigger</p><p>当设置监视的数据发生改变时，该监视事件会被发送到客户端，例如，如果客户端调用了getData(“/znode1”, true) 并且稍后 /znode1 节点上的数据发生了改变或者被删除了，客户端将会获取到 /znode1 发生变化的监视事件，而如果 /znode1 再一次发生了变化，除非客户端再次对/znode1 设置监视，否则客户端不会收到事件通知。</p><h3 id="ZooKeeper的工作原理"><a href="#ZooKeeper的工作原理" class="headerlink" title="ZooKeeper的工作原理"></a><strong>ZooKeeper的工作原理</strong></h3><p>在zookeeper的集群中，各个节点共有下面3种角色和4种状态：</p><ul><li>角色：leader,follower,observer</li><li>Follower 同步数据 和leader心跳，投票，投票选举leader，自身竞选leader 可以作为备份</li><li>Observer：同步数据 和leader心跳，投票     但是没有自身竞选功能</li><li>100 1leader 5follower 94observer</li><li>状态：leading,following,observing,looking</li></ul><p>Zookeeper的核心是原子广播，这个机制保证了各个Server之间的同步。实现这个机制的协议叫做Zab协议。Zab协议有两种模式，它们分别是恢复模式（Recovery选主）和广播模式（Broadcast同步）。当服务启动或者在领导者崩溃后，Zab就进入了恢复模式（safemode），当领导者被选举出来，且大多数Server完成了和leader的状态同步以后(内存信息加载)，恢复模式就结束了。状态同步保证了leader和Server具有相同的系统状态。</p><p>LOOKING：当前Server不知道leader是谁，正在搜寻。恢复模式</p><p>LEADING：当前Server即为选举出来的leader。选举完毕有leader</p><p>FOLLOWING：leader已经选举出来，当前Server与之同步。</p><p>OBSERVING：observer的行为在大多数情况下与follower完全一致，但是他们不参加本身选举 而仅仅接受选举和投票的结果。</p><h3 id="Leader-Election"><a href="#Leader-Election" class="headerlink" title="Leader Election"></a><strong>Leader Election</strong></h3><p>当leader崩溃或者leader失去大多数的follower，这时候zk进入恢复模式，恢复模式需要重新选举出一个新的leader，让所有的Server都恢复到一个正确的状态。Zk的选举算法</p><p>1.选举线程由当前Server发起选举的线程担任，其主要功能是对投票结果进行统计，并选出推荐的Server；</p><p>2.选举线程首先向所有Server发起一次询问（包括自己）；</p><p>3.选举线程收到回复后，验证是否是自己发起的询问（验证zxid是否一致），然后获取对方的id（myid），并存储到当前询问对象列表中，最后获取对方提议的leader相关信息（id,zxid），并将这些信息存储到当次选举的投票记录表中；</p><p>4.收到所有Server回复以后，就计算出zxid最大的那个Server，并将这个Server相关信息设置成下一次要投票的Server；</p><p>5.线程将当前zxid最大的Server设置为当前Server要推荐的Leader，如果此时获胜的Server获得n/2 + 1的Server票数，设置当前推荐的leader为获胜的Server，将根据获胜的Server相关信息设置自己的状态，否则，继续这个过程，直到leader被选举出来。</p><p>通过流程分析我们可以得出：要使Leader获得多数Server的支持，则Server总数必须是奇数2n+1，且存活的Server的数目不得少于n+1. </p><p>奇数：1.因为奇数台机器，永远都不会两个leader拥有同样的follower</p><h3 id="Leader工作流程"><a href="#Leader工作流程" class="headerlink" title="Leader工作流程"></a><strong>Leader工作流程</strong></h3><p>Leader主要有三个功能：</p><p>1.恢复数据；</p><p>2.维持与Learner(follower与observer的统称 )的心跳，接收Learner请求并判断Learner的请求消息类型；都需要由leader进行提议 （提议加判断）</p><p>3.Learner的消息类型主要有PING消息、REQUEST消息（提议的消息）、acknowlage（确认消息）消息、REVALIDATE （延长session的连接时间）消息，根据不同的消息类型，进行不同的处理。</p><p>PING消息是指Learner的心跳信息；REQUEST消息是Follower发送的提议信息，包括写请求及同步请求；</p><p>ACK消息是Follower的对提议的回复确认消息，超过半数的Follower通过，则commit该提议；REVALIDATE消息是用来延长SESSION有效时间。</p><h3 id="Follower工作流程"><a href="#Follower工作流程" class="headerlink" title="Follower工作流程"></a><strong>Follower工作流程</strong></h3><p>Follower主要有四个功能：</p><ol><li>向Leader发送请求（PING消息、REQUEST消息、ACK消息、REVALIDATE消息）；</li><li>接收Leader消息并进行处理；</li><li>接收Client的请求，如果为写请求，发送给Leader进行投票；</li><li>返回Client结果（返回给client的写入结果）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring常用注解</title>
      <link href="2021/01/16/spring/spring-chang-yong-zhu-jie-zong-jie/"/>
      <url>2021/01/16/spring/spring-chang-yong-zhu-jie-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><p>是Sprnig Boot项目的核心注解，目的是开启自动配置</p><p>实现了以下三个注解的功能：</p><p><strong>@EnableAutoConfiguration</strong>：启用Spring Boot的自动配置机制</p><p><strong>@ComponentScan</strong>：启用@Component对应用程序所在的软件包的扫描</p><p><strong>@Configuration</strong>：允许在上下文中注册额外的bean或导入其他配置类</p><h2 id="Enable"><a href="#Enable" class="headerlink" title="@Enable*"></a>@Enable*</h2><p>启用什么什么服务，里面会import导入配置类</p><h2 id="Table"><a href="#Table" class="headerlink" title="@Table"></a>@Table</h2><p>spring @Table注解  作用是 ： 声明此对象映射到数据库的数据表，通过它可以为实体指定表(talbe)</p><p>常用的两个属性：<br>1、name 用来命名 当前实体类 对应的数据库 表的名字 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"tab_user"</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、uniqueConstraints 用来批量命名唯一键<br>其作用等同于多个：@Column(unique = true)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"tab_user"</span><span class="token punctuation">,</span>uniqueConstraints <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@UniqueConstraint</span><span class="token punctuation">(</span>columnNames<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"uid"</span><span class="token punctuation">,</span><span class="token string">"email"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Basic"><a href="#Basic" class="headerlink" title="@Basic"></a>@Basic</h2><p>@Basic表示一个简单的属性到数据库表的字段的映射,对于没有任何标注的getXxxx()方法,默认 即为 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Basic</span>　　<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>、<span class="token class-name">FetchType</span><span class="token punctuation">.</span>LAZY：懒加载，加载一个实体时，定义懒加载的属性不会马上从数据库中加载。　　<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>、<span class="token class-name">FetchType</span><span class="token punctuation">.</span>EAGER：急加载，加载一个实体时，定义急加载的属性会立即从数据库中加载。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span><span class="token annotation punctuation">@Basic</span><span class="token punctuation">(</span>fetch<span class="token operator">=</span><span class="token class-name">FetchType</span><span class="token punctuation">,</span>optional<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> address<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h2><p>@Column描述了数据库表中该字段的详细定义,这对于根据JPA注解生成数据库表结构的工具非常 有作用.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Column</span><span class="token operator">:</span>　　name<span class="token operator">:</span>表示数据库表中该字段的名称<span class="token punctuation">,</span>默认情形属性名称一致　　nullable<span class="token operator">:</span>表示该字段是否允许为<span class="token keyword">null</span><span class="token punctuation">,</span>默认为<span class="token boolean">true</span>　　unique<span class="token operator">:</span>表示该字段是否是唯一标识<span class="token punctuation">,</span>默认为<span class="token boolean">false</span>　　length<span class="token operator">:</span>表示该字段的大小<span class="token punctuation">,</span>仅对<span class="token class-name">String</span>类型的字段有效　　insertable<span class="token operator">:</span>表示在ORM框架执行插入操作时<span class="token punctuation">,</span>该字段是否应出现INSETRT语句中<span class="token punctuation">,</span>默认为<span class="token boolean">true</span>　　updateable<span class="token operator">:</span>表示在ORM框架执行更新操作时<span class="token punctuation">,</span>该字段是否应该出现在UPDATE语句中<span class="token punctuation">,</span>默认为 <span class="token boolean">true</span><span class="token punctuation">.</span>对于一经创建就不可以更改的字段<span class="token punctuation">,</span>该属性非常有用<span class="token punctuation">,</span>如对于birthday字段<span class="token punctuation">.</span>　　columnDefinition<span class="token operator">:</span>表示该字段在数据库中的实际类型<span class="token punctuation">.</span>通常ORM框架可以根据属性类型自动判 断数据库中字段的类型<span class="token punctuation">,</span>但是对于<span class="token class-name">Date</span>类型仍无法确定数据库中字段类型究竟是DATE<span class="token punctuation">,</span>TIME还是 TIMESTAMP<span class="token punctuation">.</span>此外<span class="token punctuation">,</span><span class="token class-name">String</span>的默认映射类型为VARCHAR<span class="token punctuation">,</span>如果要将<span class="token class-name">String</span>类型映射到特定数据库的 BLOB或TEXT字段类型<span class="token punctuation">,</span>该属性非常有用<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"BIRTH"</span><span class="token punctuation">,</span>nullable<span class="token operator">=</span><span class="token string">"false"</span><span class="token punctuation">,</span>columnDefinition<span class="token operator">=</span><span class="token string">"DATE"</span><span class="token punctuation">)</span>　　<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBithday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> birthday<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="id"><a href="#id" class="headerlink" title="@id"></a>@id</h2><p>@Id 标注用于声明一个实体类的属性映射为数据库的主键列。<br>该属性通常置于属性声明语句之前，可与声明语句同行，也可写在单独行上。<br>@Id标注也可置于属性的getter方法之前。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Basic</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h2><p>用于指定scope作用域的（用在类上）</p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p><a href="https://blog.csdn.net/qiuz1024/article/details/100530260">@Configuration推荐文章连接</a><br>从Spring3.0，@Configuration用于定义配置类，可替换xml配置文件，被注解的类内部包含有一个或多个被@Bean注解的方法，这些方法将会被AnnotationConfigApplicationContext或AnnotationConfigWebApplicationContext类进行扫描，并用于构建bean定义，初始化Spring容器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">TestConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TestConfiguration容器启动初始化。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">TestConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TestConfiguration容器启动初始化。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// @Bean注解注册bean,同时可以指定初始化和销毁方法</span>    <span class="token comment">// @Bean(name="testBean",initMethod="start",destroyMethod="cleanUp")</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">TestBean</span> <span class="token function">testBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TestBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h2><p>Spring的@Bean注解用于告诉方法，产生一个Bean对象，然后这个Bean对象交给Spring管理。产生这个Bean对象的方法Spring只会调用一次，随后这个Spring将会将这个Bean对象放在自己的IOC容器中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token operator">:</span>value： name属性的别名，在不需要其他属性时使用，也就是说value 就是默认值name： 此bean 的名称，或多个名称，主要的bean的名称加别名。如果未指定，则bean的名称是带注解方法的名称。如果指定了，方法的名称就会忽略，如果没有其他属性声明的话，bean的名称和别名可能通过value属性配置initMethod ：指定初始化方法             destroyMethod：指定销毁的方法    PS：相当于xml文件中 init<span class="token operator">-</span>method <span class="token operator">&amp;</span>destroy<span class="token operator">-</span>method属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="token相关注解："><a href="#token相关注解：" class="headerlink" title="token相关注解："></a>token相关注解：</h2><p>下面两个注解是token的请求相关的，官网文档地址：<br><a href="https://docs.spring.io/spring-security-oauth2-boot/docs/2.2.0.RELEASE/reference/html5/">https://docs.spring.io/spring-security-oauth2-boot/docs/2.2.0.RELEASE/reference/html5/</a></p><h3 id="EnableAuthorizationServer"><a href="#EnableAuthorizationServer" class="headerlink" title="@EnableAuthorizationServer"></a>@EnableAuthorizationServer</h3><p>启用授权服务器，默认情况下，@EnableAuthorizationServer授予客户端访问客户端凭据的权限<br>与其他Spring Boot@Enable注释类似，可以将@EnableAuthorizationServer注释添加到main方法的类中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@EnableAuthorizationServer</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleAuthorizationServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SimpleAuthorizationServerApplication</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EnableResourceServer"><a href="#EnableResourceServer" class="headerlink" title="@EnableResourceServer"></a>@EnableResourceServer</h3><p>指定用于验证承载令牌的策略，添加此注释会添加OAuth2AuthenticationProcessingFilter，尽管它还需要进行其他配置才能知道如何适当地处理和验证令牌。</p><p>与其他Spring Boot@Enable注释类似，可以将@EnableResourceServer注释添加到main方法的类中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@EnableResourceServer</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleAuthorizationServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SimpleAuthorizationServerApplication</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EnableWebSecurity"><a href="#EnableWebSecurity" class="headerlink" title="@EnableWebSecurity"></a>@EnableWebSecurity</h3><p>参考文章：<a href="https://blog.csdn.net/andy_zhang2007/article/details/90023901">https://blog.csdn.net/andy_zhang2007/article/details/90023901</a><br>首先,EnableWebSecurity注解是个组合注解,他的注解中,又使用了@EnableGlobalAuthentication注解:<br>@EnableWebSecurity是Spring Security用于启用Web安全的注解。典型的用法是该注解用在某个Web安全配置类上(实现了接口WebSecurityConfigurer或者继承自WebSecurityConfigurerAdapter)。典型的使用例子如下 :</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebSecurityConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">WebSecurity</span> web<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>               web<span class="token punctuation">.</span><span class="token function">ignoring</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment">// Spring Security should completely ignore URLs starting with /resources/</span>                               <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/resources/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>               http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/public/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token comment">// Possibly more configuration ...</span>                               <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// enable form based log in</span>                               <span class="token comment">// set permitAll for all URLs associated with Form Login</span>                               <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>               auth               <span class="token comment">// enable in memory based authentication with a user named "user" and "admin"</span>               <span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">,</span> <span class="token string">"ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment">// Possibly more overridden methods ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h2><p>使用@Qualifier明确指定使用那个实现类了。</p><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>@Autowired 注释，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作<br>它是按照类型来自动进行标注</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>实现bean的注入<br>针对不同的使用场景所采取的特定功能化的注解。</p><h2 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h2><p>一般使用@Service注解标记这个类属于业务逻辑层。<br>就是针对不同的使用场景所采取的特定功能化的注解。</p><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>这个注解主要告诉Spring这个类作为控制器，可以看做标记为暴露给前端的入口。@Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法。通俗来说，被Controller标记的类就是一个控制器，这个类中的方法，就是相应的动作。<br>就是针对不同的使用场景所采取的特定功能化的注解。</p><h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h2><p>这个注解用来标识这个类是用来直接访问数据库的，dao层使用@repository注解。</p><h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><p>@Controller+@ResponseBody</p><h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><p>@ResponseBody的作用其实是将java对象转为json格式的数据。</p><p>@responseBody注解的作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML数据。</p><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>注解@RequestParam接收的参数是来自HTTP请求体或请求url的QueryString中。<br>@RequestParam有三个配置参数：</p><p>required 表示是否必须，默认为 true，必须。<br>defaultValue 可设置请求参数的默认值。<br>value 为接收url的参数名（相当于key值）。<br>@RequestParam用来处理 Content-Type 为 application/x-www-form-urlencoded 编码的内容，Content-Type默认为该属性。@RequestParam也可用于其它类型的请求，例如：POST、DELETE等请求。</p><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><p>注解@RequestBody接收的参数是来自requestBody中，即请求体。一般用于处理非 Content-Type: application/x-www-form-urlencoded编码格式的数据，比如：application/json、application/xml等类型的数据。<br>通俗的讲，就是会把你传入的json字符解析成该参数类型的Javabean对象。</p><p>GET 方式无请求体，所以 @RequestBody 接收数据时，前端必须是 POST 方式进行提交，然后给页面的数据默认也是 json</p><p>同一个方法中，@RequestBody 与 @RequestParam() 可以同时使用，前者最多只能有一个，后者可以有多个</p><h2 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping"></a>@GetMapping</h2><p>@GetMapping 注解将 HTTP GET 请求映射到特定的处理程序方法。</p><h2 id="PostMapping"><a href="#PostMapping" class="headerlink" title="@PostMapping"></a>@PostMapping</h2><p>@GetMapping 注解将 HTTP POST 请求映射到特定的处理程序方法。</p><h2 id="PutMapping"><a href="#PutMapping" class="headerlink" title="@PutMapping"></a>@PutMapping</h2><p>@GetMapping 注解将 HTTP PUT 请求映射到特定的处理程序方法。</p><h2 id="DeleteMapping"><a href="#DeleteMapping" class="headerlink" title="@DeleteMapping"></a>@DeleteMapping</h2><p>@GetMapping 注解将 HTTP Delete 请求映射到特定的处理程序方法。</p><h2 id="Select"><a href="#Select" class="headerlink" title="@Select"></a>@Select</h2><p>在Mapper层使用@Select注解，以此省略掉mapper.xml文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　　　<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"&lt;script&gt;"</span>        <span class="token operator">+</span><span class="token string">"select * from mi_taobao where 1=1"</span>        <span class="token operator">+</span><span class="token string">"&lt;if test='status != null'&gt;"</span>        <span class="token operator">+</span><span class="token string">"and status = #{status}"</span>        <span class="token operator">+</span><span class="token string">"&lt;/if&gt;"</span>        <span class="token operator">+</span><span class="token string">"&lt;/script&gt;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Taobao</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTaobao</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"SELECT "</span>            <span class="token operator">+</span> <span class="token string">" a.id, "</span>            <span class="token operator">+</span> <span class="token string">" a.role_name roleName, "</span>            <span class="token operator">+</span> <span class="token string">" a.enabled, "</span>            <span class="token operator">+</span> <span class="token string">" a.create_by createBy, "</span>            <span class="token operator">+</span> <span class="token string">" a.create_time createTime "</span>        <span class="token operator">+</span> <span class="token string">" FROM "</span>            <span class="token operator">+</span> <span class="token string">" sys_role a "</span>        <span class="token operator">+</span> <span class="token string">" WHERE "</span>        <span class="token operator">+</span> <span class="token string">" a.id = #{roleId}"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token class-name">SysRole</span> <span class="token function">selectSysRoleById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> roleId<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MapperScan"><a href="#MapperScan" class="headerlink" title="@MapperScan"></a>@MapperScan</h2><p>指定要变成实现类的接口所在的包，然后包下面的所有接口在编译之后都会生成相应的实现类<br>在Springboot启动类上面添加</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment">//@EnableEurekaClient</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.winter.dao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootMybatisDemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringbootMybatisDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>多个包扫描：<span class="token annotation punctuation">@SpringBootApplication</span>  <span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"com.kfit.demo"</span><span class="token punctuation">,</span><span class="token string">"com.kfit.user"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h2><p>作用在实体类上，生成对应的getset方法，需要导入lombok包</p><h2 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h2><p>作用在实体类上，生成对应的无参构造方法，需要导入lombok包</p><h2 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h2><p>作用在实体类上，生成对应的有参构造方法，需要导入lombok包</p><h2 id="Param"><a href="#Param" class="headerlink" title="@Param"></a>@Param</h2><p>作为Dao层的注解，作用是用于传递参数，从而可以与SQL中的的字段名相对应，一般在2=&lt;参数数&lt;=5时使用最佳。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Role</span><span class="token punctuation">&gt;</span></span> <span class="token function">findRoleByAnnotation</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"roleName"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> roleName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"note"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> note<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findRoleByMap"</span> parameterType<span class="token operator">=</span><span class="token string">"map"</span> resultType<span class="token operator">=</span><span class="token string">"role"</span><span class="token operator">&gt;</span>    <span class="token class-name">SELECT</span> id<span class="token punctuation">,</span>name FROM t_role    <span class="token class-name">WHERE</span> roleName<span class="token operator">=</span>#<span class="token punctuation">{</span>roleName<span class="token punctuation">}</span>    <span class="token class-name">AND</span> note<span class="token operator">=</span>#<span class="token punctuation">{</span>note<span class="token punctuation">}</span><span class="token generics"><span class="token punctuation">&lt;</span>select<span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h2><p>@Resource和@Autowired注解都是用来实现依赖注入的。只是@AutoWried按by type自动注入，而@Resource默认按byName自动注入。</p><p>@Resource有两个重要属性，分别是name和type</p><p>spring将name属性解析为bean的名字，而type属性则被解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略，如果使用type属性则使用byType的自动注入策略。如果都没有指定，则通过反射机制使用byName自动注入策略。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@Resource</span> <span class="token punctuation">(</span>name<span class="token operator">=</span> <span class="token string">"baseDao"</span> <span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">BaseDao</span> baseDao<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a>@ControllerAdvice</h2><p>是一个增强的 Controller。使用这个 Controller ，可以实现三个方面的功能：</p><ol><li>全局异常处理</li><li>全局数据绑定</li><li>全局数据预处理<br>异常集中处理，更好的使业务逻辑与异常处理剥离开；其是对Controller层进行拦截</li></ol><p>注意事项: </p><p>一个Controller下多个@ExceptionHandler上的异常类型不能出现一样的，否则运行时抛异常.</p><p>   @ExceptionHandler method mapped for;</p><p>@ExceptionHandler下方法返回值类型支持多种，常见的ModelAndView，@ResponseBody注解标注，ResponseEntity等类型都OK.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorController</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h2><p>统一处理某一类异常，从而能够减少代码重复率和复杂度</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>　　<span class="token comment">/** * 统一错误处理 */</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RequestResults</span> <span class="token function">customException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RequestResults</span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        results<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">RequestStatusEnum</span><span class="token punctuation">.</span>SYSTEM_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        results<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token class-name">RequestStatusEnum</span><span class="token punctuation">.</span>SYSTEM_ERROR<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        results<span class="token punctuation">.</span><span class="token function">setSystemErrorMsg</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        results<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> results<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ResponseStatus"><a href="#ResponseStatus" class="headerlink" title="@ResponseStatus"></a>@ResponseStatus</h2><p>可以将某种异常映射为HTTP状态码</p><h2 id="AOP注解："><a href="#AOP注解：" class="headerlink" title="AOP注解："></a>AOP注解：</h2><h3 id="Aspect"><a href="#Aspect" class="headerlink" title="@Aspect"></a>@Aspect</h3><p>作用是把当前类标识为一个切面供容器读取</p><h3 id="Before"><a href="#Before" class="headerlink" title="@Before"></a>@Before</h3><p>前置通知, 在方法执行之前执行</p><h3 id="After"><a href="#After" class="headerlink" title="@After"></a>@After</h3><p>后置通知, 在方法执行之后执行，final增强，不管是抛出异常或者正常退出都会执行</p><h3 id="AfterRunning"><a href="#AfterRunning" class="headerlink" title="@AfterRunning"></a>@AfterRunning</h3><p>返回通知, 在方法返回结果之后执行，方法正常退出时执行</p><h3 id="AfterThrowing"><a href="#AfterThrowing" class="headerlink" title="@AfterThrowing"></a>@AfterThrowing</h3><p>异常通知, 在方法抛出异常之后<br>异常抛出增强，相当于ThrowsAdvice</p><h3 id="Around"><a href="#Around" class="headerlink" title="@Around"></a>@Around</h3><p>环绕通知, 围绕着方法执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PostDataAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(org.springframework.web.bind.annotation.PostMapping)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"post()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> point<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token comment">//执行方法</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果是返回的结果对象就直接返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">RequestResults</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">RequestResults</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Pointcut"><a href="#Pointcut" class="headerlink" title="@Pointcut"></a>@Pointcut</h3><p>Pointcut是植入Advice的触发条件。每个Pointcut的定义包括2部分，一是表达式，二是方法签名。方法签名必须是 public及void型。可以将Pointcut中的方法看作是一个被Advice引用的助记符，因为表达式不直观，因此我们可以通过方法签名的方式为 此表达式命名。因此Pointcut中的方法只需要方法签名，而不需要在方法体内编写实际代码。<br>切入点，指定说明匹配的方法或者是</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span>定义了这个   <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(org.springframework.web.bind.annotation.PostMapping)"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>　定义了这个包及子包下面的所有方法进行匹配<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AopPointcutClass</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.spring.service..*(..))"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logsMean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AfterReturning"><a href="#AfterReturning" class="headerlink" title="@AfterReturning"></a>@AfterReturning</h3><p>后置增强，相当于AfterReturningAdvice，方法正常退出时执行</p><h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">　　示例<span class="token operator">:</span><span class="token number">1.</span>创建一个配置类，在配置类上添加 <span class="token annotation punctuation">@ComponentScan</span> 注解。该注解默认会扫描该类所在的包下所有的配置类，相当于之前的 <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">&gt;</span>。<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"io.mieux.controller"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token number">2.</span>basePackageClasses属性会去扫描类所在包下的所有组件，而不是指定某个组件！  basePackages 属性会扫描指定的组件，也可以指定当前类的所有组件  但得写成：<span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"controller.**"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>  综上， 可以分析出，<span class="token operator">*</span><span class="token operator">*</span>匹配任意<span class="token keyword">class</span>文件和包，而<span class="token operator">*</span>只能匹配包，因此无法扫描到包下的类，因此也就无法被<span class="token class-name">Spring</span>管理。<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"com.common.config.aspect"</span>        <span class="token punctuation">,</span><span class="token string">"com.common.config.error"</span>        <span class="token punctuation">,</span><span class="token string">"com.common.config.auth"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> basePackageClasses <span class="token operator">=</span> <span class="token class-name">AutoDriveApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h2><p>@Primary 告诉spring 在犹豫的时候优先选择哪一个具体的实现。<br>在有多个实现类在自动注入时，</p><h2 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h2><p>用于指定初始化方法（用在方法上）</p><h2 id="PreDestory"><a href="#PreDestory" class="headerlink" title="@PreDestory"></a>@PreDestory</h2><p>用于指定销毁方法（用在方法上）</p><h2 id="EnableWebSocket"><a href="#EnableWebSocket" class="headerlink" title="@EnableWebSocket"></a>@EnableWebSocket</h2><h2 id="ServerEndpoint"><a href="#ServerEndpoint" class="headerlink" title="@ServerEndpoint"></a>@ServerEndpoint</h2><p>这个注解指明了Encoders and Decoders（编码器和解码器）</p><h2 id="KafkaListener"><a href="#KafkaListener" class="headerlink" title="@KafkaListener"></a>@KafkaListener</h2><p>@KafkaListeners是@KafkaListener的Container Annotation，这也是jdk8的新特性之一，注解可以重复标注。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"topic1"</span><span class="token punctuation">,</span><span class="token string">"topic2"</span><span class="token punctuation">,</span><span class="token string">"topic3"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> consumerRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hbase的学习笔记</title>
      <link href="2021/01/16/cdh/hbase/hbase/"/>
      <url>2021/01/16/cdh/hbase/hbase/</url>
      
        <content type="html"><![CDATA[<h2 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h2><p>谷歌三篇论文中的bigtable衍生而来</p><h4 id="什么是Hbase？"><a href="#什么是Hbase？" class="headerlink" title="什么是Hbase？"></a>什么是Hbase？</h4><p><strong>hbase是一个高可靠，高性能，面向列，可伸缩的分布式存储系统，非关系型数据库，典型的nosql，低延迟，存储容量多</strong>只能够进行简单的增删改查(没有条件)，不支持事务、join、group by等，是对mysql的优化，单位是TB级别的，他的读写是实时的，因为进入memstore后，会返回结果</p><p>单元格在没有值的时候，不会显示null</p><p>hbase是一个面向列的数据库，表中由行排序，一个表中有多个列族，每一个列族由任意数量的列。后序列的值连续存储到磁盘上。hbase根据列族来存储数据的，列族在创建表的时候就必须指定。</p><ul><li><p>表是行的集合。</p></li><li><p>行是列族的集合。</p></li><li><p>列族是列的集合。</p></li><li><p>列是键值对的集合。</p></li></ul><p>是一主多从结构的，Master/Slave架构，将数据存储到hdfs中</p><h4 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h4><p>NoSQL(NoSQL = Not Only SQL )，不仅仅是SQL，具体来说就是跟关系型数据库有些类似（查询低延迟），但同时能够存储的数据类型却更加灵活。</p><p>NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p><h5 id="常见NoSQL数据库"><a href="#常见NoSQL数据库" class="headerlink" title="常见NoSQL数据库"></a>常见NoSQL数据库</h5><p>非关系型数据库——列存储（HBase）<br>非关系型数据库——文档型存储（MongoDb）<br>非关系型数据库——内存式存储（redis）  KV  memorycache<br>非关系型数据库——图形模型（Graph）</p><h4 id="HBase的存储"><a href="#HBase的存储" class="headerlink" title="HBase的存储"></a>HBase的存储</h4><p>hbase的数据存储在hdfs上，在hbase以Hregion进行存储，region可以理解成hdfs上的数据指针</p><p>region是hbase上数据分配的基本单位，每个hregion都会存储在一个regionserver上，regionserver有多个hregion</p><h5 id="meta"><a href="#meta" class="headerlink" title=".meta"></a>.meta</h5><p>Meta Table(hbase:meta)，它存储了集群中所有用户HRegion的位置信息， 存储的节点  region id    起始行健和结束的行健，一个region会在.meta表中对应一条数据</p><p>.meta表也可理解成hbase中的一个表，仍以region为单位进行存储，当数据量过多，同样<strong>会进行分裂</strong>，会存在多个.meta表，会花费大量的时间检索meta；</p><p>​        在此阶段：用户检索信息：先检索.meta获取真正的数据存储在哪个region上，然后进行访问</p><p><strong>-root</strong>表：存储.meta 的索引表，主要记录.meta表的region存储信息          <strong>root表不进行分裂</strong></p><p>在此阶段：用户检索信息：先去找-root表 查找需要的数据在.meta上的存储信息，然后去相应的节点上查询.meta的region,在。meta的信息中查询原始数据存储的region和节点位置，去相应的位置获取原始 数据</p><p>-root表的region位置存在zookeeper中，所以在进行寻址时，先去zookeeper的-root中检索.meta的存储位置，再去相应的meta的region中查询原始数据的region的存储位置，最后去相应的region直接检索要查询的原始数据</p><h4 id="HBase存储格式"><a href="#HBase存储格式" class="headerlink" title="HBase存储格式"></a>HBase存储格式</h4><p>hbase数据库中的数据存储格式都是byte[]字节数组，可以存储任何格式的数据</p><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p><strong>结构化</strong>：数据结构字段含义确定，清晰，典型的如数据库中的表结构</p><p><strong>半结构化</strong>：具有一定结构的，但语义不够明确，典型的如html网页有些字段是确定的(title),有些是不确定的（table）</p><p><strong>非结构化</strong>：杂乱无章的数据，很难按照一个感念去抽取，无规律性</p><p>mysql——–写模式：写数据时进行校验</p><p>hive —–读模式的数据仓库：读数据的时候进行校验</p><p>hbase—–无严格模式的数据库</p><p>hbase中的数据最终存储在hdfs上</p><p><img src="/2021/01/16/cdh/hbase/hbase/image-20191127114211875.png" alt="image-20191127114211875"></p><h5 id="逻辑模型"><a href="#逻辑模型" class="headerlink" title="逻辑模型"></a>逻辑模型</h5><p>HBase使用坐标来识别单元里的数据</p><p>行键+列族+列+时间戳  来取一个值</p><h5 id="存储模型"><a href="#存储模型" class="headerlink" title="存储模型"></a>存储模型</h5><p>存储模型：列式存储</p><p>(还有SQL模式和行式模式)</p><h5 id="物理模型"><a href="#物理模型" class="headerlink" title="物理模型"></a>物理模型</h5><p>物理模型：面向列族</p><p>HBase按照列族分组，每个列族在硬盘上有自己的HFile集合。物理上的隔离允许列族底层HFile层面上分别进行管理。进一步考虑到合并，每个列族的HFile都是单独管理的</p><p>HBase的记录按照键值对存储在HFile里，<strong>HFile自身是二进制文件</strong>，不是直接可读的。一行中一个列族的的数据不一定放在同一个HFile里。一行中的列族数据需要物理存放在一起。</p><p>1.每个列族使用自己的HFile，意味着，当执行读操作时HBase不需要读出一行中的所有数据，只读取用得到的列族数据。</p><p>2.面向列代表着指定单元时，HBase不需要读占位符记录。</p><p>这两个物理细节有利于稀疏数据集合的高效存储和快速读取</p><h4 id="HBase相关概念"><a href="#HBase相关概念" class="headerlink" title="HBase相关概念"></a>HBase相关概念</h4><h5 id="RowKey（行键）"><a href="#RowKey（行键）" class="headerlink" title="RowKey（行键）"></a>RowKey（行键）</h5><p>是Byte array，是表中每条记录的“主键”，方便快速查找，Rowkey的设计非常重要；是一行数据的标志。</p><p>hbase中会对行键进行字典顺序排序</p><h6 id="Rowkey的设计原则"><a href="#Rowkey的设计原则" class="headerlink" title="Rowkey的设计原则"></a>Rowkey的设计原则</h6><p>长度原则</p><p>最大长度64kb，越短越好，不要超过16字节</p><p>散列原则</p><p>唯一原则</p><h6 id="行"><a href="#行" class="headerlink" title="行"></a>行</h6><p>由行键和一个或多个列的值组成</p><h5 id="ColumnFamily（列族）"><a href="#ColumnFamily（列族）" class="headerlink" title="ColumnFamily（列族）"></a>ColumnFamily（列族）</h5><p> 列族，是列的集合，拥有一个名称(string)，包含一个或者多个相关列 。</p><p>列中的数据都 是以二进制形式存在，没有数据类型。在物理存储结构上，每个表中的每个列族单独以一个文件存储</p><p>需要在表创建时就定义好，不能修改太频繁，数量不能太多，最多五个，一般最多三个，不要太多，会因为列族过多而影响效率。列族中的列数量没有限制。</p><h5 id="Column（列）"><a href="#Column（列）" class="headerlink" title="Column（列）"></a>Column（列）</h5><p>属于某一个columnfamily，familyName:columnName，每条记录可动态添加</p><p>hbase的基本单位，HBase列包含一个列族和列限定符，列属于一个列族，列族属于一个行。列中的内容不需要指定类型，这也是关系型数据库的不同之处。</p><h5 id="列限定符"><a href="#列限定符" class="headerlink" title="列限定符"></a>列限定符</h5><p>列族有多个列，列限定符就是某个列。列：tablename:size</p><h5 id="Cell（单元格）"><a href="#Cell（单元格）" class="headerlink" title="Cell（单元格）"></a>Cell（单元格）</h5><p>行键、列族、列和时间戳的结合，通过这三个值的坐标来确定一个单元格。单元格的数据是没有类型的，全部以字节码形式存储。没有值就是空(null)，不占用底层物理存储。</p><h5 id="Timestamp（时间戳）"><a href="#Timestamp（时间戳）" class="headerlink" title="Timestamp（时间戳）"></a>Timestamp（时间戳）</h5><p>是列的一个属性，列的单元格值都有时间戳，系统指定，可以被使用，可根据版本(VERSIONS)或时间戳来区分不同版本的值，不同版本的值按照降序排列，访问时优先读取最新的值，新值比老值更容易读取，如果不指定，返回最新版本的值</p><h5 id="Region（区域）"><a href="#Region（区域）" class="headerlink" title="Region（区域）"></a>Region（区域）</h5><p>HBase自动把表水平划分成的多个区域，划分的区域随着数据的增大而增多</p><h4 id="Hbase的结构组件"><a href="#Hbase的结构组件" class="headerlink" title="Hbase的结构组件"></a>Hbase的结构组件</h4><p><img src="/2021/01/16/cdh/hbase/hbase/1217276-20180502141711373-31653278.png" alt="img"></p><h5 id="1、client"><a href="#1、client" class="headerlink" title="1、client"></a>1、client</h5><p>使用HBase RPC机制与HMaster和HRegionServer进行通信</p><p>Client与HMaster进行通信进行管理类操作</p><p>Client与HRegionServer进行数据读写类操作</p><h5 id="2、HMaster"><a href="#2、HMaster" class="headerlink" title="2、HMaster"></a>2、HMaster</h5><p>1、为Regionserver分配region</p><p>2、负责Regionserver的负载均衡</p><p>3、发现失效的regionserver重新分配其上的region</p><p>4、GFS上的垃圾回收。</p><p>5、处理用户对表的增删改查操作 </p><p>可以启动多个HMaster，需要zookeeper，通过zookeeper保证总有一个HMaster运行。相当于管理者，类似namenode，其他的HMaster处于热备份的状态。</p><p>一般情况下会启动两个HMaster，非Active的HMaster会定期的和Active HMaster通信以获取其最新状态，从而保证它是实时更新的，因而如果启动了多个HMaster反而增加了Active HMaster的负担。</p><h5 id="3、Zookeeper"><a href="#3、Zookeeper" class="headerlink" title="3、Zookeeper"></a>3、Zookeeper</h5><p>zookeeper为HBase集群提供协调服务，保证只有一个HMaster，避免单点问题，存储着所有region的寻址入口，包括-ROOT-表地址、HMaster地址。管理着HMaster和HRegionServer的状态，并在宕机时通知给HMaster，Zookeeper集群使用了一致性协议（paxos协议）保证了每个结点状态的一致性</p><h5 id="3、Hregionserver"><a href="#3、Hregionserver" class="headerlink" title="3、Hregionserver"></a>3、Hregionserver</h5><p>hmaster的管理单位，是从节点，对文件或数据进行处理及计算，client直接连接HRegionServer，并通信获取Hbase中的数据。（从HMaster中获取元数据，找到RowKey所在的HRegion/HregionServer后）</p><p>主要负责响应客户io请求，向HDFS文件系统中读写数据。</p><ol><li>维护Master分配给它的region，处理对这些region的IO请求</li><li>负责切分在运行过程中变得过大的region</li><li></li></ol><h5 id="4、Hlog"><a href="#4、Hlog" class="headerlink" title="4、Hlog"></a>4、Hlog</h5><p>操作日志文件，恢复元数据，类似fsimage和edits</p><p>放置hbase中进行操作的时候没有真正的成功而丢失数据</p><p>每个regionserver有一个hlog，是一个实现wal的类，是一个<strong>预写式日志</strong></p><h5 id="5、Hregion"><a href="#5、Hregion" class="headerlink" title="5、Hregion"></a>5、Hregion</h5><p>Region是hbase中分布式存储和负载均衡的最小单位，但不是最小的存储单元。 </p><p><strong>HBase表按照按照row_key水平进行切割成多个HRegion，Region是按照大小分隔的， 随着region不断增大，当增大到一个阀值的时候，region就会分成两个region。</strong> </p><p><strong>每个Hregion都记录了他的startkey和endkey第一个HRegion的StartKey为空，最后一个HRegion的EndKey为空），rowkey是排序的，client可以通过HMaster定位每个rowkey在那个HRegion。HRegion由HMaster分配到相应的HRegionServer，HRegionServer来负责HRegion的启动和管理</strong></p><h5 id="6、Store"><a href="#6、Store" class="headerlink" title="6、Store"></a>6、Store</h5><p>每个region包含了多个store对象，一个store包含了一个memstore和若干个stroefile。，storefile包含了一个或多个hfile。是真正的存储单位，表中的<strong>每一个列族切一个store</strong>，是最小单位</p><h5 id="7、MemStore"><a href="#7、MemStore" class="headerlink" title="7、MemStore"></a>7、MemStore</h5><p>是一个（写）缓存，在存入数据时，在到hdfs前先插入到memstore中，memstore的文件是存在内存中的，返回插入成功，相当于缓存。<strong>每个列族有一个MemStore</strong></p><h5 id="8、StoreFile"><a href="#8、StoreFile" class="headerlink" title="8、StoreFile"></a>8、StoreFile</h5><p>memstore中达到阀值后，进行溢写文件到storeFile,进行溢写文件后缓存文件将不存在，和HFile一样都是存储HBase数据的，</p><h5 id="9、Hfile"><a href="#9、Hfile" class="headerlink" title="9、Hfile"></a>9、Hfile</h5><p>Hfile由很多个数据块(block)组成，并且有一个固定的结尾块 其中的数据块是由一个header和多个key-value的键值对组成 。 在HDFS中的数据默认会有3份。因此这里不需要HFile 本身的可靠性。 </p><p><strong>HFile自身是二进制文件</strong></p><p>一个列族可以有多个HFile，但是一个HFile不能有多个列族的数据，storeFile存储到hdfs的单位叫hfile，HFile数据格式中的KeyValue数据格式，value是二进制形式存在的</p><h5 id="两个系统表"><a href="#两个系统表" class="headerlink" title="两个系统表"></a>两个系统表</h5><p>HBase中存有两张特殊的表，-ROOT-和.META.。<br>**.META.**：记录了用户表的Region信息，.META.可以有多个regoin。</p><p> -**ROOT-**：记录了.META.表的Region信息，-ROOT-只有一个region。Zookeeper中记录了-ROOT-表的 location</p><p>Client访问用户数据之前需要首先访问zookeeper，然后访问-ROOT-表，接着访问.META.表，最后才能找到用户 数据的位置去访问</p><p>新版本中两个系统表</p><p><strong>namespace</strong>：数据表的结合</p><p><strong>.META.</strong></p><h5 id="默认的两个命名空间"><a href="#默认的两个命名空间" class="headerlink" title="默认的两个命名空间"></a>默认的两个命名空间</h5><p><strong>default</strong>：如果在自定义数据表时，不指明保存在那个命名空间，默认放在default下</p><p><strong>hbase</strong>：</p><h4 id="Hbase的执行流程"><a href="#Hbase的执行流程" class="headerlink" title="Hbase的执行流程"></a>Hbase的执行流程</h4><p>table行的方向分隔成多个hregion，所有的行都按照row key 的字典排序</p><p>HMaster来管理HRegionServer，</p><p>HRegionserer来对数据进行计算</p><p>HRegionserver对HRegion和Hlog进行管理</p><p>HRegion是存储数据的地方，里面有Store</p><p>store是最小的单位</p><p>在有数据进来时，先进入MemStore,在达到阀值后，会进行溢写，溢写到StoreFile，期间对小文件进行合并，随着region不断增大，增大到一个阀值的时候，hregion会分成两个新的hregion，hregion是hbase的分布式存储和负载均衡的最小单元，最小单元就表示不同的hregion可以分布在不同的hregion server上 但是hregion是不会拆分到多个server上</p><h4 id="HBase的写流程和更新流程"><a href="#HBase的写流程和更新流程" class="headerlink" title="HBase的写流程和更新流程"></a>HBase的写流程和更新流程</h4><p>客户端发送请求，从hbase的meta表中查询出需要取得HRegionServer，当客户端将请求发送给相应地HRegionServer，在HRegionServer将put操作写入wal（预写式日志）日志文件中（磁盘中）</p><p>HRegionServer根据put中的tablename和rowkey找到对应的HRegion，然后找到Store，写入到Store中的MemStore，并返回写成功，并通知客户端。</p><p>每一次put/delete请求都是先写入到MemStore中，当MemStore中到达阀值后，flush成一个新的storeFile</p><p><img src="/2021/01/16/cdh/hbase/hbase/1608104-20190222103800677-2022161869.png" alt="img"></p><p>执行写入时会写到两个地方，预写式日志(HLog)和MemStore。HBase默认在写入动作首先记录到这两个地方，以保证数据持久化。 当系统出现意外时，可能导致Memstore中的数据丢失，此时使用HLog来恢复checkpoint之后的数据。 </p><p>MemStore是内存里写入缓存区，在永久写入磁盘之前在这里积累。当MemStore填满后，刷到磁盘，形成一个HFile，将内存中的数据删除，同时删除HLog中的历史数据；每个Store有一个MemStore。</p><h4 id="HBase的读流程"><a href="#HBase的读流程" class="headerlink" title="HBase的读流程"></a>HBase的读流程</h4><p>client先从缓存中定位region，如果没有缓存，就先访问zookeeper(zookeeper保存着meta的)，找到meta表，对应的regionserver的地址。</p><p>client先regionserver发送数据读取的请求，先从memstore中找如果没有，再到blockcache找，再到hfile中找。</p><h4 id="Hbase全分布式的安装"><a href="#Hbase全分布式的安装" class="headerlink" title="Hbase全分布式的安装"></a>Hbase全分布式的安装</h4><p>(保证有一个独立的zookeeper集群)</p><h5 id="1、在上传hbase的tar包后进行解压"><a href="#1、在上传hbase的tar包后进行解压" class="headerlink" title="1、在上传hbase的tar包后进行解压"></a>1、在上传hbase的tar包后进行解压</h5><h5 id="2、修改-etc-profile文件"><a href="#2、修改-etc-profile文件" class="headerlink" title="2、修改/etc/profile文件"></a>2、修改/etc/profile文件</h5><p>source /etc/profile 刷新配置文件</p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME=/root/Downloads/jdk1.8.0_161export PATH=$PATH:$JAVA_HOME/binexport HADOOP_HOME=/root/Downloads/hadoop-2.6.5export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbinexport ZOOKEEPER_HOME=/root/Downloads/zookeeper-3.4.5export PATH=$PATH:$ZOOKEEPER_HOME/binexport HIVE_HOME=/root/Downloads/apache-hive-1.2.0-binexport PATH=$PATH:$HIVE_HOME/binexport FLUME_HOME=/root/Downloads/apache-flume-1.6.0-binexport PATH=$PATH:$FLUME_HOME/binexport HBASE_HOME=/root/Downloads/hbase-1.2.6export PATH=$PATH:$HBASE_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、修改conf下的hbase-env-sh"><a href="#3、修改conf下的hbase-env-sh" class="headerlink" title="3、修改conf下的hbase-env.sh"></a>3、修改conf下的hbase-env.sh</h5><pre class="line-numbers language-none"><code class="language-none">#不使用hbase本身的zookeeperexport HBASE_MANAGES_ZK=falseexport JAVA_HOME=/root/Downloads/jdk1.8.0_161export HADOOP_HOME=/root/Downloads/hadoop-2.6.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、修改conf下的hbase-site-xml"><a href="#4、修改conf下的hbase-site-xml" class="headerlink" title="4、修改conf下的hbase-site.xml"></a>4、修改conf下的hbase-site.xml</h5><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 配置HBase使用分布式方式--&gt;&lt;property&gt;&lt;name&gt;hbase.cluster.distributed&lt;/name&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;&lt;!--hbase中的数据在HDFS上的位置（此处假设HDFS已经做了HA）--&gt;这个目录不需要自己创建，HBase会帮助我们进行配置。如果你自己创建了这个目录，HBase会尝试将其做一个迁移，这可能不是你想要的结果。&lt;property&gt;&lt;name&gt;root.dir&lt;/name&gt;    &lt;value&gt;hdfs://linux01:9000/hbase&lt;/value&gt;&lt;/property&gt;&lt;!--hbase的zookeeper的进程(节点)--&gt;&lt;property&gt;&lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;    &lt;value&gt;linux01,linux02,linux03&lt;/value&gt;&lt;/property&gt;&lt;!--hbase中保存zookeeper数据的文件夹地址--&gt;&lt;property&gt;&lt;name&gt;hbase.zookeeper.property.data.dir&lt;/name&gt;&lt;value&gt;/home/bigdata/hbase/var/zookeeper&lt;/value&gt;&lt;/property&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5、修改conf下的regionservers文件"><a href="#5、修改conf下的regionservers文件" class="headerlink" title="5、修改conf下的regionservers文件"></a>5、修改conf下的regionservers文件</h5><p>配置hbase regin的机器名称，跟hadoop中的slaves文件类似</p><pre class="line-numbers language-none"><code class="language-none">linux01linux02linux03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="6、把hbase的包scp到其他机器上"><a href="#6、把hbase的包scp到其他机器上" class="headerlink" title="6、把hbase的包scp到其他机器上"></a>6、把hbase的包scp到其他机器上</h5><pre class="line-numbers language-none"><code class="language-none">scp -r hbase-1.2.6 root@linux02:/root/Downloads/scp -r hbase-1.2.6 root@linux03:/root/Downloads/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="7、启动hbase"><a href="#7、启动hbase" class="headerlink" title="7、启动hbase"></a>7、启动hbase</h5><p>hbase依赖hadoop和zookeeper，所以在启动Hbase时，保证两者已经启动</p><pre class="line-numbers language-none"><code class="language-none">start-all.sh  启动集群zkServer.sh start  启动zookeeper  三台都得启动start-hbase.sh  启动hbase服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="8、jps查看进程"><a href="#8、jps查看进程" class="headerlink" title="8、jps查看进程"></a>8、jps查看进程</h5><pre class="line-numbers language-none"><code class="language-none">QuorumPeerMain是zookeeper的进程已启动HquorumPeerHbase内部的zookeeper进程已启动HRegionServer HMaster Main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="9、进入HBase"><a href="#9、进入HBase" class="headerlink" title="9、进入HBase"></a>9、进入HBase</h5><pre class="line-numbers language-none"><code class="language-none">hbase shell 进入Hbase的客户端quit退出Hbase客户端sh stop-hbase.sh 关闭Hbase服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="10、浏览器中查看hbase的监控页面"><a href="#10、浏览器中查看hbase的监控页面" class="headerlink" title="10、浏览器中查看hbase的监控页面"></a>10、浏览器中查看hbase的监控页面</h5><pre class="line-numbers language-none"><code class="language-none">linux01:16010可以查看master节点运行情况每个regionserver的运行情况已经创建数据表的状态默认配置项 (hbase configuration可以找到hbase的所有配置项，都可以放到hbase-site.xml中进行配置)start-hbase.sh启动的机器就是HMaster所在的的位置只能通过HMaster访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HBase命令"><a href="#HBase命令" class="headerlink" title="HBase命令"></a>HBase命令</h4><h6 id="查看命名空间"><a href="#查看命名空间" class="headerlink" title="查看命名空间"></a>查看命名空间</h6><pre class="line-numbers language-none"><code class="language-none">list_namespace  列出所有的命名空间//在HBase中有两个默认的命名空间,在创建表时不指定命名空间时会默认放在defaultNAMESPACEdefault<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="命名空间查看表"><a href="#命名空间查看表" class="headerlink" title="命名空间查看表"></a>命名空间查看表</h6><pre class="line-numbers language-none"><code class="language-none">list_namespace_tables '命名空间名称'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h6><pre class="line-numbers language-none"><code class="language-none">create_namespace '命名空间名称'例：create_namespace 'n1'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="删除命名空间"><a href="#删除命名空间" class="headerlink" title="删除命名空间"></a>删除命名空间</h6><pre class="line-numbers language-none"><code class="language-none">drop_namespace '命名空间名称'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h6><pre class="line-numbers language-none"><code class="language-none">list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="查询服务器的状态"><a href="#查询服务器的状态" class="headerlink" title="查询服务器的状态"></a>查询服务器的状态</h6><pre class="line-numbers language-none"><code class="language-none">status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="查看HBase版本"><a href="#查看HBase版本" class="headerlink" title="查看HBase版本"></a>查看HBase版本</h6><pre class="line-numbers language-none"><code class="language-none">version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h6><pre class="line-numbers language-none"><code class="language-none">语法：create '表名称','列族'例：create 'n1:student','name','info','address'//创建数据表时 列族设计固定即可(列族最多5个  习惯使用不要超过3个  列族的个数越少越好)//'n1:'可以指定表放在哪个命名空间中//在HBase中有两个默认的命名空间,在创建表时不指定命名空间时会默认放在defaultNAMESPACEdefault<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h6><pre class="line-numbers language-none"><code class="language-none">drop '表名'在删除表的时候需要把表禁用disable '表名' 禁用表enable '表名' 开启表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="判断表是否enable开启"><a href="#判断表是否enable开启" class="headerlink" title="判断表是否enable开启"></a>判断表是否enable开启</h6><pre class="line-numbers language-none"><code class="language-none">is_enabled '表名'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="判断表是否disable禁用"><a href="#判断表是否disable禁用" class="headerlink" title="判断表是否disable禁用"></a>判断表是否disable禁用</h6><pre class="line-numbers language-none"><code class="language-none">is_disabled '表名'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="插入记录-amp-amp-修改数据"><a href="#插入记录-amp-amp-修改数据" class="headerlink" title="插入记录&amp;&amp;修改数据"></a>插入记录&amp;&amp;修改数据</h6><pre class="line-numbers language-none"><code class="language-none">put '表名','row_key行名','列名','值'例：put 'n1:member2','zhangsan','info:age','99'//必须指定rowkey的值。//在hbase没有修改，没有update，不是修改原值，二十在添加一个新版本的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="增加列族的版本"><a href="#增加列族的版本" class="headerlink" title="增加列族的版本"></a>增加列族的版本</h6><pre class="line-numbers language-none"><code class="language-none">//将列族f1的版本扩大3。alter 'n1:t1', NAME =&gt; 'f1', VERSIONS =&gt; 3//修改值三次后put 'n1:t1','r1','f1:c1','one01'put 'n1:t1','r1','f1:c1','one02'put 'n1:t1','r1','f1:c1','one03'get 'n1:t1', 'r1', {COLUMN =&gt; 'f1:c1', VERSIONS =&gt; 3}会同时显示 'f1:c1' 3个版本的值get 'n1:t1','r1','f1:c1'只显示 'f1:c1' 最高版本即最新的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="查询全表数据"><a href="#查询全表数据" class="headerlink" title="查询全表数据"></a>查询全表数据</h6><pre class="line-numbers language-none"><code class="language-none">scan '表名'scan '表名','列名称'scan '表名',{COLUMNS=&gt;'列族'}scan '表名',{COLUMNS=&gt;['列','列']}//显示表中列族所有的版本号的值scan 'n1:t1', {RAW =&gt; true, VERSIONS =&gt; 3}scan 'member2',{COLUMNS=&gt;['info:age','info:birthday']}//scan只适合全表扫描，不适合多条件查询，不要轻易使用scan//aip中可以使用scan对象结合hbase，api中提供filter过滤器配合查询<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="单行查询"><a href="#单行查询" class="headerlink" title="单行查询"></a>单行查询</h6><pre class="line-numbers language-none"><code class="language-none">get '表名','行名','列名'例：get 'n1:t1','r1' //查询 'n1:t1' 数据表中  'r1' 行的数据例：get 'n1:t1','r1','f1:c1'//查询 'n1:t1' 数据表中  'r1'行中  'f1:c1' 列的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h6><pre class="line-numbers language-none"><code class="language-none">delete '表名','行名','列名'//删除一行中的一部分delete 'n1:t1','r2','f1:c1'//一次性删除指定行的所有数据deleteall 'n1:t1','r2'//hbase表中没有实际删除数据，而只是给数据打上一个删除标记<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="清空表数据"><a href="#清空表数据" class="headerlink" title="清空表数据"></a>清空表数据</h6><pre class="line-numbers language-none"><code class="language-none">truncate '表名'这是对表中数据进行操作是将表删除后再重新创建<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="查看行数"><a href="#查看行数" class="headerlink" title="查看行数"></a>查看行数</h6><pre class="line-numbers language-none"><code class="language-none">count '表名'count 'member2'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="判断表是否存在"><a href="#判断表是否存在" class="headerlink" title="判断表是否存在"></a>判断表是否存在</h6><pre class="line-numbers language-none"><code class="language-none">语法：exists '表名'实例：exists 'member'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="表的字段信息"><a href="#表的字段信息" class="headerlink" title="表的字段信息"></a>表的字段信息</h6><pre class="line-numbers language-none"><code class="language-none">语法：describe '表名'实例：describe 'user'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="删除一个列族"><a href="#删除一个列族" class="headerlink" title="删除一个列族"></a>删除一个列族</h6><pre class="line-numbers language-none"><code class="language-none">语法：alter '表名',NAME=&gt;'列名',METHOD=&gt;'delete'实例：alter 'member',NAME=&gt;'member_id',METHOD=&gt;'delete'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="timestamp时间戳"><a href="#timestamp时间戳" class="headerlink" title="timestamp时间戳"></a>timestamp时间戳</h6><pre class="line-numbers language-none"><code class="language-none">get '表名','行名',{COLUMN=&gt;'列名',TIMESTAMP=&gt;时间戳}可以根据时间戳来获取不同的版本get '表名','行名',{COLUMN=&gt;[],TIMESTAMP=&gt;时间戳}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="flush刷新"><a href="#flush刷新" class="headerlink" title="flush刷新"></a>flush刷新</h6><p><strong>flush是把每个store中的memstore内存中的数据手动刷新到硬盘保存</strong><br>每次执行一次对表或者对区域flush操作，都会多一份物理数据文件<br>flush刷新可以是定时或者定量在每次memstore写满时需要刷出数据，可以使用配置文件定memstore内存<br><strong>flush 之后 更新的过程数据  和 删除打标记数据还是存在</strong></p><h6 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h6><pre class="line-numbers language-none"><code class="language-none">major_compact 'n1:t1'//清除无用数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行之后修改的过程版本还在，但是打删除标记的无用数据直接被清除。</p><p>对于多个flush产生物理文件进行合并，合并成一个文件</p><h6 id="切割"><a href="#切割" class="headerlink" title="切割"></a>切割</h6><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="预切割"><a href="#预切割" class="headerlink" title="预切割"></a>预切割</h6><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="HBase的API"><a href="#HBase的API" class="headerlink" title="HBase的API"></a>HBase的API</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建连接</span><span class="token class-name">Configuration</span> conf<span class="token operator">=</span> <span class="token class-name">HBaseConfiguration</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"linux01:2181"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="在hbase中创建表"><a href="#在hbase中创建表" class="headerlink" title="在hbase中创建表"></a>在hbase中创建表</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//操作单位是HBaseAdmin</span><span class="token class-name">HBaseAdmin</span> admin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HBaseAdmin</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//表名</span><span class="token class-name">HTableDescriptor</span> tabledesc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTableDescriptor</span><span class="token punctuation">(</span><span class="token string">"biaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//列族名称</span><span class="token class-name">HColumnDescriptor</span> columns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HColumnDescriptor</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//列族名称</span><span class="token class-name">HColumnDescriptor</span> columns2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HColumnDescriptor</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分别把列添加进表中</span>tabledesc<span class="token punctuation">.</span><span class="token function">addFamily</span><span class="token punctuation">(</span>columns<span class="token punctuation">)</span><span class="token punctuation">;</span>tabledesc<span class="token punctuation">.</span><span class="token function">addFamily</span><span class="token punctuation">(</span>columns2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果表在hbase中已存在，禁用表，然后删除</span><span class="token keyword">if</span> <span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">tableExists</span><span class="token punctuation">(</span><span class="token string">"biaoming"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>admin<span class="token punctuation">.</span><span class="token function">disableTable</span><span class="token punctuation">(</span><span class="token string">"biaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>admin<span class="token punctuation">.</span><span class="token function">deleteTable</span><span class="token punctuation">(</span><span class="token string">"biaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//在这里创建表</span>admin<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span>tabledesc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"建表完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="往HBase表中插入数据"><a href="#往HBase表中插入数据" class="headerlink" title="往HBase表中插入数据"></a>往HBase表中插入数据</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token comment">//新建表操作单位</span><span class="token class-name">HTable</span> htable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTable</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> <span class="token string">"biaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//row_key  行</span><span class="token class-name">Put</span> put <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Put</span><span class="token punctuation">(</span><span class="token string">"gaoda"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//column  创建列族 列 和 cell的值 都是byte数组形式</span>put<span class="token punctuation">.</span><span class="token function">addColumn</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"bianxing"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"chenggong"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>put<span class="token punctuation">.</span><span class="token function">addColumn</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"bianxing"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"shibai"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>put<span class="token punctuation">.</span><span class="token function">addColumn</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"bianxing"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"meinengliang"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>put<span class="token punctuation">.</span><span class="token function">addColumn</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"bianxing"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//正式插入表</span>htable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>put<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入数据成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="list来插入数据"><a href="#list来插入数据" class="headerlink" title="list来插入数据"></a>list来插入数据</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//这里用的是list来插入数据</span><span class="token comment">//普通的插入数据很繁琐，list来插入制定规则的</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertlistdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span><span class="token class-name">HTable</span> htable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTable</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> <span class="token string">"biaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Put</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Put</span> put <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Put</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"gaoda"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>put<span class="token punctuation">.</span><span class="token function">addColumn</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"bianxing"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>put<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>htable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list数据插入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何避免读、写HBaes时访问热点问题？"><a href="#如何避免读、写HBaes时访问热点问题？" class="headerlink" title="如何避免读、写HBaes时访问热点问题？"></a>如何避免读、写HBaes时访问热点问题？</h3><p>（1）加盐<br>是在rowkey的前面增加随机数，具体就是给rowkey分配一个随机前缀以使得它和之前的rowkey的开头不同。给多少个前缀？ 这个数量应该和我们想要分散数据到不同的region的数量一致（类似hive里面的分桶）。<br>（ 自己理解： 即region数量是一个范围，我们给rowkey分配一个随机数，前缀（随机数）的范围是region的数量）<br>加盐之后的rowkey就会根据随机生成的前缀分散到各个region上，以避免热点。</p><p>（2）哈希<br>哈希会使同一行永远用一个前缀加盐。哈希也可以使负载分散到整个集群，但是读却是可以预测的。使用确定的哈希可以让客户端重构完整的rowkey，可以使用get操作准确获取某一个行数据。</p><p>（3）反转<br>第三种防止热点的方法是反转固定长度或者数字格式的rowkey。这样可以使得rowkey中经常改变的部分（最没有意义的部分）放在前面。这样可以有效的随机rowkey，但是牺牲了rowkey的有序性。反转rowkey的例子：以手机号为rowkey，可以将手机号反转后的字符串作为rowkey，从而避免诸如139、158之类的固定号码开头导 致的热点问题。</p><p>（4）时间戳反转<br>一个常见的数据处理问题是快速获取数据的最近版本，使用反转的时间戳作为rowkey的一部分对这个问题十分有用，可以用Long.Max_Value – timestamp追加到key的末尾，例如[key][reverse_timestamp] ,[key] 的最新值可以通过scan [key]获得[key]的第一条记录，因为HBase中rowkey是有序的，第一条记录是最后录入的数据。</p><p>（5）尽量减少行和列的大小<br>在HBase中，value永远和它的key一起传输的。当具体的值在系统间传输时，它的rowkey，列名，时间戳也会一起传输。如果你的rowkey和列名很大，HBase storefiles中的索引（有助于随机访问）会占据HBase分配的大量内存，因为具体的值和它的key很大。可以增加block大小使得storefiles索引再更大的时间间隔增加，或者修改表的模式以减小rowkey和列名的大小。压缩也有助于更大的索引。</p><p>（6）其他办法<br>列族名的长度尽可能小，最好是只有一个字符。冗长的属性名虽然可读性好，但是更短的属性名存储在HBase中会更好。也可以在建表时预估数据规模，预留region数量，例如create ‘myspace:mytable’, SPLITS =&gt; [01,02,03,,…99]<br>————————————————<br>版权声明：本文为CSDN博主「大数据私房菜」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/zuochang_liu/article/details/105274316">https://blog.csdn.net/zuochang_liu/article/details/105274316</a></p><h3 id="布隆过滤器在Hbase的应用"><a href="#布隆过滤器在Hbase的应用" class="headerlink" title="布隆过滤器在Hbase的应用"></a>布隆过滤器在Hbase的应用</h3>]]></content>
      
      
      <categories>
          
          <category> Hbase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hbase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-框架一</title>
      <link href="2021/01/16/spring/mybatis-de-jian-dan-shi-yong-kuang-jia-yi/"/>
      <url>2021/01/16/spring/mybatis-de-jian-dan-shi-yong-kuang-jia-yi/</url>
      
        <content type="html"><![CDATA[<p>最近要写接口，赶时间，看了下黑马视频，原理没有涉及到，后续再好好刷一次，具体掌握如何使用</p><blockquote><p>参考文章:  <a href="https://blog.csdn.net/hejingyuan6/article/details/36203505#">https://blog.csdn.net/hejingyuan6/article/details/36203505#</a></p></blockquote><p>@[toc]</p><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="什么是Mybatis？"><a href="#什么是Mybatis？" class="headerlink" title="什么是Mybatis？"></a>什么是Mybatis？</h2><p>持久层框架，底层是用java编写的</p><p>它封装了jdbc操作的很多细节，只用关注sql本身，无需关注注册驱动，创建链接等繁杂过程，使用了ORM(对象关系映射)思想实现了结果集的封装</p><h2 id="技术解决方案"><a href="#技术解决方案" class="headerlink" title="技术解决方案"></a>技术解决方案</h2><p>JDBC：</p><p>connection</p><p>PreparedStatement</p><p>ResultSet</p><p>Spring的JdbcTemplate</p><p>Spring对JDBC的简单封装</p><p>Apache的DBUtils</p><p>他和Spring的JDBCTemplate很像，也是对JDBC的简单封装</p><h2 id="Mybatis环境搭建"><a href="#Mybatis环境搭建" class="headerlink" title="Mybatis环境搭建"></a>Mybatis环境搭建</h2><ul><li><p>创建maven工程导入坐标</p></li><li><p>创建实体类和dao层接口</p></li><li><p>创建mybatis的主配置文件</p></li><li><p>创建映射配置文件</p></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>创建.xml文件是为了保持和之前<strong>文件目录结构</strong>保持一致。持久层操作接口名称和映射文件一一对应</p></li><li><p>mybatis映射文件位置必须和dao层接口的包结果相同</p></li><li><p>映射配置文件的mapper标签namespace属性的取值必须是dao接口的全限定类名</p></li><li><p>映射配置文件操作配置，select id 属性值必须是dao接口的方法名</p></li></ul><h3 id="搭建的不同方式"><a href="#搭建的不同方式" class="headerlink" title="搭建的不同方式"></a>搭建的不同方式</h3><p>有两种方式，一种是XML文件的方式，一种是注解的方式，还可以实现你的接口来实现功能</p><h4 id="XML文件的方式配置"><a href="#XML文件的方式配置" class="headerlink" title="XML文件的方式配置"></a>XML文件的方式配置</h4><p>使用XML方式，需要在主配置文件中指定mapper的<strong>resource</strong><br>不需要使用注解，需要你生成一个XML文件来存放映射关系</p><p>使用XML方式，需要在主配置文件中指定mapper的<strong>resource</strong><br><img src="https://img-blog.csdnimg.cn/20201125202927769.png#pic_center" alt="在这里插入图片描述"><br>不需要使用注解，需要你生成一个XML文件来存放映射关系</p><h5 id="主配置文件："><a href="#主配置文件：" class="headerlink" title="主配置文件："></a>主配置文件：</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置properties--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcConfig.properties<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--使用typeAliases配置别名，它只能配置domain中类的别名 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.domain<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置环境--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 配置mysql的环境--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 配置事务 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--配置连接池--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置映射文件的位置 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.dao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--指定在哪个类中--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mybatisexercise.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--指定类中的方法和返回值类型--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mybatisexercise.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from user;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h4><p>使用注解的方式，需要在主配置文件中指定mapper的<strong>class</strong></p><p>然后在你的接口上使用注解</p><h3 id="读取配置文件两种方式"><a href="#读取配置文件两种方式" class="headerlink" title="读取配置文件两种方式"></a>读取配置文件两种方式</h3><h4 id="使用类加载器"><a href="#使用类加载器" class="headerlink" title="使用类加载器"></a>使用类加载器</h4><p>它只能读取类路径的配置文件</p><p>使用servletContext对象的个体Real Path()</p><h2 id="工厂模式的优势"><a href="#工厂模式的优势" class="headerlink" title="工厂模式的优势"></a>工厂模式的优势</h2><p>降低类之间的依赖关系，生产SqlSession就使用了工厂模式</p><h2 id="代理模式的优势"><a href="#代理模式的优势" class="headerlink" title="代理模式的优势"></a>代理模式的优势</h2><p>代理是一种常用的设计模式，其目的就是为其他对象提供一个代理以控制对某个对象的访问。代理类负责为委托类预处理消息，过滤消息并转发消息，以及进行消息被委托类执行后的后续处理。<br>更通俗的说，代理解决的问题当两个类需要通信时，引入第三方代理类，将两个类的关系解耦，让我们只了解代理类即可，而且代理的出现还可以让我们完成与另一个类之间的关系的统一管理，但是切记，代理类和委托类要实现相同的接口，因为代理真正调用的还是委托类的方法。</p><h3 id="1、静态代理"><a href="#1、静态代理" class="headerlink" title="1、静态代理"></a>1、静态代理</h3><p>由程序员创建代理类或特定工具自动生成源代码再对其编译。在程序运行前代理类的.class文件就已经存在了。<br><strong>优点：</strong></p><p>代理使客户端不需要知道实现类是什么，怎么做的，而客户端只需知道代理即可（解耦合），对于如上的客户端代码，newUserManagerImpl()可以应用工厂将它隐藏，如上只是举个例子而已。</p><p><strong>缺点：</strong><br>理类和委托类实现了相同的接口，代理类通过委托类实现了相同的方法。这样就出现了大量的代码重复。如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。</p><p>2）代理对象只服务于一种类型的对象，如果要服务多类型的对象。势必要为每一种对象都进行代理，静态代理在程序规模稍大时就无法胜任了</p><h3 id="2、动态代理"><a href="#2、动态代理" class="headerlink" title="2、动态代理"></a>2、动态代理</h3><p>动态代理是在运行时，通过反射机制实现动态代理，并且能够代理各种类型的对象</p><p>在程序运行时运用反射机制动态创建而成。<br>在Java中要想实现动态代理机制，需要java.lang.reflect.InvocationHandler  接口和 java.lang.reflect.Proxy 类的支持</p><p>java.lang.reflect.InvocationHandler接口的定义如下：</p><pre class="line-numbers language-none"><code class="language-none">//Object proxy:被代理的对象  //Method method:要调用的方法  //Object[] args:方法调用时所需要参数  public interface InvocationHandler {      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>java.lang.reflect.Proxy类的定义如下：</p><pre class="line-numbers language-none"><code class="language-none">//CLassLoader loader:类的加载器//Class&lt;?&gt; interfaces:得到全部的接口//InvocationHandler h:得到InvocationHandler接口的子类的实例public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) throws IllegalArgumentException<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>具体实现：</p><pre class="line-numbers language-none"><code class="language-none">//动态代理类只能代理接口（不支持抽象类），代理类都需要实现InvocationHandler类，实现invoke方法。该invoke方法就是调用被代理接口的所有方法时需要调用的，该invoke方法返回的值是被代理接口的一个实现类   public class LogHandler implements InvocationHandler { // 目标对象private Object targetObject;//绑定关系，也就是关联到哪个接口（与具体的实现类绑定）的哪些方法将被调用时，执行invoke方法。            public Object newProxyInstance(Object targetObject){this.targetObject=targetObject;//该方法用于为指定类装载器、一组接口及调用处理器生成动态代理类实例  //第一个参数指定产生代理对象的类加载器，需要将其指定为和目标对象同一个类加载器//第二个参数要实现和目标对象一样的接口，所以只需要拿到目标对象的实现接口//第三个参数表明这些被拦截的方法在被拦截时需要执行哪个InvocationHandler的invoke方法//根据传入的目标返回一个代理对象return Proxy.newProxyInstance(targetObject.getClass().getClassLoader(),targetObject.getClass().getInterfaces(),this);}@Override//关联的这个实现类的方法被调用时将被执行/*InvocationHandler接口的方法，proxy表示代理，method表示原对象被调用的方法，args表示方法的参数*/public Object invoke(Object proxy, Method method, Object[] args)throws Throwable {System.out.println("start--&gt;&gt;");for(int i=0;i&lt;args.length;i++){System.out.println(args[i]);}Object ret=null;try{/*原对象方法调用前处理日志信息*/System.out.println("satrt--&gt;&gt;");//调用目标方法ret=method.invoke(targetObject, args);/*原对象方法调用后处理日志信息*/System.out.println("success--&gt;&gt;");}catch(Exception e){e.printStackTrace();System.out.println("error--&gt;&gt;");throw e;}return ret;} }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点：</strong><br>我们可以通过LogHandler代理不同类型的对象，如果我们把对外的接口都通过动态代理来实现，那么所有的函数调用最终都会经过invoke函数的转发，因此我们就可以在这里做一些自己想做的操作，比如日志系统、事务、拦截器、权限控制等。这也就是AOP(面向切面编程)的基本原理。</p><h3 id="静态代理和动态代理区别："><a href="#静态代理和动态代理区别：" class="headerlink" title="静态代理和动态代理区别："></a>静态代理和动态代理区别：</h3><p>动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。而且动态代理的应用使我们的类职责更加单一，复用性更强</p><h2 id="Mybatis工作原理"><a href="#Mybatis工作原理" class="headerlink" title="Mybatis工作原理"></a>Mybatis工作原理</h2><ol><li>Mybatis在运行时，首先通过dom4j(还有其他XML解析技术)解析XML来解析你的SqlMapConfig文件，转换成input stream流。</li><li>使用input stream中的数据取出来生成一个Configuration配置对象，把Configuration中的参数取出来创建mysql connect对象，并构建SqlSessionFactory。</li><li>SqlSessionFactory单例模式创建SqlSession对象</li><li>SqlSession对象需要传入 .class 参数，并返回一个 .class接口的动态代理对象，供你调用</li><li>可以对这个对象进行操作，在执行时通过反射和动态代理来执行你的语句。</li></ol><h3 id="pojo对象"><a href="#pojo对象" class="headerlink" title="pojo对象"></a>pojo对象</h3><p>使用ognl对象解析对象字段的值，#{} 或 ${}括号中的值是pojo属性名称</p><h3 id="Mysql配置文件"><a href="#Mysql配置文件" class="headerlink" title="Mysql配置文件"></a>Mysql配置文件</h3><p>Mysql在Window中不区分大小写，在linx中区分大小写</p><h2 id="mybatis实体类和数据库的字段不匹配两种解决方案："><a href="#mybatis实体类和数据库的字段不匹配两种解决方案：" class="headerlink" title="mybatis实体类和数据库的字段不匹配两种解决方案："></a>mybatis实体类和数据库的字段不匹配两种解决方案：</h2><h3 id="一、更改xml配置文件sql语句和参数"><a href="#一、更改xml配置文件sql语句和参数" class="headerlink" title="一、更改xml配置文件sql语句和参数"></a>一、更改xml配置文件sql语句和参数</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span><span class="token punctuation">&gt;</span></span>insert into table (username,Sex) values(#{username},#{UserSex});<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>select username,sex as UserSex from user;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、ResultMap"><a href="#二、ResultMap" class="headerlink" title="二、ResultMap"></a>二、ResultMap</h3><p>上面那种方法语句多的时候太过于繁琐</p><p>可以使用resultMap</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--左边的是实体类字段，右边的是数据库字段，一一对应--&gt;</span><span class="token comment">&lt;!-- 配置 查询结果的列名和实体类的属性名的对应关系 ，这样写不区分大小写--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uSeR<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 主键字段的对应 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--非主键字段的对应--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userAddress<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userSex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userBirthday<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 根据queryVo的条件查询用户 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findUserByVo<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.domain.QueryVo<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select * from user where username like #{user.username}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><p>在使用ResuleMap时，在返回值定义要使用resultMap，而不是使用ResultType!  否则会找不到你这个类型而报错</p><h2 id="创建自定义注解"><a href="#创建自定义注解" class="headerlink" title="创建自定义注解"></a>创建自定义注解</h2><p>创建一个接口</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">@Retention(RetentionPolicy.RUNTIME)@Target(ElementType.METHOD)public @interface Select {    /**     * 配置SQL语句的     * @return     */    String value();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在代码上方使用注解</p><pre class="line-numbers language-none"><code class="language-none">@Target说明了 Annotation 所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。　　作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）　　取值(ElementType)有：　　　　1.CONSTRUCTOR:用于描述构造器　　　　　　　　2.FIELD:用于描述域　　　　　　　　3.LOCAL_VARIABLE:用于描述局部变量　　　　　　　　4.METHOD:用于描述方法　　　　　　　　5.PACKAGE:用于描述包　　　　　　　　6.PARAMETER:用于描述参数　　　　　　　　7.TYPE:用于描述类、接口(包括注解类型) 或enum声明　　　　@Retention：　　@Retention定义了该 Annotation 被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。　　作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）　　取值（RetentionPoicy）有：　　　　1.SOURCE:在源文件中有效（即源文件保留）　　　　2.CLASS:在class文件中有效（即class保留）　　　　3.RUNTIME:在运行时有效（即运行时保留）　　　　　　　　@Documented:　　@Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。　　@Inherited：　　@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。　　注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。　　当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JNDI数据源"><a href="#JNDI数据源" class="headerlink" title="JNDI数据源"></a>JNDI数据源</h2><p>JNDI（java naming and directory interface） 模仿的window系统的注册表。</p><p>注册表是kv类型的。k是绝对路径+名称，v是存放的数据。</p><p>JNDI中存放的就是对象。</p><p>JNDI视频没看，后期要看可以看58.59这两个视频</p><h2 id="XML标签导入外部配置文件"><a href="#XML标签导入外部配置文件" class="headerlink" title="XML标签导入外部配置文件"></a>XML标签导入外部配置文件</h2><h4 id="resource方式"><a href="#resource方式" class="headerlink" title="resource方式"></a>resource方式</h4><p>resuource来指定classpath的下的配置文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 配置properties--&gt;&lt;properties resource="jdbcConfig.properties"&gt;&lt;/properties&gt;&lt;dataSource type="POOLED"&gt;    &lt;property name="driver" value="${jdbc.driver}"&gt;&lt;/property&gt;    &lt;property name="url" value="${jdbc.url}"&gt;&lt;/property&gt;    &lt;property name="username" value="${jdbc.username}"&gt;&lt;/property&gt;    &lt;property name="password" value="${jdbc.password}"&gt;&lt;/property&gt;&lt;/dataSource&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="url绝对路径的方式"><a href="#url绝对路径的方式" class="headerlink" title="url绝对路径的方式"></a>url绝对路径的方式</h4><pre class="line-numbers language-none"><code class="language-none">&lt;properties url="G:\BaiduNetdiskDownload\第三天代码\day03_eesy_01datasourceAndTx\src\main\resources\jdbcConfig.properties"&gt;&lt;/properties&gt;&lt;dataSource type="POOLED"&gt;    &lt;property name="driver" value="${jdbc.driver}"&gt;&lt;/property&gt;    &lt;property name="url" value="${jdbc.url}"&gt;&lt;/property&gt;    &lt;property name="username" value="${jdbc.username}"&gt;&lt;/property&gt;    &lt;property name="password" value="${jdbc.password}"&gt;&lt;/property&gt;&lt;/dataSource&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实体类和实体类接口别名"><a href="#实体类和实体类接口别名" class="headerlink" title="实体类和实体类接口别名"></a>实体类和实体类接口别名</h2><h4 id="TypeAliases"><a href="#TypeAliases" class="headerlink" title="TypeAliases"></a>TypeAliases</h4><p>在使用标签的时候，返回值中写全路径，很繁琐</p><p>可以使用typeAliases来去进行取别名<br>虽然配置了，但一次一个类，太麻烦</p><pre class="line-numbers language-none"><code class="language-none">&lt;typeAliases&gt;       &lt;!--typeAlias用于配置别名。type属性指定的是实体类全限定类名。alias属性指定别名，当指定了别名就再区分大小写 --&gt;       &lt;typeAlias type="com.itheima.domain.User" alias="user"&gt;&lt;/typeAlias&gt;&lt;/typeAliases&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h4><p>使用上面的方式进行取别名，但是如果实体类太多，工作还是很繁琐，就可以使用<package>标签来完成<br>直接配置一个包里面所有的类的别名</package></p><pre class="line-numbers language-none"><code class="language-none"> &lt;typeAliases&gt; &lt;!--可以指定一个包，里面的类别名全部都是是类的名称，不区分大小写--&gt; &lt;/typeAliases&gt;&lt;package name="com.itheima.domain"&gt;&lt;/package&gt; &lt;/typeAliases&gt;&lt;!--也可以写在mappers中，package是指定dao接口所在的包，指定了之后不需要写mapper和resource了或者class了--&gt;&lt;mappers&gt;        &lt;!--  &lt;mapper resource="com/mybatisexercise/dao/UserDao.xml"/&gt;&lt;mapper class="com.mybatisexercise.dao.UserDao"/&gt;--&gt;    &lt;package name="com.exercise.dao"&gt;&lt;/package&gt;    &lt;/mappers&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><p>上面两个注解只能在SqlMapConfig.xml中使用，不能在和实体类对应的xml文件中使用</p><h2 id="Mybatis连接池"><a href="#Mybatis连接池" class="headerlink" title="Mybatis连接池"></a>Mybatis连接池</h2><h4 id="什么是连接池？"><a href="#什么是连接池？" class="headerlink" title="什么是连接池？"></a>什么是连接池？</h4><p>连接池可以减少我们获取链接所消耗的时间和开销</p><p>线程池，就是一个线程安全的集合来存储着连接对象。还实现了队列的特性：先进先出</p><h2 id="Mybatis连接池-1"><a href="#Mybatis连接池-1" class="headerlink" title="Mybatis连接池"></a>Mybatis连接池</h2><h3 id="三种类型的连接池"><a href="#三种类型的连接池" class="headerlink" title="三种类型的连接池"></a>三种类型的连接池</h3><p>主配置文件SQLMapConfig.xml中的dataSource标签，type就是表示使用何种连接池的方式</p><pre class="line-numbers language-none"><code class="language-none">type的取值：POOLED采用用了传统的javax.sql.DataSource规范的连接池mybatis中有针对规范的实现UNPOOLED采用了传统获取连接的方式，虽然也实现了javax.sql.DataSource接口，但是没有使用池的思想。他每次使用都会创建一个新的连接JNDI采用了服务器提供的JNDI技术实现的，来获取DataSource对象，不同服务器能拿到的DataSource对象是不一样的。注意：如果不是Web或者Maven的war工程是不能使用的，我们实际开发中使用的是Tomcat服务器，采用的连接池使用的是dbcp连接池 &lt;dataSource type="POOLED"&gt;&lt;!-- 配置连接数据库的4个基本信息 --&gt;&lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;&lt;property name="url" value="jdbc:mysql://localhost:3306/eesy_mybatis"/&gt;&lt;property name="username" value="root"/&gt;&lt;property name="password" value="1234"/&gt;&lt;/dataSource&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mybatis事务"><a href="#Mybatis事务" class="headerlink" title="Mybatis事务"></a>Mybatis事务</h2><h3 id="什么是事务？事物的四大特性"><a href="#什么是事务？事物的四大特性" class="headerlink" title="什么是事务？事物的四大特性"></a>什么是事务？事物的四大特性</h3><p> 对数据库的事务而言，应该具有以下几点：创建（create）、提交（commit）、回滚（rollback）、关闭（close）。对应地，MyBatis将事务抽象成了Transaction接口：其接口定义如下：<br> <img src="https://img-blog.csdnimg.cn/img_convert/30e58e0af991a2ea4a2b3aa9577b5d97.png" alt="img"><br> 不考虑隔离性会产生的问题</p><h3 id="事务的四种隔离机制"><a href="#事务的四种隔离机制" class="headerlink" title="事务的四种隔离机制"></a>事务的四种隔离机制</h3><blockquote><p>原文章连接：<a href="https://www.cnblogs.com/ubuntu1/p/8999403.html">https://www.cnblogs.com/ubuntu1/p/8999403.html</a></p></blockquote><p>数据库事务的隔离级别有4种，由低到高分别为<strong>Read uncommitted</strong> 、<strong>Read committed</strong> 、<strong>Repeatable read</strong> 、<strong>Serializable</strong> 。而且，在事务的并发操作中可能会出现脏读，不可重复读，幻读。</p><h4 id="Read-uncommitted"><a href="#Read-uncommitted" class="headerlink" title="Read uncommitted"></a>Read uncommitted</h4><p>读未提交，顾名思义，就是一个事务可以读取另一个未提交事务的数据。</p><p>事例：老板要给程序员发工资，程序员的工资是3.6万/月。但是发工资时老板不小心按错了数字，按成3.9万/月，该钱已经打到程序员的户口，但是事务还没有提交，就在这时，程序员去查看自己这个月的工资，发现比往常多了3千元，以为涨工资了非常高兴。但是老板及时发现了不对，马上回滚差点就提交了的事务，将数字改成3.6万再提交。</p><p>分析：实际程序员这个月的工资还是3.6万，但是程序员看到的是3.9万。他看到的是老板还没提交事务时的数据。这就是脏读</p><p><strong>那怎么解决可能的不可重复读问题？Repeatable read ！</strong></p><h4 id="Read-committed"><a href="#Read-committed" class="headerlink" title="Read committed"></a>Read committed</h4><p>读提交，顾名思义，就是一个事务要等另一个事务提交后才能读取数据。</p><p>事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（程序员事务开启），收费系统事先检测到他的卡里有3.6万，就在这个时候！！程序员的妻子要把钱全部转出充当家用，并提交。当收费系统准备扣款时，再检测卡里的金额，发现已经没钱了（第二次检测金额当然要等待妻子转出金额事务提交完）。程序员就会很郁闷，明明卡里是有钱的…</p><p>分析：这就是读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。但在这个事例中，出现了一个事务范围内两个相同的查询却返回了不同数据，这就是不可重复读。</p><h4 id="Repeatable-read"><a href="#Repeatable-read" class="headerlink" title="Repeatable read"></a>Repeatable read</h4><p>重复读，就是在开始读取数据（事务开启）时，不再允许修改操作</p><p>事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（事务开启，不允许其他事务的UPDATE修改操作），收费系统事先检测到他的卡里有3.6万。这个时候他的妻子不能转出金额了。接下来收费系统就可以扣款了。</p><p>分析：重复读可以解决不可重复读问题。写到这里，应该明白的一点就是，不可重复读对应的是修改，即UPDATE操作。但是可能还会有幻读问题。因为幻读问题对应的是插入INSERT操作，而不是UPDATE操作。</p><p>什么时候会出现幻读？</p><p>事例：程序员某一天去消费，花了2千元，然后他的妻子去查看他今天的消费记录（全表扫描FTS，妻子事务开启），看到确实是花了2千元，就在这个时候，程序员花了1万买了一部电脑，即新增INSERT了一条消费记录，并提交。当妻子打印程序员的消费记录清单时（妻子事务提交），发现花了1.2万元，似乎出现了幻觉，这就是幻读。</p><p><strong>那怎么解决幻读问题？Serializable！</strong></p><h4 id="Serializable-序列化"><a href="#Serializable-序列化" class="headerlink" title="Serializable 序列化"></a>Serializable 序列化</h4><p>Serializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。</p><p>值得一提的是：大多数数据库默认的事务隔离级别是Read committed，比如Sql Server , Oracle。Mysql的默认隔离级别是Repeatable read。</p><h2 id="Mybatis中基于XML配置的动态SQL语句的拼接"><a href="#Mybatis中基于XML配置的动态SQL语句的拼接" class="headerlink" title="Mybatis中基于XML配置的动态SQL语句的拼接"></a>Mybatis中基于XML配置的动态SQL语句的拼接</h2><h4 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h4><p>mappers配置文件中的几个标签</p><pre class="line-numbers language-none"><code class="language-none">&lt;if&gt;&lt;where&gt;&lt;foreach&gt;&lt;sql&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面介绍他们的使用：</p><h4 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h4><pre class="line-numbers language-none"><code class="language-none">不用标签正常是&lt;select id="findUserByCondition" resultMap="UserMap" parameterType="com.itheima.domain.User"&gt;            select * from user where 1=1                &lt;if test="userName!=null"&gt;                   and username=#{username}                &lt;/if&gt;                &lt;if test="userSex!=null"&gt;                   and sex=#{userSex}                &lt;/if&gt;&lt;/select&gt;用了where标签就是&lt;select id="findUserByCondition" resultMap="UserMap" parameterType="com.itheima.domain.User"&gt;            select * from user            &lt;where&gt;                &lt;if test="userName!=null"&gt;                   and username=#{username}                &lt;/if&gt;                &lt;if test="userSex!=null"&gt;                   and sex=#{userSex}                &lt;/if&gt;            &lt;/where&gt;&lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h4><pre class="line-numbers language-none"><code class="language-none">不用if标签，无法进行判断到底有没有传参数在多条件查询时必须使用这个标签！    &lt;select id="findUserByCondition" resultMap="UserMap" parameterType="com.itheima.domain.User"&gt;            select * from user where 1=1            &lt;where&gt;                &lt;if test="userName!=null"&gt;                   and username=#{username}                &lt;/if&gt;                &lt;if test="userSex!=null"&gt;                   and sex=#{userSex}                &lt;/if&gt;            &lt;/where&gt;    &lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h4><pre class="line-numbers language-none"><code class="language-none">遍历拼接字符的一个标签    &lt;select id="findUserInIds" resultMap="userMap" parameterType="QueryVo"&gt;        select * from user        &lt;where&gt;            &lt;if test="ids != null and ids.size()&gt;0"&gt;                &lt;foreach collection="ids" open="and id in (" close=")" item="uid" separator=","&gt;                    #{uid}                &lt;/foreach&gt;            &lt;/if&gt;        &lt;/where&gt;    &lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mybatis多表查询"><a href="#Mybatis多表查询" class="headerlink" title="Mybatis多表查询"></a>Mybatis多表查询</h2><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>实体和实体是一对一的关系，一对一使用查询使用</p><pre class="line-numbers language-none"><code class="language-none">&lt;resultMap id="userMap" type="account"&gt;&lt;!--这个是主键--&gt; &lt;id property="id" cloumn="aid"&gt;&lt;/id&gt;&lt;result property="uid" column="uid"&gt;&lt;/result&gt;&lt;result property="money" column="money"&gt;&lt;/result&gt;&lt;association property="user" column="uid" javaType="User"&gt;&lt;id property="id" cloumn="id"&gt;&lt;/id&gt;&lt;result property="user" column="username"&gt;&lt;/result&gt;&lt;result property="address" column="address"&gt;&lt;/result&gt;&lt;result property="sex" column="sex"&gt;&lt;/result&gt;&lt;result property="birthday" column="birthday"&gt;&lt;/result&gt;&lt;result&gt;&lt;/association&gt;&lt;/resultMap&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>一对多，多的那部分实体类使用集合的方式来装数据(list，array等)</p><pre class="line-numbers language-none"><code class="language-none">&lt;resultMap id="userMap" type="user"&gt;&lt;!--这个是主键--&gt; &lt;id property="id" cloumn="id"&gt;&lt;/id&gt;&lt;result property="username" column="username"&gt;&lt;/result&gt;&lt;result property="address" column="address"&gt;&lt;/result&gt;&lt;result property="sex" column="sex"&gt;&lt;/result&gt;&lt;result property="birthday" column="birthday"&gt;&lt;/result&gt;    &lt;!--实体对象中定义的集合名字，oftype是集合中装填的类型，这里取别名了--&gt;&lt;collection property="accounts" ofType="account"&gt;&lt;id column="aid" property="id"&gt;&lt;/id&gt;&lt;result property="uid" column="uid"&gt;&lt;/result&gt;&lt;result property="money" column="money"&gt;&lt;/result&gt;&lt;/collection&gt;&lt;/resultMap&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><pre class="line-numbers language-none"><code class="language-none">&lt;!--这个其实和一对多是一样的，把其中一个拿出来就行了--&gt; &lt;!--定义role表的ResultMap--&gt;    &lt;resultMap id="roleMap" type="role"&gt;        &lt;id property="roleId" column="rid"&gt;&lt;/id&gt;        &lt;result property="roleName" column="role_name"&gt;&lt;/result&gt;        &lt;result property="roleDesc" column="role_desc"&gt;&lt;/result&gt;        &lt;collection property="users" ofType="user"&gt;            &lt;id column="id" property="id"&gt;&lt;/id&gt;            &lt;result column="username" property="username"&gt;&lt;/result&gt;            &lt;result column="address" property="address"&gt;&lt;/result&gt;            &lt;result column="sex" property="sex"&gt;&lt;/result&gt;            &lt;result column="birthday" property="birthday"&gt;&lt;/result&gt;        &lt;/collection&gt;    &lt;/resultMap&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mybatis延迟加载"><a href="#Mybatis延迟加载" class="headerlink" title="Mybatis延迟加载"></a>Mybatis延迟加载</h2><h4 id="什么是延迟加载？"><a href="#什么是延迟加载？" class="headerlink" title="什么是延迟加载？"></a>什么是延迟加载？</h4><p>在真正使用数据是再发起查询，不用的时候不查。按需加载（懒加载）</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--必须写column属性，用户根据id查询时，所需要的参数的值select是表示调用的方法--&gt;    &lt;!-- 定义封装account和user的resultMap --&gt;&lt;resultMap id="accountUserMap" type="account"&gt;&lt;id property="id" column="id"&gt;&lt;/id&gt;&lt;result property="uid" column="uid"&gt;&lt;/result&gt;&lt;result property="money" column="money"&gt;&lt;/result&gt;&lt;!-- 一对一的关系映射：配置封装user的内容select属性指定的内容：查询用户的唯一标识：用什么去查    column属性指定的内容：用户根据id查询时，所需要的参数的值    --&gt;        &lt;association property="user" column="uid" javaType="user" select="com.itheima.dao.IUserDao.findById"&gt;&lt;/association&gt;&lt;/resultMap&gt;&lt;!--同时还要开启延迟加载的开关,在sqlMapConfig中配置为true--&gt;&lt;!--配置参数--&gt;&lt;settings&gt;&lt;!--开启Mybatis支持延迟加载--&gt;&lt;setting name="lazyLoadingEnabled" value="true"/&gt;&lt;setting name="aggressiveLazyLoading" value="false"&gt;&lt;/setting&gt;&lt;/settings&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201125200813570.png#pic_center" alt="在这里插入图片描述"></p><h4 id="什么是立即加载？"><a href="#什么是立即加载？" class="headerlink" title="什么是立即加载？"></a>什么是立即加载？</h4><p>不管用不用，只要一调用就立马发起查询</p><p>对应四种表关系，一对一，多对一，一对一，多对多。</p><p><strong>一对多，多对多：</strong>通常情况下采用延迟加载</p><p><strong>一对一，多对一：</strong>通常情况下使用立即加载</p><h2 id="Mybatis的缓存"><a href="#Mybatis的缓存" class="headerlink" title="Mybatis的缓存"></a>Mybatis的缓存</h2><h4 id="什么是缓存？"><a href="#什么是缓存？" class="headerlink" title="什么是缓存？"></a>什么是缓存？</h4><p>存在于内存中的临时数据，下次查询时，不需要再次查询，从而快速的获取数据。</p><h4 id="为什么使用缓存？缓存的配置"><a href="#为什么使用缓存？缓存的配置" class="headerlink" title="为什么使用缓存？缓存的配置"></a>为什么使用缓存？缓存的配置</h4><p>减少和数据库的交互次数，提高执行效率。</p><h4 id="什么样数据适用缓存，什么样数据不能使用？"><a href="#什么样数据适用缓存，什么样数据不能使用？" class="headerlink" title="什么样数据适用缓存，什么样数据不能使用？"></a>什么样数据适用缓存，什么样数据不能使用？</h4><p><strong>适用缓存：</strong>经常查询的，不经常改变的。</p><p>数据的正确与否队最终结果影响不大。</p><p><strong>不适用缓存：</strong></p><p>经常改变的数据</p><p>数据的正确与否队最终结果影响大</p><h3 id="Mybatis的一级缓存和二级缓存"><a href="#Mybatis的一级缓存和二级缓存" class="headerlink" title="Mybatis的一级缓存和二级缓存"></a>Mybatis的一级缓存和二级缓存</h3><h5 id="一级缓存："><a href="#一级缓存：" class="headerlink" title="一级缓存："></a>一级缓存：</h5><p>它指的是Mybatis中SqlSession对象的缓存，<strong>默认是开启的</strong></p><p>当我们执行查询后，查询的结果会同时存入到sql’session为我们提供一块区域</p><p>该区域的结构是一个map，当我们再次查询相同的数据时，mybatis会先去sqlsessin中查询是否有，有的话直接拿出来。</p><p>当sqlsession过期后，缓存也就消失了</p><pre class="line-numbers language-none"><code class="language-none">清除一级缓存,下面两个都可以清除缓存调用sqlsession.clearCache()sqlsession.close()一级缓存在调用sqlsession的修改，添加，删除，commit(),close()等方法，就会清空一级缓存缓存的同步一级缓存在调用sqlsession的修改，添加，删除，commit(),close()等方法，就会清空一级缓存，再次查询时就会重新查询<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="二级缓存："><a href="#二级缓存：" class="headerlink" title="二级缓存："></a>二级缓存：</h5><p>它指的是Mybatis中SqlSessionFactory对象的缓存。有同一个sqlSessionFactory创建的sqlsession共享缓存内容。二级缓存默认是不开启的。</p><p>二级缓存存放的是数据，不是对象！也就是对象会消除，数据不会，在查询二级缓存时，会新建对象指向数据，所以不同sqlsession使用同一个二级缓存时不是同一个对象</p><pre class="line-numbers language-none"><code class="language-none">使用步骤：第一步：让Mybatis框架支持二级缓存(在SQLMapConfig.xml中配置)第二步：让当前映射文件支持二级缓存（在IUserDao.xml中配置）&lt;cache/&gt;第三步：让当前的操作支持二级缓存，（在select标签中配置）&lt;select id="findById" parameterType="INT" resultType="user" UserCache="true"&gt;select * from user where id =#{id}&lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020112520150923.png#pic_center" alt="在这里插入图片描述"></p><h1 id="Mybatis注解开发"><a href="#Mybatis注解开发" class="headerlink" title="Mybatis注解开发"></a>Mybatis注解开发</h1><p>没看</p><p>从72开始看，看到75</p><p>注解开发只会用注解的方式省略掉实体类对应的.xml文件，sqlmapconfig.xml文件依然存在</p><h3 id="单表CRUD代理Dao方式"><a href="#单表CRUD代理Dao方式" class="headerlink" title="单表CRUD代理Dao方式"></a>单表CRUD代理Dao方式</h3><p>crud中一共有四个注解 @Insert @Update @Delete @Select</p><p>使用时直接写在你的实体接口上面写上直接调用即可</p><pre class="line-numbers language-none"><code class="language-none">public interface IUserDao {    /**     * 查询所有用户     * @return     */    @Select("select * from user")    List&lt;User&gt; findAll();    /**     * 保存用户     * @param user     */    @Insert("insert into user(username,address,sex,birthday)values(#{username},#{address},#{sex},#{birthday})")    void saveUser(User user);    /**     * 更新用户     * @param user     */    @Update("update user set username=#{username},sex=#{sex},birthday=#{birthday},address=#{address} where id=#{id}")    void updateUser(User user);    /**     * 删除用户     * @param userId     */    @Delete("delete from user where id=#{id} ")    void deleteUser(Integer userId);    /**     * 根据id查询用户     * @param userId     * @return     */    @Select("select * from user  where id=#{id} ")    User findById(Integer userId);    /**     * 根据用户名称模糊查询     * @param username     * @return     *///    @Select("select * from user where username like #{username} ")    @Select("select * from user where username like '%${value}%' ")    List&lt;User&gt; findUserByName(String username);    /**     * 查询总用户数量     * @return     */    @Select("select count(*) from user ")    int findTotalUser();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果注解和XML两种方式都存在，然后在sqlMapConfig.xml中配置选择其中一种，是会报错的。</p><p>Mybatis要求只能存在一种方式<img src="https://img-blog.csdnimg.cn/20201125202030728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="注解开发实体类和数据库字段名称不匹配的情况"><a href="#注解开发实体类和数据库字段名称不匹配的情况" class="headerlink" title="注解开发实体类和数据库字段名称不匹配的情况"></a>注解开发实体类和数据库字段名称不匹配的情况</h3><h4 id="Results注解"><a href="#Results注解" class="headerlink" title="@Results注解"></a>@Results注解</h4><pre class="line-numbers language-none"><code class="language-none">//这里的id是让别人来引用的，不用再写一遍了@Results(id="userMap",value={            @Result(id=true,column = "id",property = "userId"),            @Result(column = "username",property = "userName"),            @Result(column = "address",property = "userAddress"),            @Result(column = "sex",property = "userSex"),            @Result(column = "birthday",property = "userBirthday"),            @Result(property = "accounts",column = "id",                    many = @Many(select = "com.itheima.dao.IAccountDao.findAccountByUid",                                fetchType = FetchType.LAZY))    })    /**     * 根据id查询用户     * @param userId     * @return     *///这里就引用了上面写好的Results    @Select("select * from user  where id=#{id} ")    @ResultMap("userMap")    //@ResultMap("userMap")    //上面的整体的写法，但在只有一个参数的时候可以省略掉    User findById(Integer userId);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一对一-1"><a href="#一对一-1" class="headerlink" title="一对一"></a>一对一</h4><pre class="line-numbers language-none"><code class="language-none">/** * 查询所有用户 * @return */@Select("select * from user")@Results(id="userMap",value={        @Result(id=true,column = "id",property = "userId"),        @Result(column = "username",property = "userName"),        @Result(column = "address",property = "userAddress"),        @Result(column = "sex",property = "userSex"),        @Result(column = "birthday",property = "userBirthday"),        @Result(property = "accounts",column = "id",                many = @Many(select = "com.itheima.dao.IAccountDao.findAccountByUid",                            fetchType = FetchType.LAZY))})List&lt;User&gt; findAll();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多表查询操作"><a href="#多表查询操作" class="headerlink" title="多表查询操作"></a>多表查询操作</h4><p>mybatis<br>33 34中流程原理<br>preparedstatement</p>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java框架 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc学习</title>
      <link href="2021/01/16/spring/springmvc-jian-dan-shi-yong-kuang-jia-san/"/>
      <url>2021/01/16/spring/springmvc-jian-dan-shi-yong-kuang-jia-san/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMvc是什么？"><a href="#SpringMvc是什么？" class="headerlink" title="SpringMvc是什么？"></a>SpringMvc是什么？</h2><p>SpringMvc是一个表现层框架</p><p>后面框架整合的时候是先通过springmvc，spring</p><p>底层是Servlet，处理请求的机制是一个核心控制器</p><p>springmvc是一个基于servlet的mvc框架</p><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><ol><li>request请求发送过来</li><li>请求查找handler</li><li>由处理器映射器handlermappering 进行处理这个请求，<br>能够知道发送过来的请求让controller中哪个方法来帮你执行<br>通过请求路径来匹配<br>采用适配器的模式，</li><li>请求适配器执行 handleradapter 去执行hadnler(handler也叫做Controller)</li><li>去执行，返回返回结果</li><li>controller(handler)执行并返回 ModleAndView 对象给 DispatcherServlet</li><li>DispatcherServlet 让viewResolver 来进行视图解析</li><li>viewResolver 解析完毕后返回一个View对象</li><li>视图渲染，将结果交给request域，然后相应客户端请求</li></ol><h2 id="Springmvc组件"><a href="#Springmvc组件" class="headerlink" title="Springmvc组件"></a>Springmvc组件</h2><p>在SpringMvc各个组件：<br><strong>处理器映射器</strong>，<br><strong>处理器适配器</strong>，<br><strong>视图解析器配</strong><br>成为Springmvc的三大组件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span>注解在xml中配置可以 开启springmvc的框架注解支持<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="SpringMvc环境配置"><a href="#SpringMvc环境配置" class="headerlink" title="SpringMvc环境配置"></a>SpringMvc环境配置</h2><p><strong>springmvc.xml环境配置</strong>：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 开启注解扫描 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 视图解析器对象 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置自定义类型转换器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.context.support.ConversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>converters<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast.utils.StringToDateConverter<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token attr-name">conversion-service</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>web.xml配置</strong>：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">web-app</span> <span class="token name">PUBLIC</span> <span class="token string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span> <span class="token string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">&gt;</span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--配置Spring的监听器，默认只加载WEB-INF目录下的applicationContext.xml配置文件--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--设置配置文件的路径--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--配置前端控制器--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--加载springmvc.xml配置文件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--启动服务器，创建该servlet--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--引用前端控制器，并配置他的作用范围--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--解决中文乱码的过滤器--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求参数的绑定"><a href="#请求参数的绑定" class="headerlink" title="请求参数的绑定"></a>请求参数的绑定</h3><p>springmvc可以利用反射的机制进行参数的绑定 </p><p>将你请求中的参数，自定映射到方法@RequestMapper的方法字段中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 请求参数绑定入门 * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testParam"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名："</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码："</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"anno/testRequestParam?name=哈哈"</span><span class="token operator">&gt;</span><span class="token class-name">RequestParam</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求对象的绑定"><a href="#请求对象的绑定" class="headerlink" title="请求对象的绑定"></a>请求对象的绑定</h3><p>注意！ 名称必须一致，它是通过调用set方法来进行赋值的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> money<span class="token punctuation">;</span>        get set<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment">/**     * 请求参数绑定把数据封装到JavaBean的类中     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/saveAccount"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--把数据封装Account类中--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>param/saveAccount<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    金额：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求对象中引用对象的绑定"><a href="#请求对象中引用对象的绑定" class="headerlink" title="请求对象中引用对象的绑定"></a>请求对象中引用对象的绑定</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//java bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> money<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 请求参数绑定把数据封装到JavaBean的类中 * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/saveAccount"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">jsp页面<span class="token comment">&lt;!--把数据封装Account类中--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>param/saveAccount<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>      密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>      金额：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>      用户姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.uname<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>      用户年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.age<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集合类型的绑定"><a href="#集合类型的绑定" class="headerlink" title="集合类型的绑定"></a>集合类型的绑定</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//java bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> money<span class="token punctuation">;</span>   <span class="token comment">// private User user;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 请求参数绑定把数据封装到JavaBean的类中 * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/saveAccount"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--jsp 页面--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>param/saveAccount<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        金额：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--指定list的下标位置--&gt;</span>        用户姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list[0].uname<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        用户年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list[0].age<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--指定map的key是one，v是--&gt;</span>        用户姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map[<span class="token punctuation">'</span>one<span class="token punctuation">'</span>].uname<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        用户年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map[<span class="token punctuation">'</span>one<span class="token punctuation">'</span>].age<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringMvc过滤器-解决post请求乱码问题"><a href="#SpringMvc过滤器-解决post请求乱码问题" class="headerlink" title="SpringMvc过滤器,解决post请求乱码问题"></a>SpringMvc过滤器,解决post请求乱码问题</h2><p>前端多滤器，设置他们的字符编码</p><p>post方法会乱码，get方式不会乱码</p><p>在web.xml中配置全局过滤器，配置时过滤器位置放在servlet位置前面</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">&gt;</span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--配置解决中文乱码的过滤器--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--配置前端控制器--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类型转换器"><a href="#类型转换器" class="headerlink" title="类型转换器"></a>类型转换器</h2><p>Springmvc会对一些简单属性进行转换 如 input输入age是22 自动转换成Integer，<strong>但是复杂类型需要自己来实现转换</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//java bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 使用了自定义类型转换器 * @param user * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/saveUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--jsp 页面--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>param/saveUser<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        用户姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        用户年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        用户生日：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义类型转换器编写"><a href="#自定义类型转换器编写" class="headerlink" title="自定义类型转换器编写"></a><strong>自定义类型转换器编写</strong></h3><ol><li><p>需要实现converter接口，定义泛型&lt;String,Date&gt;</p><p> 左边类型是原始类型，右边类型是转换类型</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 把字符串转换日期 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToDateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Date</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token comment">/**     * String source    传入进来字符串     * @param source         * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>source <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"请您传入数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">DateFormat</span> df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 把字符串转换日期</span>            <span class="token keyword">return</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"数据类型转换出现错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在springmvc.xml中注册类型转换器</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置自定义类型转换器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.context.support.ConversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>converters<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast.utils.StringToDateConverter<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token attr-name">conversion-service</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversionService<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="调用Servlet原生API"><a href="#调用Servlet原生API" class="headerlink" title="调用Servlet原生API"></a>调用Servlet原生API</h2><p>在Springmvc中获取到原来servlet的内置对象request，response，session和servletcontext    </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 原生的API * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testServlet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>param/testServlet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Servlet原生的API<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="SpringMvc常用注解"><a href="#SpringMvc常用注解" class="headerlink" title="SpringMvc常用注解"></a>SpringMvc常用注解</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><p> @Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。</p><p>@Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求的处理器。</p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p>时间里请求URL和处理请求方法之间的关系</p><p><strong>属性：</strong></p><p>value，path    这两个作用是一样的，都是指定访问请求路径</p><p>method     指定他的请求方式，指定Post就只能Post请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/username"</span><span class="token punctuation">,</span>params <span class="token operator">=</span><span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>PUT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>params    指定他的参数，调用时必须传入这个名称的参数才能调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/username"</span><span class="token punctuation">,</span>params <span class="token operator">=</span><span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token punctuation">)</span>指定了调用时必须有username这个字段<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/username"</span><span class="token punctuation">,</span>params <span class="token operator">=</span><span class="token punctuation">{</span>username<span class="token operator">=</span>heihei<span class="token punctuation">}</span><span class="token punctuation">)</span>指定了调用时必须有username这个字段，并且字段的值只能是heihei<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>headers</strong>    指定限制请求消息头的条件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapper</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/username"</span><span class="token punctuation">,</span>params <span class="token operator">=</span><span class="token punctuation">{</span>username<span class="token operator">=</span>heihei<span class="token punctuation">}</span><span class="token punctuation">,</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Accept"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a><strong>@RequestParam</strong></h3><p>把请求指定名称的参数给控制器中的形参赋值，用于参数名称和你方法参数名称不匹配的情况。</p><p><strong>属性</strong>：</p><p>value    请求参数中的名称</p><p>required    请求参数中是否必须提供此参数，默认true，表示必须提供，不提供就报错</p><p>例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/anno"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRequestParam"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//在这里默认使用了required，默认是true，前端必须只能传name字段的值，字段name变成uname都会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">//jsp    &lt;a href="anno/testRequestParam?name=哈哈"&gt;RequestParam&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><p>用于获取请求体内容，直接使用得到 key=value&amp;key=value 结构的数据，可以直接<strong>名称调用</strong>，也可以直接<strong>封装到对象中</strong></p><p>get方法不适用（get请求都封装到了地址栏上，没有请求体）</p><p><strong>属性：</strong></p><p>required    是否必须有请求体，默认是true。true的时候get方法会报错，取值为false，get请求得到的是null</p><p>例子：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anno/testRequestBody<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    用户姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    用户年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取到请求体的内容 * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRequestBody"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> body<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图片</p><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><p>和RequestBody作用相反，用来响应客户端请求，返回指定类型</p><h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a><strong>@PathVariable</strong></h3><p>拥有绑定url中的占位符，例如url中 /delete/{id} 这个{id} 就是url占位符</p><p>url支持占位符是spring3.0之后加入的，是SpringMvc支持rest分隔url的一个重要标志</p><p><strong>Restful编程风格</strong></p><p>请求地址一样，但是能够根据请求方式的不同(get,put,post)来执行不同的方法</p><p><strong>属性：</strong></p><p>value    用于指定url占位符的名称</p><p>required    是否必须提供占位符</p><p><strong>例子：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anno/testPathVariable/10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>testPathVariable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * PathVariable注解 * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/testPathVariable/{sid}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testPathVariable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"sid"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HiddentHttpMethodFilter"><a href="#HiddentHttpMethodFilter" class="headerlink" title="@HiddentHttpMethodFilter"></a>@HiddentHttpMethodFilter</h3><p>了解即可，是为了模拟不同的发送请求方式</p><p>浏览器的form表单只支持get和post请求，而Delelte，put等method并不支持，Spring3.0添加了一个过滤器，可以将浏览器请求去改为指定的请求方式，发送给我们的控制器方法，使得支持get，post，put与delete请求</p><p>使用方法:</p><ol><li>在web.xml中配置过滤器</li><li>请求法师必须使用post请求</li><li>按照要求提供_method请求参数，该参数的取值就是我们需要的请求方式</li></ol><h3 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h3><p>开发中不怎么用</p><p>用于 获取请求消息头的值</p><p><strong>属性：</strong></p><p>value    提供消息头名称</p><p>required    是否必须有此消息头</p><p><strong>例子：</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;a href="anno/testRequestHeader"&gt;RequestHeader&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取请求头的值 * @param header * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/testRequestHeader"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestHeader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"Accept"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> header<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// return "success";</span>    <span class="token comment">// response.sendRedirect(request.getContextPath()+"/anno/testCookieValue");</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/param.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图片</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="@Cookie"></a>@Cookie</h3><p>把指定cookie名称传入控制器方法参数</p><p><strong>属性：</strong></p><p>value    指定cookie名称</p><p>required     是否必须由此cookie</p><p><strong>例子：</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;a href="anno/testCookieValue"&gt;CookieValue&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取Cookie的值 * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/testCookieValue"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testCookieValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> cookieValue<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookieValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MouelAttribute"><a href="#MouelAttribute" class="headerlink" title="@MouelAttribute"></a>@MouelAttribute</h3><p>该注解SpringMVC4.3版本之后加入的，可以用于修饰方法和参数</p><p>出现在方法上，在控制前方法执行之前，先执行。可以修饰没有返回值的方法，也可以修饰具有返回值的方法</p><p><strong>属性：</strong></p><p>Value    用于获取数据的key，key可以是pojo的属性名称，也可以是map结构的key</p><p><strong>应用场景：</strong></p><p>但表单提交不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据</p><p><strong>例子：</strong></p><p>没有返回值的类型 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">/** 没有返回值的类型   参数中使用@ModelAttribute 指定key来获取值     * ModelAttribute注解     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/testModelAttribute"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testModelAttribute</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testModelAttribute执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">///////没有返回值的类型，值需要添加一个Map集合</span>    <span class="token annotation punctuation">@ModelAttribute</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> uname<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"showUser执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过用户查询数据库（模拟）</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUname</span><span class="token punctuation">(</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有返回值的类型 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">/**有返回值的类型        * ModelAttribute注解     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/testModelAttribute"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testModelAttribute</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testModelAttribute执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment">/**  有返回值的类型     * 该方法会先执行     */</span>    <span class="token annotation punctuation">@ModelAttribute</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">showUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> uname<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"showUser执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过用户查询数据库（模拟）</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUname</span><span class="token punctuation">(</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SessoinAttribute"><a href="#SessoinAttribute" class="headerlink" title="@SessoinAttribute"></a>@SessoinAttribute</h3><p>只能作用在类上,没听太懂，视频182</p><p>多次执行控制器方法将的参数共享</p><p><strong>属性：</strong></p><p>value    属性的名称</p><p>type     属性的类型</p><p><strong>例子：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span></span><span class="token class-name">Model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span></span><span class="token class-name">ModelMap</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/anno"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"msg"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">// 把 msg=美美 存入到session域对中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoController</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * SessionAttributes的注解     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/testSessionAttributes"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testSessionAttributes</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testSessionAttributes..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 底层会存储到request域对象中</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"美美"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取值     * @param modelMap     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/getSessionAttributes"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSessionAttributes</span><span class="token punctuation">(</span><span class="token class-name">ModelMap</span> modelMap<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getSessionAttributes..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> modelMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 清除     * @param status     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/delSessionAttributes"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delSessionAttributes</span><span class="token punctuation">(</span><span class="token class-name">SessionStatus</span> status<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getSessionAttributes..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        status<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anno/testSessionAttributes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>testSessionAttributes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>success.jsp：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>入门成功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>    ${ msg }    ${sessionScope}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringMvc响应方式"><a href="#SpringMvc响应方式" class="headerlink" title="SpringMvc响应方式"></a>SpringMvc响应方式</h2><h3 id="根据返回值分类"><a href="#根据返回值分类" class="headerlink" title="根据返回值分类"></a>根据返回值分类</h3><h4 id="1、字符串"><a href="#1、字符串" class="headerlink" title="1、字符串"></a>1、字符串</h4><p>字符串类型的返回值     前端控制器会按照返回值跳转到对应的jsp页面</p><h4 id="2、void"><a href="#2、void" class="headerlink" title="2、void"></a>2、void</h4><p>SpringMvc提供的转发和重定向</p><p>没有返回值的时候，它默认是按照RequestMapping的value去寻找.jsp页面</p><p>在跳转的时候通过request 进行转发，response进行重定向</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token comment">/**   * 是void   * 请求转发一次请求，不用编写项目的名称   * 重定向是两次请求，需要编写项目名称   */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testVoid"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testVoid</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testVoid方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 编写请求转发的程序</span>       request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/pages/success.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 重定向   是重新发了个请求  web-inf是直接进不去的</span><span class="token comment">//request.getContextPath()  获取项目名称</span>      response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/index.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 设置中文乱码</span>      response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 直接会进行响应浏览器</span>      response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * 使用关键字的方式进行转发或者重定向   * @return   */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testForwardOrRedirect"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testForwardOrRedirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testForwardOrRedirect方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 请求的转发</span>      <span class="token comment">// return "forward:/WEB-INF/pages/success.jsp";</span>      <span class="token comment">// 重定向</span>      <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前端控制器配置拦截资源"><a href="#前端控制器配置拦截资源" class="headerlink" title="前端控制器配置拦截资源"></a>前端控制器配置拦截资源</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 开启注解扫描 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 视图解析器对象 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--前端控制器，哪些静态资源不拦截--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/css/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ModelAndView对象"><a href="#ModelAndView对象" class="headerlink" title="ModelAndView对象"></a>ModelAndView对象</h2><p>这个对象底层用的modelMap对象，是request范围的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 返回ModelAndView * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testModelAndView"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">testModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 创建ModelAndView对象</span>    <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testModelAndView方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 模拟从数据库中查询出User对象</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"小凤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把user对象存储到mv对象中，也会把user对象存入到request对象</span>    mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 跳转到哪个页面</span>    mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mv<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">&lt;%--  Created by IntelliJ IDEA.  User: Administrator  Date: 2018/5/1  Time: 1:18  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" isELIgnored="false" %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>执行成功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>    ${user.username}    ${user.password}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ajax请求响应json数据"><a href="#ajax请求响应json数据" class="headerlink" title="ajax请求响应json数据"></a>ajax请求响应json数据</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token comment">// 页面加载，绑定单击事件</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// alert("hello btn");</span>            <span class="token comment">// 发送ajax请求</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token comment">// 编写json格式，设置属性和值</span>                url<span class="token operator">:</span><span class="token string">"user/testAjax"</span><span class="token punctuation">,</span>                contentType<span class="token operator">:</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">,</span>                data<span class="token operator">:</span><span class="token string">'{"username":"hehe","password":"123","age":30}'</span><span class="token punctuation">,</span>                dataType<span class="token operator">:</span><span class="token string">"json"</span><span class="token punctuation">,</span>                type<span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>                <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment">// data服务器端响应的json的数据，进行解析</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">/**     * 模拟异步请求响应     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testAjax"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> <span class="token class-name">User</span> <span class="token function">testAjax</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> body<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testAjax方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//控制台会输出 ：</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token operator">:</span><span class="token string">"hehe"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token operator">:</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Json字符串封装到-Java-Bean中"><a href="#Json字符串封装到-Java-Bean中" class="headerlink" title="Json字符串封装到 Java Bean中"></a>Json字符串封装到 Java Bean中</h2><p>Json字符串转换成对象、对象转换成Json字符串  都是spring给我们转换，我们只需要导入 <strong>jackson</strong> 的包</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-ResponseBody-和-RequestBody-注解来进行转换"><a href="#使用-ResponseBody-和-RequestBody-注解来进行转换" class="headerlink" title="使用 ResponseBody 和 RequestBody 注解来进行转换"></a>使用 ResponseBody 和 RequestBody 注解来进行转换</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//java bean</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 模拟异步请求响应     * responseBody 相应的  将bean转换成 json字符串     * responseBody返回的类型跟你ajax设置的datetype相关     * requestBody 接受的     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testAjax"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> <span class="token class-name">User</span> <span class="token function">testAjax</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testAjax方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 客户端发送ajax的请求，传的是json字符串，后端把json字符串封装到user对象中</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 做响应，模拟查询数据库</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 做响应</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//控制台会输出 ：</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token operator">:</span><span class="token string">"hehe"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token operator">:</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringMvc异常处理"><a href="#SpringMvc异常处理" class="headerlink" title="SpringMvc异常处理"></a>SpringMvc异常处理</h2><ol><li><p>编写自定义异常类（做提示信息的）</p></li><li><p>编写异常处理器</p></li><li><p>配置异常处理器（跳转到提示页面）</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义异常类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token comment">// 存储提示信息的</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">SysException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 异常处理器    需要实现handlerExceptionResolver接口，处理异常 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 处理异常业务逻辑     * @param request     * @param response     * @param handler     * @param ex     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取到异常对象</span>        <span class="token class-name">SysException</span> e <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">SysException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SysException</span><span class="token punctuation">)</span>ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysException</span><span class="token punctuation">(</span><span class="token string">"系统正在维护...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 创建ModelAndView对象</span>        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//request范围的值kv入参</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"errorMsg"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用modelandview  进行页面的跳转</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>发生error跳转的页面<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span>  <span class="token class-name">Created</span> by <span class="token class-name">IntelliJ</span> <span class="token class-name">IDEA<span class="token punctuation">.</span>  User</span><span class="token operator">:</span> <span class="token class-name">Administrator</span>  <span class="token class-name">Date</span><span class="token operator">:</span> <span class="token number">2018</span><span class="token operator">/</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">5</span>  <span class="token class-name">Time</span><span class="token operator">:</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">28</span>  <span class="token class-name">To</span> change <span class="token keyword">this</span> template use <span class="token class-name">File</span> <span class="token operator">|</span> <span class="token class-name">Settings</span> <span class="token operator">|</span> <span class="token class-name">File</span> <span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token operator">--</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> isELIgnored<span class="token operator">=</span><span class="token string">"false"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>html<span class="token punctuation">&gt;</span></span><span class="token generics"><span class="token punctuation">&lt;</span>head<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>title<span class="token punctuation">&gt;</span></span><span class="token class-name">Title</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">&gt;</span></span>    $<span class="token punctuation">{</span>errorMsg<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">//在xml文件中配置这个  异常处理器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sysExceptionResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast.exception.SysExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="SpringMvc拦截器配置"><a href="#SpringMvc拦截器配置" class="headerlink" title="SpringMvc拦截器配置"></a>SpringMvc拦截器配置</h2><p>编写拦截器步骤：</p><ol><li><p>编写拦截器类，实现MandlerIntercepter接口</p></li><li><p>配置拦截器</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义拦截器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor1</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 预处理，controller方法执行前     * return true 放行，执行下一个拦截器，如果没有，执行controller中的方法     * return false不放行  就不会执行controller中的方法     * @param request     * @param response     * @param handler     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor1执行了...前1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 后处理方法，controller方法执行后，success.jsp执行之前     * @param request     * @param response     * @param handler     * @param modelAndView     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor1执行了...后1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * success.jsp页面执行后，该方法会执行  可用于释放资源     * @param request     * @param response     * @param handler     * @param ex     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInterceptor1执行了...最后1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">在<span class="token class-name">SpringMvc</span><span class="token punctuation">.</span>xml中配置这个拦截器 <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置拦截器<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>interceptors<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置拦截器<span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>interceptor<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>要拦截的具体的方法<span class="token operator">--</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>mapping path<span class="token operator">=</span><span class="token string">"/user/*"</span><span class="token operator">/</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>不要拦截的方法            <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>exclude<span class="token operator">-</span>mapping path<span class="token operator">=</span><span class="token string">""</span><span class="token operator">/</span><span class="token operator">&gt;</span>            <span class="token operator">--</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置拦截器对象<span class="token operator">--</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.controller.cn.itcast.interceptor.MyInterceptor1"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>mvc<span class="token operator">:</span>interceptor<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置第二个拦截器<span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>interceptor<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>要拦截的具体的方法<span class="token operator">--</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>mapping path<span class="token operator">=</span><span class="token string">"/**"</span><span class="token operator">/</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>不要拦截的方法            <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>exclude<span class="token operator">-</span>mapping path<span class="token operator">=</span><span class="token string">""</span><span class="token operator">/</span><span class="token operator">&gt;</span>            <span class="token operator">--</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置拦截器对象<span class="token operator">--</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.controller.cn.itcast.interceptor.MyInterceptor2"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>mvc<span class="token operator">:</span>interceptor<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>mvc<span class="token operator">:</span>interceptors<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java框架 </tag>
            
            <tag> SrpingMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架学习</title>
      <link href="2021/01/16/spring/spring-de-jian-dan-shi-yong-kuang-jia-er/"/>
      <url>2021/01/16/spring/spring-de-jian-dan-shi-yong-kuang-jia-er/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring框架概述"><a href="#Spring框架概述" class="headerlink" title="Spring框架概述"></a>Spring框架概述</h1><h3 id="Spring是什么"><a href="#Spring是什么" class="headerlink" title="Spring是什么"></a>Spring是什么</h3><p>Spring是分层的Java se/EE 应用full-stack轻量级开源框架，以及ioc(控制反转)和AOP（面向切面编程）为内核，提供了展现层SpringMVC和持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库。逐渐成为使用最多的Java EE企业应用开源框架</p><h3 id="Spring两大核心"><a href="#Spring两大核心" class="headerlink" title="Spring两大核心"></a>Spring两大核心</h3><p>IOC和AOP</p><h3 id="Spring的优势"><a href="#Spring的优势" class="headerlink" title="Spring的优势"></a>Spring的优势</h3><ol><li>方便解耦，简化开发</li><li>声明式事务的支持</li><li>方便程序的测试</li><li>方便集成各种优秀框架</li><li>降低javaEE API使用难度</li></ol><h3 id="Spring体系结构"><a href="#Spring体系结构" class="headerlink" title="Spring体系结构"></a>Spring体系结构</h3><p><img src="https://img-blog.csdnimg.cn/20201125203447667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="程序的耦合及解耦"><a href="#程序的耦合及解耦" class="headerlink" title="程序的耦合及解耦"></a>程序的耦合及解耦</h3><p>使用反射来创建对象，而避免使用new关键字，spring框架主要就是通过ioc来达到解耦效果的，而mysql是用来封装各种操作，将过程简化(个人理解)</p><h3 id="曾经案例中问题"><a href="#曾经案例中问题" class="headerlink" title="曾经案例中问题"></a>曾经案例中问题</h3><p>业务层调用持久层，都会new一个实例，这是强耦合的关系，如何解决这个问题</p><h3 id="工厂模式解耦"><a href="#工厂模式解耦" class="headerlink" title="工厂模式解耦"></a>工厂模式解耦</h3><p>使用这种方式，可以减少他们的依赖，使用类加载器来进行对象加载，减少他们的耦合度，工厂模式有单例模式和多例模式两种，<br>使用工厂模式有多利和单例两种模式，单例模式中属性尽量保证他们的范围是方法范围而不是类的范围，否则后面可能有产生异常<br>使用类加载器配置文件可以是xml和properties的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 一个创建Bean对象的工厂 * * Bean：在计算机英语中，有可重用组件的含义。 * JavaBean：用java语言编写的可重用组件。 *      javabean &gt;  实体类 * *   它就是创建我们的service和dao对象的。 * *   第一个：需要一个配置文件来配置我们的service和dao *           配置的内容：唯一标识=全限定类名（key=value) *   第二个：通过读取配置文件中配置的内容，反射创建对象 * *   我的配置文件可以是xml也可以是properties */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>    <span class="token comment">//定义一个Properties对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Properties</span> props<span class="token punctuation">;</span>    <span class="token comment">//定义一个Map,用于存放我们要创建的对象。我们把它称之为容器</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> beans<span class="token punctuation">;</span>    <span class="token comment">//使用静态代码块为Properties对象赋值</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//实例化对象</span>            props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取properties文件的流对象</span>            <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">BeanFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"bean.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//实例化容器</span>            beans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//取出配置文件中所有的Key</span>            <span class="token class-name">Enumeration</span> keys <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//遍历枚举</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//取出每个Key</span>                <span class="token class-name">String</span> key <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//根据key获取value</span>                <span class="token class-name">String</span> beanPath <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//反射创建对象</span>                <span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>beanPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//把key和value存入容器中</span>                beans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExceptionInInitializerError</span><span class="token punctuation">(</span><span class="token string">"初始化properties失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 根据bean的名称获取对象     * @param beanName     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> beans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><h2 id="IOC概念和spring中的IOC"><a href="#IOC概念和spring中的IOC" class="headerlink" title="IOC概念和spring中的IOC"></a>IOC概念和spring中的IOC</h2><pre class="line-numbers language-none"><code class="language-none">控制反转，原来app和资源之间都是直接联系的，二控制反转引入后，由工厂来和资源联系并把资源转到app中，实现了应用和资源之间的关系带来的好处减少了程序之间的耦合<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Spring中基于Xml的IOC环境搭建"><a href="#Spring中基于Xml的IOC环境搭建" class="headerlink" title="Spring中基于Xml的IOC环境搭建"></a>Spring中基于Xml的IOC环境搭建</h2><ol><li>先导入spring的依赖<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在spring.xml中配置</li></ol><p>使用时需要在xml配置文件中添加的头部文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:aop="http://www.springframework.org/schema/aop"       xmlns:tx="http://www.springframework.org/schema/tx"       xsi:schemaLocation="http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context.xsd   http://www.springframework.org/schema/aop   http://www.springframework.org/schema/aop/spring-aop.xsd   http://www.springframework.org/schema/tx   http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;      &lt;!--开启注解的扫描，希望处理service和dao，controller不需要Spring框架去处理--&gt;    &lt;context:component-scan base-package="cn.itcast" &gt;        &lt;!--配置哪些注解不扫描--&gt;        &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" /&gt;    &lt;/context:component-scan&gt;        &lt;!--配置Spring框架声明式事务管理--&gt;    &lt;!--配置事务管理器--&gt;    &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;        &lt;property name="dataSource" ref="dataSource" /&gt;    &lt;/bean&gt;    &lt;!--配置事务通知--&gt;    &lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt;        &lt;tx:attributes&gt;            &lt;tx:method name="find*" read-only="true"/&gt;            &lt;tx:method name="*" isolation="DEFAULT"/&gt;        &lt;/tx:attributes&gt;    &lt;/tx:advice&gt;    &lt;!--配置AOP增强--&gt;    &lt;aop:config&gt;        &lt;aop:advisor advice-ref="txAdvice" pointcut="execution(* cn.itcast.service.impl.*ServiceImpl.*(..))"/&gt;    &lt;/aop:config&gt;    &lt;/beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>获取到spring的ioc核心容器</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 获取spring的Ioc核心容器，并根据id获取对象     *     * ApplicationContext的三个常用实现类：     *      ClassPathXmlApplicationContext：它可以加载类路径下的配置文件，要求配置文件必须在类路径下。不在的话，加载不了。(更常用)     *      FileSystemXmlApplicationContext：它可以加载磁盘任意路径下的配置文件(必须有访问权限）     *     *      AnnotationConfigApplicationContext：它是用于读取注解创建容器的，前两个是指定配置文件路径的，这个是配置注解的方式     *     * 核心容器的两个接口引发出的问题：     *  ApplicationContext:     单例对象适用              采用此接口     *      它在构建核心容器时，创建对象采取的策略是采用立即加载的方式。也就是说，只要一读取完配置文件马上就创建配置文件中配置的对象。     *     *  BeanFactory:            多例对象使用     *      它在构建核心容器时，创建对象采取的策略是采用延迟加载的方式。也就是说，什么时候根据id获取对象了，什么时候才真正的创建对象。     * @param args     */</span><span class="token comment">//--------ApplicationContext----------</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//1.获取核心容器对象</span>        <span class="token class-name">ApplicationContext</span> ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        ApplicationContext ac = new FileSystemXmlApplicationContext("C:\\Users\\zhy\\Desktop\\bean.xml");</span>        <span class="token comment">//2.根据id获取Bean对象</span>        <span class="token class-name">IAccountService</span> as  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IAccountService</span><span class="token punctuation">)</span>ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IAccountDao</span> adao <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountDao"</span><span class="token punctuation">,</span><span class="token class-name">IAccountDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>as<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>adao<span class="token punctuation">)</span><span class="token punctuation">;</span>        as<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//--------BeanFactory----------</span><span class="token comment">//        Resource resource = new ClassPathResource("bean.xml");</span><span class="token comment">//        BeanFactory factory = new XmlBeanFactory(resource);</span><span class="token comment">//        IAccountService as  = (IAccountService)factory.getBean("accountService");</span><span class="token comment">//        System.out.println(as);</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring核心容器创建-两个接口的区别"><a href="#Spring核心容器创建-两个接口的区别" class="headerlink" title="Spring核心容器创建 两个接口的区别"></a>Spring核心容器创建 两个接口的区别</h2><p><strong>ApplicationContext</strong><br>构建核心容器，采用的策略是采用立即加载的方式，单例对象适用接口<br>更多的是采用此接口</p><p><strong>BeanFactory</strong><br>构建核心容器时，采用的是延迟加载的方式。多例对象适用接口</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--把对象的创建交给spring来管理--&gt;</span>spring对bean的管理细节    1.创建bean的三种方式    2.bean对象的作用范围    3.bean对象的生命周期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="依赖注入-dependency-injection"><a href="#依赖注入-dependency-injection" class="headerlink" title="依赖注入(dependency injection)"></a>依赖注入(dependency injection)</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">spring中的依赖注入       依赖注入：           Dependency Injection       IOC的作用：           降低程序间的耦合（依赖关系）       依赖关系的管理：           以后都交给spring来维护       在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明       依赖关系的维护：           就称之为依赖注入。        依赖注入：           能注入的数据：有三类               基本类型和String               其他bean类型（在配置文件中或者注解配置过的bean）               复杂类型/集合类型            注入的方式：有三种               第一种：使用构造函数提供               第二种：使用set方法提供               第三种：使用注解提供<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三种注入方式"><a href="#三种注入方式" class="headerlink" title="三种注入方式"></a>三种注入方式</h2><h3 id="bean标签的属性"><a href="#bean标签的属性" class="headerlink" title="bean标签的属性"></a>bean标签的属性</h3><p>bean的作用范围调整<br>    bean标签的  <strong>scope</strong>  属性：<br>        作用：用于指定  bean 的作用范围<br>        取值： 常用的就是单例的和多例的<br>            <strong>singleton</strong>：单例的（默认值）<br>            <strong>prototype</strong>：多例的<br>            <strong>request</strong>：作用于web应用的请求范围<br>            <strong>session</strong>：作用于web应用的会话范围<br>            <strong>global-session</strong>：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="bean对象的生命周期"><a href="#bean对象的生命周期" class="headerlink" title="bean对象的生命周期"></a>bean对象的生命周期</h4><p><strong>单例对象</strong></p><pre><code>        出生：当容器创建时对象出生        活着：只要容器还在，对象一直活着        死亡：容器销毁，对象消亡        总结：单例对象的生命周期和容器相同</code></pre><p><strong>多例对象</strong></p><pre><code>        出生：当我们使用对象时spring框架为我们创建        活着：对象只要是在使用过程中就一直活着。        死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收</code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span>      <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>初始化方法和关闭方法</p><h3 id="1、构造函数注入"><a href="#1、构造函数注入" class="headerlink" title="1、构造函数注入"></a>1、构造函数注入</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--构造函数注入：        使用的标签:constructor-arg        标签出现的位置：bean标签的内部        标签中的属性            type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型            index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始            name：用于指定给构造函数中指定名称的参数赋值                                        常用的            =============以上三个用于指定给构造函数中哪个参数赋值===============================            value：用于提供基本类型和String类型的数据            ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象        优势：            在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。        弊端：            改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。    --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>泰斯特<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置一个日期对象 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>//bean中通过ref来引用外部的bean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、set方法注入"><a href="#2、set方法注入" class="headerlink" title="2、set方法注入"></a>2、set方法注入</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token comment">&lt;!-- set方法注入                更常用的方式       涉及的标签：property       出现的位置：bean标签的内部       标签的属性           name：用于指定注入时所调用的set方法名称           value：用于提供基本类型和String类型的数据           ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象       优势：           创建对象时没有明确的限制，可以直接使用默认构造函数       弊端：           如果有某个成员必须有值，则获取对象是有可能set方法没有执行。   --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TEST<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>21<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 配置一个日期对象 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>//这里使用的是property这个标签来进行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、复杂类型的依赖注入"><a href="#3、复杂类型的依赖注入" class="headerlink" title="3、复杂类型的依赖注入"></a>3、复杂类型的依赖注入</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 复杂类型的注入/集合类型的注入        用于给List结构集合注入的标签：            list array set        用于个Map结构集合注入的标签:            map  props        结构相同，标签可以互换    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStrs<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myList<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testC<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>ccc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testD<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>ddd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myProps<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testA<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testB<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建Bean的三种方式"><a href="#创建Bean的三种方式" class="headerlink" title="创建Bean的三种方式"></a>创建Bean的三种方式</h2><h3 id="第一种方式：使用默认构造函数创建。"><a href="#第一种方式：使用默认构造函数创建。" class="headerlink" title="第一种方式：使用默认构造函数创建。"></a>第一种方式：使用默认构造函数创建。</h3><p>在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。<br>采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第二种方式：-使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）"><a href="#第二种方式：-使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）" class="headerlink" title="第二种方式： 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）"></a>第二种方式： 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>instanceFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.factory.InstanceFactory<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>instanceFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAccountService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器"><a href="#第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器" class="headerlink" title="第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)"></a>第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.factory.StaticFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAccountService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Spring中ioc常用注解"><a href="#Spring中ioc常用注解" class="headerlink" title="Spring中ioc常用注解"></a>Spring中ioc常用注解</h2><h3 id="在Spring容器中注入类的："><a href="#在Spring容器中注入类的：" class="headerlink" title="在Spring容器中注入类的："></a>在Spring容器中注入类的：</h3><h4 id="Component"><a href="#Component" class="headerlink" title="@Component:"></a>@Component:</h4><ul><li><p>作用：用于把当前类对象存入spring容器中</p></li><li><p>属性：</p></li><li><p>value：用于指定bean的id。当我们不写时，它的默认值是当前类名，且首字母改小写。</p></li></ul><h4 id="Controller："><a href="#Controller：" class="headerlink" title="@Controller："></a>@Controller：</h4><p>一般用在表现层</p><h4 id="Service："><a href="#Service：" class="headerlink" title="@Service："></a>@Service：</h4><p>一般用在业务层</p><h4 id="Repository："><a href="#Repository：" class="headerlink" title="@Repository："></a>@Repository：</h4><p>一般用在持久层</p><p>以上三个注解他们的作用和属性与Component是一模一样。</p><p>他们三个是spring框架为我们提供明确的三层使用的注解，使我们的三层对象更加清晰<br>当不属于这三层的就可以使用component来调用</p><h3 id="用于注入数据的："><a href="#用于注入数据的：" class="headerlink" title="用于注入数据的："></a>用于注入数据的：</h3><ul><li><pre><code> 他们的作用就和在xml配置文件中的bean标签中写一个&lt;property&gt;标签的作用是一样的</code></pre></li></ul><h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired:"></a>@Autowired:</h4><ul><li>作用：自动按照类型注入。只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功</li></ul><p>如果ioc容器中没有任何bean的类型和要注入的变量类型匹配，则报错。</p><p>如果Ioc容器中有多个类型匹配时：</p><ul><li>出现位置：</li></ul><p>可以是变量上，也可以是方法上</p><ul><li>细节：</li></ul><p>在使用注解注入时，set方法就不是必须的了。</p><h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier:"></a>@Qualifier:</h4><ul><li><p>作用：</p><p>在按照类中注入的基础之上再按照名称注入。它在给类成员注入时不能单独使用。但是在给方法参数注入时可以（稍后我们讲）</p></li><li><p>属性：</p></li></ul><p>value：用于指定注入bean的id。</p><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><ul><li><p>作用：直接按照bean的id注入。它可以独立使用</p></li><li><p>属性：</p></li></ul><p>name：用于指定bean的id。</p><p>以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。</p><p>   另外，集合类型的注入只能通过XML来实现。</p><h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><ul><li><p>作用：用于注入基本类型和String类型的数据</p></li><li><p>属性：</p></li></ul><p>value：用于指定数据的值。它可以使用spring中SpEL(也就是spring的el表达式）</p><p>SpEL的写法：${表达式}   </p><h3 id="用于改变作用范围的："><a href="#用于改变作用范围的：" class="headerlink" title="用于改变作用范围的："></a>用于改变作用范围的：</h3><p>他们的作用就和在bean标签中使用scope属性实现的功能是一样的</p><h4 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h4><ul><li><p>作用：用于指定bean的作用范围</p></li><li><p>属性：</p></li></ul><p>value：指定范围的取值。常用取值：singleton prototype</p><h3 id="和生命周期相关："><a href="#和生命周期相关：" class="headerlink" title="和生命周期相关："></a>和生命周期相关：</h3><p>他们的作用就和在bean标签中使用init-method和destroy-methode的作用是一样的</p><h4 id="PreDestroy"><a href="#PreDestroy" class="headerlink" title="@PreDestroy"></a>@PreDestroy</h4><p><strong>作用</strong>：用于指定销毁方法</p><h4 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h4><p><strong>作用</strong>：用于指定初始化方法 </p><h2 id="Spring一些新注解的使用"><a href="#Spring一些新注解的使用" class="headerlink" title="Spring一些新注解的使用"></a>Spring一些新注解的使用</h2><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><ul><li><pre><code>作用：指定当前类是一个配置类</code></pre></li><li><pre><code>细节：当配置类作为AnnotationConfigApplicationContext对象创建的参数时，该注解可以不写。</code></pre></li></ul><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><ul><li><pre><code> 作用：用于通过注解指定spring在创建容器时要扫描的包(范围)</code></pre></li><li><pre><code> 属性：</code></pre></li><li><pre><code> value：它和basePackages的作用是一样的，都是用于指定创建容器时要扫描的包。</code></pre></li><li><pre><code> 我们使用此注解就等同于在xml中配置了:</code></pre></li><li><pre><code> &lt;context:component-scan base-package="com.itheima"&gt;&lt;/context:component-scan&gt;</code></pre></li></ul><h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h4><ul><li><pre><code> 作用：用于把当前方法的返回值作为bean对象存入spring的ioc容器中</code></pre></li><li><pre><code> 属性:</code></pre></li><li><pre><code> name:用于指定bean的id。当不写时，默认值是当前方法的名称</code></pre></li><li><pre><code> 细节：</code></pre></li><li><pre><code> 当我们使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象。</code></pre></li><li><pre><code> 查找的方式和Autowired注解的作用是一样的</code></pre></li></ul><h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><ul><li><pre><code> 作用：用于导入其他的配置类</code></pre></li><li><pre><code> 属性：</code></pre></li><li><pre><code> value：用于指定其他配置类的字节码。</code></pre></li><li><pre><code> 当我们使用Import的注解之后，有Import注解的类就父配置类，而导入的都是子配置类</code></pre></li></ul><h4 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h4><ul><li><pre><code> 作用：用于指定properties文件的位置</code></pre></li><li><pre><code> 属性：</code></pre></li><li><pre><code> value：指定文件的名称和路径。</code></pre></li><li><pre><code> 关键字：classpath，表示类路径下</code></pre></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.itheima"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">JdbcConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:jdbcConfig.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用纯注解的方式实现ioc案例"><a href="#使用纯注解的方式实现ioc案例" class="headerlink" title="使用纯注解的方式实现ioc案例"></a>使用纯注解的方式实现ioc案例</h2><pre class="line-numbers language-none"><code class="language-none">@ComponentScan("com.itheima")@Import(JdbcConfig.class)@PropertySource("classpath:jdbcConfig.properties")public class SpringConfiguration {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DBUtils"><a href="#DBUtils" class="headerlink" title="DBUtils"></a>DBUtils</h2><h3 id="DBUtils是什么，有什么作用？"><a href="#DBUtils是什么，有什么作用？" class="headerlink" title="DBUtils是什么，有什么作用？"></a>DBUtils是什么，有什么作用？</h3><p>持久层选择DBUtils</p><p>DBUtils简化了JDBC的开发步骤，使得我们可以用更少量的代码实现连接数据库的功能</p><p>JavaBean是一个用于封装数据的类，在与数据库连接之中，JavaBean其的作用是将获取的数据库的记录封装到JavaBean中。特性如下：</p><ol><li>需要实现接口：java.io.Serializable ，可以省略不写。</li><li>提供私有字段：private 类型 字段名;</li><li>提供getter/setter方法：</li><li>提供无参构造</li></ol><p>获取getter/setter方法，在类中右键-&gt;Source-&gt;Generate Getters and Setters</p><h3 id="DBUtils使用"><a href="#DBUtils使用" class="headerlink" title="DBUtils使用"></a>DBUtils使用</h3><p>DBUtils封装了JDBC的操作，核心功能如下：<br>Dbutils三个核心功能介绍</p><ol><li>QueryRunner中提供对sql语句操作的API.</li><li>ResultSetHandler接口，用于定义select操作后，怎样封装结果集.</li><li>DbUtils类是一个工具类，定义了关闭资源与事务处理的方法</li></ol><h3 id="QueryRunner核心类："><a href="#QueryRunner核心类：" class="headerlink" title="QueryRunner核心类："></a>QueryRunner核心类：</h3><ol><li>QueryRunner(DataSource ds) ；传入参数为连接池</li><li>update(String sql, Object… params) ，执行insert update delete操作</li><li>query(String sql, ResultSetHandler rsh, Object… params) ，执行 select操作</li></ol><h2 id="spring和junit的整合"><a href="#spring和junit的整合" class="headerlink" title="spring和junit的整合"></a>spring和junit的整合</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 使用Junit单元测试：测试我们的配置 * Spring整合junit的配置 *      1、导入spring整合junit的jar(坐标) *      2、使用Junit提供的一个注解把原有的main方法替换了，替换成spring提供的 *             @Runwith *      3、告知spring的运行器，spring和ioc创建是基于xml还是注解的，并且说明位置 *          @ContextConfiguration *                  locations：指定xml文件的位置，加上classpath关键字，表示在类路径下 *                  classes：指定注解类所在地位置 * *   当我们使用spring 5.x版本的时候，要求junit的jar必须是4.12及以上 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">SpringConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">IAccountService</span> as <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//3.执行方法</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> accounts <span class="token operator">=</span> as<span class="token punctuation">.</span><span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account <span class="token operator">:</span> accounts<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//3.执行方法</span>        <span class="token class-name">Account</span> account <span class="token operator">=</span> as<span class="token punctuation">.</span><span class="token function">findAccountById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>动态代理没听明白<br>视频：123-131   还需要看java基础的反射和基础知识</p><p><strong>特点</strong>：字节码随用随创建，随用随加载<br><strong>作用</strong>：不修改源码的基础上对方法增强<br><strong>分类</strong>：<br>基于接口的动态代理<br>基于子类的动态代理</p><h3 id="动态代理1：基于接口的动态代理"><a href="#动态代理1：基于接口的动态代理" class="headerlink" title="动态代理1：基于接口的动态代理"></a>动态代理1：基于接口的动态代理</h3><p>基于接口的动态代理：<br>涉及的类：Proxy<br>提供者：JDK官方<br>如何创建代理对象：<br>使用Proxy类中的newProxyInstance方法<br>创建代理对象的要求：</p><p><strong>被代理类最少实现一个接口，如果没有则不能使用</strong></p><p><strong>newProxyInstance</strong>   方法的参数：</p><p>ClassLoader：类加载器<br>    它是用于加载代理对象字节码的。和被代理对象使用相同的类加载器。固定写法。</p><p>Class[]：字节码数组<br>    它是用于让代理对象和被代理对象有相同方法。固定写法。</p><p>InvocationHandler：用于提供增强的代码<br>    它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。</p><p>此接口的实现类都是谁用谁写。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">IProducer</span> proxyProducer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IProducer</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>producer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                producer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">/**                     * 作用：执行被代理对象的任何接口方法都会经过该方法                     * 方法参数的含义                     * @param proxy   代理对象的引用                     * @param method  当前执行的方法                     * @param args    当前执行方法所需的参数                     * @return        和被代理对象方法有相同的返回值                     * @throws Throwable                     */</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>                        <span class="token comment">//提供增强的代码</span>                        <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        <span class="token comment">//1.获取方法执行的参数</span>                        <span class="token class-name">Float</span> money <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">)</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token comment">//2.判断当前方法是不是销售</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"saleProduct"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>producer<span class="token punctuation">,</span> money<span class="token operator">*</span><span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyProducer<span class="token punctuation">.</span><span class="token function">saleProduct</span><span class="token punctuation">(</span><span class="token number">10000f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态代理2：基于子类的动态代理"><a href="#动态代理2：基于子类的动态代理" class="headerlink" title="动态代理2：基于子类的动态代理"></a>动态代理2：基于子类的动态代理</h3><p><strong>特点</strong>：字节码随用随创建，随用随加载<br><strong>作用</strong>：不修改源码的基础上对方法增强</p><p>基于子类的动态代理：<br>涉及的类：Enhancer<br>提供者：第三方cglib库<br>如何创建代理对象：<br>使用Enhancer类中的create方法<br>创建代理对象的要求：<br>被代理类不能是最终类<br>create方法的参数：</p><ul><li><p>Class：字节码<br>它是用于指定被代理对象的字节码。</p></li><li><p>Callback：用于提供增强的代码<br>它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。</p><pre><code> 此接口的实现类都是谁用谁写。</code></pre></li></ul><p>我们一般写的都是该接口的子接口实现类：MethodInterceptor </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Producer</span> cglibProducer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Producer</span><span class="token punctuation">)</span><span class="token class-name">Enhancer</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>producer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span><span class="token comment">//提供增强的代码</span><span class="token class-name">Object</span> returnValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token comment">//1.获取方法执行的参数</span>     <span class="token class-name">Float</span> money <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">)</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//2.判断当前方法是不是销售</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"saleProduct"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>producer<span class="token punctuation">,</span> money<span class="token operator">*</span><span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cglibProducer<span class="token punctuation">.</span><span class="token function">saleProduct</span><span class="token punctuation">(</span><span class="token number">12000f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>面向切面编程<br>作用：在程序运行期间，不修改源码的基础上对方法进行增强<br>优势：减少重复代码，提高开发效率，维护方便</p><p>是否实现了接口来判断<br>基于接口和基于子类的两种方式来动态代理</p><h2 id="Spring-Aop相关术语"><a href="#Spring-Aop相关术语" class="headerlink" title="Spring Aop相关术语"></a>Spring Aop相关术语</h2><p><strong>连接点</strong><br>方法就是连接点</p><p><strong>切入点</strong><br>被增强的方法就是切入点<br>所有的切入点都是连接点，但不是所有的连接点都是切入点</p><p><strong>通知和增强</strong><br>环绕通知是指整个方法调用</p><p><strong>四种通知类型</strong><br>前置通知<br>后置通知<br>异常通知<br>最终通知</p><p><strong>目标对象</strong><br>被代理对象</p><p><strong>织入</strong><br>加入增强功能的过程</p><p><strong>代理对象</strong><br>就是增强后的的代理类</p><p><strong>引介</strong><br>建立接入点方法</p><p><strong>切面</strong><br>切入点和通知(引介)的集合<br>就是一个抽象的概念，一步一步的执行，进行切分就是切入</p><h2 id="Spring中AOP配置"><a href="#Spring中AOP配置" class="headerlink" title="Spring中AOP配置"></a>Spring中AOP配置</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop        https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- an HTTP Session-scoped bean exposed as a proxy --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userPreferences<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.something.UserPreferences<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- instructs the container to proxy the surrounding bean --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>scoped-proxy</span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- a singleton-scoped bean injected with a proxy to the above bean --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.something.SimpleUserService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- a reference to the proxied userPreferences bean --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userPreferences<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userPreferences<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring中标签的AOP配置"><a href="#Spring中标签的AOP配置" class="headerlink" title="Spring中标签的AOP配置"></a>Spring中标签的AOP配置</h2><pre class="line-numbers language-none"><code class="language-none">spring中基于XML的AOP配置步骤        1、把通知Bean也交给spring来管理        2、使用aop:config标签表明开始AOP的配置        3、使用aop:aspect标签表明配置切面                id属性：是给切面提供一个唯一标识                ref属性：是指定通知类bean的Id。        4、在aop:aspect标签的内部使用对应标签来配置通知的类型               我们现在示例是让printLog方法在切入点方法执行之前之前：所以是前置通知               aop:before：表示配置前置通知                    method属性：用于指定Logger类中哪个方法是前置通知                    pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切入点表达式的写法"><a href="#切入点表达式的写法" class="headerlink" title="切入点表达式的写法"></a>切入点表达式的写法</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">切入点表达式的写法：                关键字：execution(表达式)                表达式：                    访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)                标准的表达式写法：                    public void com.itheima.service.impl.AccountServiceImpl.saveAccount()                访问修饰符可以省略                    void com.itheima.service.impl.AccountServiceImpl.saveAccount()                返回值可以使用通配符，表示任意返回值                    * com.itheima.service.impl.AccountServiceImpl.saveAccount()                包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.                    * *.*.*.*.AccountServiceImpl.saveAccount())                包名可以使用..表示当前包及其子包                    * *..AccountServiceImpl.saveAccount()                类名和方法名都可以使用*来实现通配                    * *..*.*()                参数列表：                    可以直接写数据类型：                        基本类型直接写名称           int                        引用类型写包名.类名的方式   java.lang.String                    可以使用通配符表示任意类型，但是必须有参数                    可以使用..表示有无参数均可，有参数可以是任意类型                全通配写法：                    * *..*.*(..)                实际开发中切入点表达式的通常写法：                    切到业务层实现类下的所有方法                        * com.itheima.service.impl.*.*(..)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.utils.Logger<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置AOP--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--配置切面 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 配置通知的类型，并且建立通知方法和切入点方法的关联--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>printLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.itheima.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>before</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Aop通知的四种类型"><a href="#Aop通知的四种类型" class="headerlink" title="Aop通知的四种类型"></a>Aop通知的四种类型</h2><p>基于XML的aop配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 配置Logger类 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.utils.Logger<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!--配置AOP--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- 配置切入点表达式 id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容             此标签写在aop:aspect标签内部只能当前切面使用。             它还可以写在aop:aspect外面，此时就变成了所有切面可用         --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.itheima.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--配置切面 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token comment">&lt;!-- 配置前置通知：在切入点方法执行之前执行           &lt;aop:before method="beforePrintLog" pointcut-ref="pt1" &gt;&lt;/aop:before&gt;--&gt;</span>           <span class="token comment">&lt;!-- 配置后置通知：在切入点方法正常执行之后值。它和异常通知永远只能执行一个           &lt;aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"&gt;&lt;/aop:after-returning&gt;--&gt;</span>           <span class="token comment">&lt;!-- 配置异常通知：在切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个           &lt;aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"&gt;&lt;/aop:after-throwing&gt;--&gt;</span>           <span class="token comment">&lt;!-- 配置最终通知：无论切入点方法是否正常执行它都会在其后面执行           &lt;aop:after method="afterPrintLog" pointcut-ref="pt1"&gt;&lt;/aop:after&gt;--&gt;</span>           <span class="token comment">&lt;!-- 配置环绕通知 详细的注释请看Logger类中--&gt;</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aroundPringLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>around</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>环绕通知    * 问题：    *      当我们配置了环绕通知之后，切入点方法没有执行，而通知方法执行了。    * 分析：    *      通过对比动态代理中的环绕通知代码，发现动态代理的环绕通知有明确的切入点方法调用，而我们的代码中没有。    * 解决：    *      Spring框架为我们提供了一个接口：ProceedingJoinPoint。()，此方法就相当于明确调用切入点方法。    *      该接口可以作为环绕通知的方法参数，在程序执行时，spring框架会为我们提供该接口的实现类供我们使用。    *    * spring中的环绕通知：    *      它是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式。      public Object aroundPringLog(ProceedingJoinPoint pjp){       Object rtValue = null;       try{           Object[] args = pjp.getArgs();//得到方法执行所需的参数           System.out.println("Logger类中的aroundPringLog方法开始记录日志了。。。前置");           rtValue = pjp.proceed(args);//明确调用业务层方法（切入点方法）           System.out.println("Logger类中的aroundPringLog方法开始记录日志了。。。后置");           return rtValue;       }catch (Throwable t){           System.out.println("Logger类中的aroundPringLog方法开始记录日志了。。。异常");           throw new RuntimeException(t);       }finally {           System.out.println("Logger类中的aroundPringLog方法开始记录日志了。。。最终");       }   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring注解的AOP配置"><a href="#Spring注解的AOP配置" class="headerlink" title="Spring注解的AOP配置"></a>Spring注解的AOP配置</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"logger"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Aspect</span><span class="token comment">//表示当前类是一个切面类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.impl.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pt1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">/**     * 前置通知     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">beforePrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知Logger类中的beforePrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 后置通知     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">afterReturningPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知Logger类中的afterReturningPrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 异常通知     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">afterThrowingPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知Logger类中的afterThrowingPrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 最终通知     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">afterPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知Logger类中的afterPrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注解的方式实现环绕增强"><a href="#注解的方式实现环绕增强" class="headerlink" title="注解的方式实现环绕增强"></a>注解的方式实现环绕增强</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"logger"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Aspect</span><span class="token comment">//表示当前类是一个切面类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.itheima.service.impl.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pt1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">aroundPringLog</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Object</span> rtValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到方法执行所需的参数</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。前置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rtValue <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//明确调用业务层方法（切入点方法）</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。后置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> rtValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。最终"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注解的方式aop环绕增强启动类"><a href="#注解的方式aop环绕增强启动类" class="headerlink" title="注解的方式aop环绕增强启动类"></a>注解的方式aop环绕增强启动类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJautoProxy</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackage<span class="token operator">=</span><span class="token string">"com.eeee"</span><span class="token punctuation">)</span><span class="token comment">/** * 使用Junit单元测试：测试我们的配置 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceTest</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span>  <span class="token class-name">IAccountService</span> as<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        as<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token number">100f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h1><h2 id="Spring中的jdbcTemlate以及Spring事务控制"><a href="#Spring中的jdbcTemlate以及Spring事务控制" class="headerlink" title="Spring中的jdbcTemlate以及Spring事务控制"></a>Spring中的jdbcTemlate以及Spring事务控制</h2><p>JDBCTemplate<br>spring.core包下的工具类</p><p>JDBCDaoSupper  自己定义一个公共类<br>抽取dao层的公共代码<br>xml方式注入方式    可以使用继承的方式来减少重复的代码<br>使用注解的方式     就直接autowired就行</p><p>如果使用了spring中的jdbcdaosupper类<br>再使用注解的方式注入就变得麻烦了</p><h2 id="注解的方式实现aop环境配置"><a href="#注解的方式实现aop环境配置" class="headerlink" title="注解的方式实现aop环境配置"></a>注解的方式实现aop环境配置</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--开启spring对注解AOP的支持--&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="基于XML的声明式事务控制配置步骤"><a href="#基于XML的声明式事务控制配置步骤" class="headerlink" title="基于XML的声明式事务控制配置步骤"></a>基于XML的声明式事务控制配置步骤</h2><h3 id="1、配置事务管理器"><a href="#1、配置事务管理器" class="headerlink" title="1、配置事务管理器"></a>1、配置事务管理器</h3><h3 id="2、配置事务的通知"><a href="#2、配置事务的通知" class="headerlink" title="2、配置事务的通知"></a>2、配置事务的通知</h3><p>此时我们需要导入事务的约束 tx名称空间和约束，同时也需要aop的<br>使用 tx:advice 标签配置事务通知</p><p><strong>属性</strong>：</p><p><strong>id</strong>：给事务通知起一个唯一标识</p><p><strong>transaction-manager</strong>：给事务通知提供一个事务管理器引用</p><h3 id="3、配置AOP中的通用切入点表达式"><a href="#3、配置AOP中的通用切入点表达式" class="headerlink" title="3、配置AOP中的通用切入点表达式"></a>3、配置AOP中的通用切入点表达式</h3><h3 id="4、建立事务通知和切入点表达式的对应关系"><a href="#4、建立事务通知和切入点表达式的对应关系" class="headerlink" title="4、建立事务通知和切入点表达式的对应关系"></a>4、建立事务通知和切入点表达式的对应关系</h3><h3 id="5、配置事务的属性"><a href="#5、配置事务的属性" class="headerlink" title="5、配置事务的属性"></a>5、配置事务的属性</h3><p>是在事务的通知tx:advice标签的内部</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 配置事务管理器 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!-- 配置事务的通知--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置事务的属性                isolation：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。                propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。                read-only：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。                timeout：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了数值，以秒为单位。                rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。表示任何异常都回滚。                no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。表示任何异常都回滚。        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>method</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 配置aop--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 配置切入点表达式--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.itheima.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--建立切入点表达式和事务通知的对应关系 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于注解配置事务管理器"><a href="#基于注解配置事务管理器" class="headerlink" title="基于注解配置事务管理器"></a>基于注解配置事务管理器</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 配置数据源--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/eesy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- spring中基于XML的声明式事务控制配置步骤       1、配置事务管理器       2、配置事务的通知               此时我们需要导入事务的约束 tx名称空间和约束，同时也需要aop的               使用tx:advice标签配置事务通知                   属性：                       id：给事务通知起一个唯一标识                       transaction-manager：给事务通知提供一个事务管理器引用       3、配置AOP中的通用切入点表达式       4、建立事务通知和切入点表达式的对应关系       5、配置事务的属性              是在事务的通知tx:advice标签的内部    --&gt;</span>       <span class="token comment">&lt;!-- 配置事务管理器 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 配置事务的通知--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token comment">&lt;!-- 配置事务的属性               isolation：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。               propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。               read-only：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。               timeout：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了数值，以秒为单位。               rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。表示任何异常都回滚。               no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。表示任何异常都回滚。       --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>method</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 配置aop--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- 配置切入点表达式--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.itheima.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--建立切入点表达式和事务通知的对应关系 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在你的业务层加上-Transactional注解"><a href="#在你的业务层加上-Transactional注解" class="headerlink" title="在你的业务层加上@Transactional注解"></a>在你的业务层加上@Transactional注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>SUPPORTS<span class="token punctuation">,</span>readOnly<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//只读型事务的配置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.itheima"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">JdbcConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">TransactionConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"jdbcConfig.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableTransactionManagement</span>  <span class="token comment">//EnableTransactionManagement</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">/** * 使用Junit单元测试：测试我们的配置 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes<span class="token operator">=</span> <span class="token class-name">SpringConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span>  <span class="token class-name">IAccountService</span> as<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">testTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        as<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token number">100f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编程式事物控制"><a href="#编程式事物控制" class="headerlink" title="编程式事物控制"></a>编程式事物控制</h2><p>没看，视频156-158</p>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java框架 </tag>
            
            <tag> Srping </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive学习笔记</title>
      <link href="2021/01/16/cdh/hive/hive/"/>
      <url>2021/01/16/cdh/hive/hive/</url>
      
        <content type="html"><![CDATA[<h3 id="HIVE是什么"><a href="#HIVE是什么" class="headerlink" title="HIVE是什么"></a>HIVE是什么</h3><p><strong>hive是hadoop的一个数据仓库工具</strong>，将结构化数据文件映射成一张数据库表，并提供sql查询功能，把sql语句转化成mr任务执行</p><p>不建议存储，更用于查询和分析结果。它比数据库高一个级别，面向主题，包含数据库的许多表。可以通过etl(数据抽取，转换，加载)来完成合并数据</p><h4 id="什么是数据仓库"><a href="#什么是数据仓库" class="headerlink" title="什么是数据仓库"></a>什么是数据仓库</h4><p> 很大的数据存储集合 ,数据仓库是一个支持管理决策的数据集合，面向主题，集成的，不易丢失的并且是时变的</p><p>数据仓库是所有操作环境和外部数据源的快照集合，不需要非常精确，因为它必须在特定的时间基础上从操作环境中提取出来</p><p>hive支持索引</p><p>hive支持行级事务</p><p>hive支持视图</p><p>hive不支持存储过程</p><p>hive不支持非等值连接</p><h4 id="hive的组成结构"><a href="#hive的组成结构" class="headerlink" title="hive的组成结构"></a>hive的组成结构</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--用户接口--&gt;</span>webui（浏览器访问hive）ui用户接口的意思Client CLI(hive shell 命令行)console uiJDBC/ODBC(java访问hive)thriftserver(当在项目中要求使用java直连hive  一定要打开hive的thriftserver服务)<span class="token comment">&lt;!--元数据存储(Metastore)--&gt;</span>默认存储在derby(嵌入式数据库)线上使用时一般换为MySQL<span class="token comment">&lt;!--驱动器(Driver)--&gt;</span>1、解析器(SQL Parser):将SQL字符转换成抽象语法树AST,这一步一般使用都是第三方工具库完成,比如antlr,对AST进行语法分析,比如表是否存在,字段是否存在,SQL语句是否有误2、编译器(Physical Plan):将AST编译生成逻辑执行计划3、优化器(Query Optimizer):对逻辑执行计划进行优化4、执行器(Execution):把逻辑执行计划转换成可以运行的物理计划,对于Hive来说,就是MR/Spark<span class="token comment">&lt;!--hadoop--&gt;</span>用MapReduce进行计算，用hdfs来进行存储<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Hive是如何将SQL转化为MapReduce任务的？"><a href="#Hive是如何将SQL转化为MapReduce任务的？" class="headerlink" title="Hive是如何将SQL转化为MapReduce任务的？"></a>Hive是如何将SQL转化为MapReduce任务的？</h4><p>hiveSQL转换成MapReduce的执行计划包括如下几个步骤：<br> HiveSQL -&gt;AST(抽象语法树) -&gt; QB(查询块) -&gt;OperatorTree（操作树）-&gt;优化后的操作树-&gt;mapreduce任务树-&gt;优化后的mapreduce任务树<br>链接：<a href="https://www.jianshu.com/p/660fd157c5eb">https://www.jianshu.com/p/660fd157c5eb</a></p><p>1、Antlr定义SQL的语法规则，完成SQL词法，语法解析，将SQL转化为抽象语法树AST Tree</p><p>2、遍历AST Tree，抽象出查询的基本组成单元QueryBlock</p><p>3、遍历QueryBlock，翻译为执行操作树OperatorTree</p><p>4、逻辑层优化器进行OperatorTree变换，合并不必要的ReduceSinkOperator，减少shuffle数据量</p><p>5、遍历OperatorTree，翻译为MapReduce任务</p><p>6、物理层优化器进行MapReduce任务的变换，生成最终的执行计划</p><h4 id="什么是hive的元数据"><a href="#什么是hive的元数据" class="headerlink" title="什么是hive的元数据"></a>什么是hive的元数据</h4><p>是对真实数据的描述信息</p><p>真实数据的位置信息、时间戳、分片信息等</p><p>表名,表所属数据库(默认是default) ,表的拥有者,列/分区字段,表的类型(是否是外部表),表的数据所在目录等</p><h4 id="HIVE在hdfs的存储位置"><a href="#HIVE在hdfs的存储位置" class="headerlink" title="HIVE在hdfs的存储位置"></a>HIVE在hdfs的存储位置</h4><p>/<strong>hive的默认存储位置是/user/hive/warehouse</strong>/</p><h4 id="hive的语法"><a href="#hive的语法" class="headerlink" title="hive的语法"></a>hive的语法</h4><p>Hql语法和数据库表的名字都不区分大小写</p><p>Mysql中的表名区分大小写</p><h4 id="hive的三种模式"><a href="#hive的三种模式" class="headerlink" title="hive的三种模式"></a>hive的三种模式</h4><p>单用户模式    多用户模式   远程服务器模式 </p><h4 id="hive的读时模式"><a href="#hive的读时模式" class="headerlink" title="hive的读时模式"></a>hive的读时模式</h4><p>HIVI处理的数据是大数据，在保存数据时不对数据进行效验，而是在读数据时效验，不符合格式的数据设置为null</p><p>传统的数据库如mysql，oracle是写时模式，不符合格式的数据写不进去</p><h3 id="安装Hive"><a href="#安装Hive" class="headerlink" title="安装Hive"></a>安装Hive</h3><p> <a href="https://blog.csdn.net/ntuxiaolei/article/details/81777335">https://blog.csdn.net/ntuxiaolei/article/details/81777335</a> （Centos7 yum安装mysql（完整版））</p><p>//centos6.5安装步骤</p><p>（先安装mysql）解压hive的包</p><p>在apache-hive-1.2.0-bin/conf/下新建一个hive-site.xml文件</p><p>在文件中写内容</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--下面这个是如果hive在2.0以上需要配置的--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hive.metastore.schema.verification<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--下面必须配置--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--jdbc连接mysql，连结地址（mysql安装的地址），元数据放置的的数据库（在mysql中必须创建数据库）和数据库字符编码 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>jdbc:mysql://192.168.237.12:3306/hive?characterEncoding=UTF-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useSSL=false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!--mysql驱动程序--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--账号--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>javax.jdo.option.ConnectionUserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!--密码--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>javax.jdo.option.ConnectionPassword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更改/etc/profile文件 </p><p><img src="/2021/01/16/cdh/hive/hive/1567687924055.png" alt="1567687924055"></p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME=/root/Downloads/jdk1.8.0_161export PATH=$PATH:$JAVA_HOME/binexport HADOOP_HOME=/root/Downloads/hadoop-2.6.5export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbinexport ZOOKEEPER_HOME=/root/Downloads/zookeeper-3.4.5export PATH=$PATH:$ZOOKEEPER_HOME/binexport HIVE_HOME=/root/Downloads/apache-hive-1.2.0-binexport PATH=$PATH:$HIVE_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/<strong>在hive包下面的lib目录下导入mysql-connector-java的控制包</strong>/</p><p>在hadoop安装目录中core-site.xml中添加配置文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hadoop.proxyuser.root.hosts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hadoop.proxyuser.root.groups<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在全部完成后(包括mysql)在hive的bin目录中执行命令初始化数据库</p><pre class="line-numbers language-none"><code class="language-none">./schematool -initSchema -dbType mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>hive安装完成在mysql安装完后可以启动 </p><pre class="line-numbers language-none"><code class="language-none">hive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><pre class="line-numbers language-none"><code class="language-none">centos7安装yum数据源的mysqlhttps://blog.csdn.net/ntuxiaolei/article/details/81777335<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>centos6.5安装mysql数据库是为了在数据库中存储元数据，在没有mysql时，存放在derby中，随着更换目录会丢失文件，安装完成mysql后，将元数据存储到数据库中，不会丢失，可以获取全部的数据</p><p>查询系统自带数据库：</p><pre class="line-numbers language-none"><code class="language-none">rpm -qa | grep mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要删除系统自带数据库</p><pre class="line-numbers language-none"><code class="language-none">rpm -e --nodeps mysql-libs-5.1.71-1.el6.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传MySQL的client和server的包，为了让节点运行资源平衡上传到其他节点上，在上传到节点之后安装mysql</p><pre class="line-numbers language-none"><code class="language-none">rpm -ivh MySQL-server-5.5.47-1.linux2.6.x86_64.rpmrpm -ivh MySQL-client-5.5.47-1.linux2.6.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在上面mysql安装完毕后进行</p><pre class="line-numbers language-none"><code class="language-none">/usr/bin/mysql_secure_installation//进行初始化设置service mysql start//开启mysql服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>设置root密码</p><p><img src="/2021/01/16/cdh/hive/hive/1567694893302.png" alt="1567694893302"></p><p>进入到mysql中进行的操作 远程连接和给予权限</p><pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">mysql -u root -p密码//登陆mysql来进入mysql ——&gt;mysql&gt;查看数据库show databases 显示所有的数据库use mysql   更改显示的数据库show tables 显示当前数据库所有的表select * from user 查看表结构 存储着元数据//修改mysql数据库下面的user表//先删除除了localhost的所有本地连接delete from user where host!='localhost';//update user set host='%';//授权‘%’所有的grant all privileges on *.* to root@'%' identified by '123456';//在授权完毕后要刷新权限flush privileges;//权限开放完成，其他节点安装mysql-client-rpm后可登录mysql服务端  //在其他节点登录登陆mysql时mysql -uroot -p123456 -h 192......;//根据hive-site.xml中的配置文件来进行新建数据库,因为是存储元数据，数据库的编码是latin1create database hive charset='latin1';//先启动hfds和yarn//在hive尝试启动hivehive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MySQL数据库存放的文件数据说明"><a href="#MySQL数据库存放的文件数据说明" class="headerlink" title="MySQL数据库存放的文件数据说明"></a>MySQL数据库存放的文件数据说明</h3><pre class="line-numbers language-none"><code class="language-none">//在存放元数据的hive数据库中DBS存放hive中所有数据库的基本信息SDS存储hive中文件存储的基本信息TABL存放hive表，视图，索引表的基本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/01/16/cdh/hive/hive/1567756068267.png" alt="1567756068267"></p><h4 id="建立表的范式"><a href="#建立表的范式" class="headerlink" title="建立表的范式"></a>建立表的范式</h4><p>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、（前3种重要）<br>巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。</p><p>第一范式是原子性，每一个表的字段属性不能再分隔</p><p>第二范式是主键</p><p>第三范式是主外键</p><h4 id="表对象的关系"><a href="#表对象的关系" class="headerlink" title="表对象的关系"></a>表对象的关系</h4><p><strong>一对一</strong></p><p>可以把任何一个表的主键放入到另一个表中做外键</p><p><strong>一对多</strong></p><p>把一的主键放入到多的表中做外键</p><p><strong>多对多</strong></p><p>需要单独提出一个数据关系表放置两张表中的主键做外键</p><h3 id="hive的数据类型"><a href="#hive的数据类型" class="headerlink" title="hive的数据类型"></a>hive的数据类型</h3><pre class="line-numbers language-none"><code class="language-none">//基本数据类型tinyint1byte有符号整型smallint2byte有符号整型int 4byte有符号整型bigint8byte有符号整型boolean布尔类型float单精度浮点型double双精度浮点型string字符串//复合数据类型timestamp时间戳array数组Array(1,2)map一组无序的键值对map('a',1,'b')struct一组命名的字段Struct('1',1,1,3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内部表和外部表"><a href="#内部表和外部表" class="headerlink" title="内部表和外部表"></a>内部表和外部表</h3><p>内部表：元数据和数据表的数据都被hive管理的表叫做内部表</p><p>外部表：元数据被hive管理，对数据表没有管理权限</p><p><strong>区别</strong>：外部表在删除数据表时只删除元数据，数据表不删除，内部表在删除时元数据和数据表都会删除</p><p>外部表是因为某个需求需要使用hive统计某些数据</p><h4 id="创建外部表"><a href="#创建外部表" class="headerlink" title="创建外部表"></a>创建外部表</h4><pre class="line-numbers language-none"><code class="language-none">create [EXTERNAL] table ...//创建外部表  一般创建基准表时使用//外部表load hdfs文件 删除表还是会删除hdfs源文件的//外部表load local文件 删除表不会删除源文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HIVE语法"><a href="#HIVE语法" class="headerlink" title="HIVE语法"></a>HIVE语法</h3><h5 id="在hive中创建表"><a href="#在hive中创建表" class="headerlink" title="在hive中创建表"></a>在hive中创建表</h5><pre class="line-numbers language-none"><code class="language-none">create table tablename (id int,name String,age tinyint);因为表默认的分隔符是^A，并不识别空格，所以在加载进来文件时会出现null，有两种解决方法1.在创建表时，自定义分隔符create table tablename (字段名 类型) row format delimited fields terminated by " ";2.在要加载的文件中加入默认的字段分隔符^Actrl+v   ctrl+a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="hive的location"><a href="#hive的location" class="headerlink" title="hive的location"></a>hive的location</h5><p>location可以指定文件存储的路径，这样就不会放在默认的路径下面了</p><h5 id="hive的stored"><a href="#hive的stored" class="headerlink" title="hive的stored"></a>hive的stored</h5><p>可以定义hive文件存储格式</p><p>1、<strong>TEXTFILE(默认格式)</strong></p><p>建表时不指定默认为这个格式，导入数据时会直接把数据文件拷贝到hdfs上不进行处理；</p><p>2、SEQUENCEFILE</p><p>二进制文件,以&lt;key,value&gt;的形式序列化到文件中；</p><p>3、RCFILE</p><p>存储方式：数据按行分块 每块按照列存储；</p><p>4、ORCFILE(0.11以后出现)</p><p>存储方式：数据按行分块 每块按照列存储；</p><p>5、PARQUET</p><p>类似于orc，相对于orc文件格式，hadoop生态系统中大部分工程都支持parquet文件。</p><p>————————————————<br>版权声明：本文为CSDN博主「小飞猪666」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/yangshaojun1992/article/details/85124287">https://blog.csdn.net/yangshaojun1992/article/details/85124287</a></p><h5 id="Hive的不等于"><a href="#Hive的不等于" class="headerlink" title="Hive的不等于"></a>Hive的不等于</h5><pre class="line-numbers language-none"><code class="language-none">&lt;&gt;再hive中'&lt;&gt;'代表不等于，hive的不等于会自动过滤null数据，不会查询出来的，如果要查询出包含null的数据需要where （white_level&lt;&gt;'3' or  white_level is null） 或者 where (white_level!='3' or white_level is null )  来保留null 的情况。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="HIVE中导入数据的方式-4种"><a href="#HIVE中导入数据的方式-4种" class="headerlink" title="HIVE中导入数据的方式(4种)"></a>HIVE中导入数据的方式(4种)</h5><pre class="line-numbers language-none"><code class="language-none">//1、载入本地数据load data local inpath '/本地路径' into table tablename;//2、载入hdfs上的数据load data inpath '/hdfs路径' into table tablename;//上面两种导入方式会把原始数据变成hive的数据,除非外部表//3、追加数据insert into tablename1 select * from tablename2;// 覆盖数据insert overwrite tablename1 select * from table2;//4、在创建表的时候直接加载数据create table .... location hdfs的某个路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/01/16/cdh/hive/hive/1567758509495.png" alt="1567758509495"></p><h5 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h5><pre class="line-numbers language-none"><code class="language-none">drop table tablename;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="增加字段"><a href="#增加字段" class="headerlink" title="增加字段"></a>增加字段</h5><pre class="line-numbers language-none"><code class="language-none">alter table tablename add columns (字段 类型,字段 类型)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看表的分区信息"><a href="#查看表的分区信息" class="headerlink" title="查看表的分区信息"></a>查看表的分区信息</h5><pre class="line-numbers language-none"><code class="language-none">show partitions tablenames;//查看表的分区信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="查询数据库信息"><a href="#查询数据库信息" class="headerlink" title="查询数据库信息"></a>查询数据库信息</h5><pre class="line-numbers language-none"><code class="language-none">DESCRIBE DATABASE [EXTENDED] 数据库名称；注意：添加EXTENDED关键字可以查看更多信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="HIVE的SQL和MySQL的区别（9个）"><a href="#HIVE的SQL和MySQL的区别（9个）" class="headerlink" title="HIVE的SQL和MySQL的区别（9个）"></a>HIVE的SQL和MySQL的区别（9个）</h3><h4 id="一定要注意-在hive中-子查询的结果集一定要给表名"><a href="#一定要注意-在hive中-子查询的结果集一定要给表名" class="headerlink" title="一定要注意 在hive中 子查询的结果集一定要给表名"></a>一定要注意 在hive中 子查询的结果集一定要给表名</h4><h5 id="1、聚合函数通常都和group-by联用"><a href="#1、聚合函数通常都和group-by联用" class="headerlink" title="1、聚合函数通常都和group by联用"></a>1、聚合函数通常都和group by联用</h5><p>因为只能显示group by字段，使用聚合函数可以显示其他要使用的字段</p><h5 id="2、hive可以在聚合函数中使用distinct关键字做去重处理"><a href="#2、hive可以在聚合函数中使用distinct关键字做去重处理" class="headerlink" title="2、hive可以在聚合函数中使用distinct关键字做去重处理"></a>2、hive可以在聚合函数中使用distinct关键字做去重处理</h5><h5 id="3、limit-num-num只是从结果中正数取num条数据"><a href="#3、limit-num-num只是从结果中正数取num条数据" class="headerlink" title="3、limit num  num只是从结果中正数取num条数据"></a>3、limit num  num只是从结果中正数取num条数据</h5><h5 id="4、order-by-和-sort-by区别"><a href="#4、order-by-和-sort-by区别" class="headerlink" title="4、order by 和 sort by区别"></a>4、order by 和 sort by区别</h5><h6 id="order-by-排序"><a href="#order-by-排序" class="headerlink" title="order by 排序"></a>order by 排序</h6><p>​    指明了hive底层mr中reduct只是用一个  保持全局有序</p><h6 id="sort-by-排序"><a href="#sort-by-排序" class="headerlink" title="sort by  排序"></a>sort by  排序</h6><p>​    指明了hive底层使用了多个reducer，只能保持reducer中的数据有序，保持局部有序</p><h5 id="5、distribute-by-和-sort-by"><a href="#5、distribute-by-和-sort-by" class="headerlink" title="5、distribute by 和 sort by"></a>5、distribute by 和 sort by</h5><p><strong>distribute by 和 sort by 必须一起使用</strong></p><h6 id="distribute-by"><a href="#distribute-by" class="headerlink" title="distribute by"></a>distribute by</h6><p>hive执行sql maptask阶段是按照什么列数据进行分区采用hash进行分区</p><p>采集hash算法，在map端将查询的结果中hash值相同的结果分发到对应的reduce文件中。</p><p>sort by为每一个reducer产生一个排序文件</p><pre class="line-numbers language-none"><code class="language-none">select * from t_emp distribute by deptno sort by salary desc ;//他们划分区域的字段和排序的字段可以不同但是distribute必须写在sort by前边<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="sort-by"><a href="#sort-by" class="headerlink" title="sort by"></a>sort by</h6><p>控制reduct中数据的排序</p><p>select … from table distribute by column01 sort by column02;</p><h6 id="Distribute-by和sort-by的使用场景"><a href="#Distribute-by和sort-by的使用场景" class="headerlink" title="Distribute by和sort by的使用场景"></a>Distribute by和sort by的使用场景</h6><p>1.Map输出的文件大小不均。</p><p>2.Reduce输出文件大小不均。</p><p>3.小文件过多。</p><p>4.文件超大。</p><h5 id="6、cluster-by"><a href="#6、cluster-by" class="headerlink" title="6、cluster by"></a>6、cluster by</h5><p>cluster by 是distribute by 和 sort by 的结合 </p><p>如果distribute by 和 sort by 后面的列名称是相同的  那么就可以直接使用cluster by 列名称</p><p>有排序和分区功能,cluster by指定的排序只能降序，不能指定desc和asc</p><p>只能按照一个字段进行分发 并且只能按照这个字段进行排序</p><pre class="line-numbers language-none"><code class="language-none">select mid, money, name from store cluster by mid等价于select mid, money, name from store distribute by mid sort by mid <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="7、rlike"><a href="#7、rlike" class="headerlink" title="7、rlike"></a>7、rlike</h5><p>rlike可以把某列的值和某个正则表达式进行匹配比较</p><p>where name like ‘%李’   匹配以’李’结尾的</p><p>where name rlike ‘[李]’  匹配包含’李’的</p><h5 id="8、join"><a href="#8、join" class="headerlink" title="8、join"></a>8、join</h5><h6 id="left-semi-join"><a href="#left-semi-join" class="headerlink" title="left semi join"></a>left semi join</h6><p>​    在hive低版本(in、exists)关键字不支持，可以使用left semi join 代替  </p><p>map join 在关联时，使用mr中的mapjoin需要配置的参数</p><pre class="line-numbers language-none"><code class="language-none">map join  小表和大表  小表放入到内存中set hive.auto.convert.join=true; 开启map端joinset hive.mapjoin.smalltable.filesize=2500000;  设定小表的大小set hive.auto.convert.join.noconditionaltask=true;  开启多个小表的mapjoin的合并set hive.auto.convert.join.noconditionaltask.size=??; 小于这个设定值的所有小表文件大小  可以使用多个mapjoin合并<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>避免了笛卡尔积（两个表字段的乘积）的出现，提高了运行效率，前面的表是基准表，不会有重复的记录</p><p>因为 left semi join 是 in(keySet) 的关系，遇到右表重复记录，左表会跳过，而 join 则会一直遍历。这就导致右表有重复值得情况下 left semi join 只产生一条，join 会产生多条，也会导致 left semi join 的性能更高</p><pre class="line-numbers language-none"><code class="language-none">select * from t_emp where deptno in (select deptno from t_dept)等价select * from t_emp left semi join t_dept on t_emp.deptno=t_dept.deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="9、hive的非等值连接"><a href="#9、hive的非等值连接" class="headerlink" title="9、hive的非等值连接"></a>9、hive的非等值连接</h5><p><strong>hive中不能使用非等值连接</strong></p><p>通常都是把mysql中的非等值连接修改成别的连接方式或者使用hive函数进行处理</p><h3 id="Hive的4个by的区别"><a href="#Hive的4个by的区别" class="headerlink" title="Hive的4个by的区别"></a>Hive的4个by的区别</h3><p><a href="https://blog.csdn.net/u010003835/article/details/80938339">https://blog.csdn.net/u010003835/article/details/80938339</a></p><h5 id="SORT-BY"><a href="#SORT-BY" class="headerlink" title="SORT BY"></a>SORT BY</h5><p> SORT BY 是一个部分排序方案， 其只会在每个reducer 中对数据进行排序，</p><p>也就是执行一个局部排序过程。</p><p>注意：</p><p><em>\</em>使用sort by 你可以指定执行的reduce 个数 （set mapred.reduce.tasks=）</p><p><strong>对输出的数据再执行归并排序，即可以得到全部结果。</strong></p><h5 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h5><p>ORDER BY 可以指定多个字段，可以按照某个字段进行 升序ASC , 或者 降序DESC.</p><p>  Hive 中 ORDER BY 和其他SQL 方言并没区别，会对查询结果进行一个全局排序。</p><p>其缺点：</p><ol><li> 由于是全局排序，所以<strong>所有的数据会通过一个Reducer 进行处理</strong>，<strong>当数据结果较大的时候，</strong></li></ol><p><strong>一个Reducer 进行处理十分影响性能。</strong></p><p>注意事项：</p><p> <strong>当开启MR 严格模式的时候ORDER BY 必须要设置 LIMIT 子句 ，否则会报错</strong></p><p>开启严格模式：</p><p> set hive.mapred.mode=strict;</p><h5 id="DISTRIBUTE-BY"><a href="#DISTRIBUTE-BY" class="headerlink" title="DISTRIBUTE BY"></a>DISTRIBUTE BY</h5><p>DISTRIBUTE BY 控制map 中的输出在 reducer 中是如何进行划分的。结合sort by一起使用</p><p>使用DISTRIBUTE BY 可以保证相同KEY的记录被划分到一个Reduce 中。</p><h5 id="CLUSTER-BY"><a href="#CLUSTER-BY" class="headerlink" title="CLUSTER BY"></a>CLUSTER BY</h5><p>如果对某一列既想采用SORT BY 也想采用 DISTRIBUTE BY ,</p><p>那么可以使用CLUSTER BY 进行排序。</p><p>注意：</p><p>*<em>排序只能是升序排序（默认排序规则），不能指定排序规则为asc 或者desc。**</em></p><h3 id="Hive常用函数"><a href="#Hive常用函数" class="headerlink" title="Hive常用函数"></a>Hive常用函数</h3><p><a href="https://blog.csdn.net/qq_26442553/article/details/79465417">https://blog.csdn.net/qq_26442553/article/details/79465417</a></p><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p> if(boolean testCondition, T valueTrue, T valueFalseOrNull)</p><p><strong>如果testCondition 为true就返回valueTrue,否则返回valueFalseOrNull ，（valueTrue，valueFalseOrNull为泛型）</strong></p><pre class="line-numbers language-none"><code class="language-none">if( 100 is not null , 'a=100','a=99' )  结果：a=100if( null,100,00 ) 结果：00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="coalesce"><a href="#coalesce" class="headerlink" title="coalesce"></a>coalesce</h4><p>非空查找函数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">COALESCE</span><span class="token punctuation">(</span><span class="token constant">T</span> v1<span class="token punctuation">,</span> <span class="token constant">T</span> v2<span class="token punctuation">,</span> …<span class="token punctuation">)</span>说明<span class="token punctuation">:</span>  返回参数中的第一个非空值；如果所有值都为<span class="token constant">NULL</span>，那么返回<span class="token constant">NULL</span>    select <span class="token function">COALESCE</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'100'</span><span class="token punctuation">,</span>'<span class="token number">50</span>′<span class="token punctuation">)</span> from dual<span class="token punctuation">;</span><span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><p>条件判断函数</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token constant">CASE</span> a <span class="token constant">WHEN</span> b <span class="token constant">THEN</span> c <span class="token punctuation">[</span><span class="token constant">WHEN</span> d <span class="token constant">THEN</span> e<span class="token punctuation">]</span><span class="token operator">*</span> <span class="token punctuation">[</span><span class="token constant">ELSE</span> f<span class="token punctuation">]</span> <span class="token keyword">END</span>说明：如果 a 等于 b ，那么返回 c ；如果 a 等于 d ，那么返回 e ；否则返回 f举例：hive<span class="token operator">&gt;</span> <span class="token constant">Select</span> <span class="token keyword">case</span> <span class="token number">100</span> <span class="token keyword">when</span> <span class="token number">50</span> <span class="token keyword">then</span> <span class="token string">'tom'</span> <span class="token keyword">when</span> <span class="token number">100</span> <span class="token keyword">then</span> <span class="token string">'mary'</span> <span class="token keyword">else</span> <span class="token string">'tim'</span> <span class="token keyword">end</span> from dual<span class="token punctuation">;</span>mary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="get-json-object"><a href="#get-json-object" class="headerlink" title="get_json_object()"></a>get_json_object()</h4><p>将数据转换成json对象并获取指定的字段值</p><pre class="line-numbers language-none"><code class="language-none">selectget_json_object(line,'$.mid') mid_id,get_json_object(line,'$.uid') user_id,**fromt1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sub-str"><a href="#sub-str" class="headerlink" title="sub_str()"></a>sub_str()</h4><pre class="line-numbers language-none"><code class="language-none">substr（string A，int start）返回字符串A从下标start位置到结尾的字符串substr（string A，int start，int end）substr() 第一个参数表示待截取的字段名称，第二个参数表示截取的起始位置，第三个参数表示截取的长度。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="group-by-分组"><a href="#group-by-分组" class="headerlink" title="group by 分组"></a>group by 分组</h4><p>group by 可以进行自动的去重</p><p><strong>能用group by 进行去重不要使用distinct，groupby比distinct效率高很多</strong></p><p>group by 会造成数据倾斜，资源不一致，运行时间不一致很容易造成宕机</p><p>有四点</p><p>打散 聚合 设置计算机的处理能力 设置阀值（超过阀值会自动优化）</p><pre class="line-numbers language-none"><code class="language-none">//1.打散set hive.groupby.skewindata=true;//打散 map端地数据要尽量打散//2.聚合set hive.map.aggr=true;//设置map端地聚合//3.设置计算机的处理能力 set hive.groupby.mapaggr.checkinterval=100000;//计算机本身的处理能力不超过100000条数据的话 能够进行自行优化，不会产生数据倾斜问题4.set hive.map.aggr.hash.min.reduction=0.5;//设置阀值，超过阀值自动优化//上面的都是自动优化 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="having"><a href="#having" class="headerlink" title="having"></a>having</h4><p><strong>分组之后过滤用having，分组之前用where</strong></p><p>having 过滤 跟group by 一起使用，使用聚合函数在没有group by 不能使用 ，</p><p>可以选择分组之后结果的范围</p><p>跟where都是限定返回的数据集，但是where子句中不能使用聚合函数，在having中可以使用聚合函数</p><pre class="line-numbers language-none"><code class="language-none">例：select * from t_emp group by deptno having avg(salary) &gt; 5000;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="collect-list"><a href="#collect-list" class="headerlink" title="collect_list"></a>collect_list</h4><p>可以将同一分组不同行的数据合成一个集合，不会去重，可以取出group by 限制的字段，在使用concat进行拆分</p><h4 id="collect-set"><a href="#collect-set" class="headerlink" title="collect_set()"></a>collect_set()</h4><p>可以将同一分组不同行的数据合成一个集合，会将结果去重，可以取出group by 限制的字段</p><pre class="line-numbers language-none"><code class="language-none">select course,avg(score),collect_set(area) from stud group by course;//course_c1_c2//chinese79.0["sh","bj"]//math93.5["bj"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="concat-1-2"><a href="#concat-1-2" class="headerlink" title="concat($1,*,$2)"></a>concat($1,*,$2)</h4><p>concat**网页<a href="https://www.cnblogs.com/wqbin/p/10266783.html">https://www.cnblogs.com/wqbin/p/10266783.html</a></p><p>CONCAT（）函数用于将多个字符串连接成一个字符串。</p><p>返回结果为连接参数产生的字符串。如<strong>有任何一个参数为NULL ，则返回值为 NULL。</strong>可以有一个或多个参数。</p><pre class="line-numbers language-none"><code class="language-none">+----+--------+| id | name   |+----+--------+|  1 | BioCyc |+----+--------+   SELECT CONCAT(id, ‘，’, name) AS con FROM info LIMIT 1;+----------+| con      |+----------+| 1,BioCyc |+----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="concat-ws-1-2-…"><a href="#concat-ws-1-2-…" class="headerlink" title="concat_ws(*,$1,$2,…)"></a>concat_ws(*,$1,$2,…)</h4><p>第一个参数是其它参数的分隔符。分隔符的位置放在要连接的两个字符串之间。分隔符可以是一个字符串，也可以是其它参数。如果分隔符为 NULL，则结果为 NULL。函数会忽略任何分隔符参数后的 NULL 值。但是CONCAT_WS()不会忽略任何空字符串。 (然而会忽略所有的 NULL）。</p><pre class="line-numbers language-none"><code class="language-none">CONCAT_WS(separator,str1,str2,…)SELECT CONCAT_WS('_',id,name) AS con_ws FROM info LIMIT 1;+----------+| con_ws   |+----------+| 1_BioCyc |+----------+SELECT CONCAT_WS(',','First name',NULL,'Last Name');+----------------------------------------------+| CONCAT_WS(',','First name',NULL,'Last Name') |+----------------------------------------------+| First name,Last Name                         |+----------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="regexp-replace-‘-‘-’-‘-’-‘"><a href="#regexp-replace-‘-‘-’-‘-’-‘" class="headerlink" title="regexp_replace(‘ ‘,’ ‘,’ ‘)"></a>regexp_replace(‘ ‘,’ ‘,’ ‘)</h4><p>REGEXP_REPLACE</p><pre class="line-numbers language-none"><code class="language-none">语法: regexp_replace(string A, string B, string C)操作类型: strings返回值: string说明: 将字符串A中的符合java正则表达式B的部分替换为C。hive&gt; select regexp_replace('h234ney', '\\d+', 'o');OKhoney<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="with-as"><a href="#with-as" class="headerlink" title="with as"></a>with as</h4><p><a href="https://www.cnblogs.com/jeasonit/p/11600083.html">https://www.cnblogs.com/jeasonit/p/11600083.html</a></p><p>with as 也叫做子查询部分，首先定义一个sql片段，该sql片段会被整个sql语句所用到，为了让sql语句的可读性更高些，作为提供数据的部分，也常常用在union等集合操作中。</p><p>with as就类似于一个视图或临时表，可以用来存储一部分的sql语句作为别名，不同的是with as 属于一次性的，而且必须要和其他sql一起使用才可以！</p><p>提高代码的可读性</p><pre class="line-numbers language-hsql" data-language="hsql"><code class="language-hsql">with 表名 asselect ....,表明2 as <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><h4 id="date-format"><a href="#date-format" class="headerlink" title="date_format"></a>date_format</h4><p>时间格式化函数</p><pre class="line-numbers language-none"><code class="language-none">//只保留年和月select date_format('2020-05-15','yyyy-MM');//2020-05<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="date-add"><a href="#date-add" class="headerlink" title="date_add"></a>date_add</h4><p>加减日期</p><pre class="line-numbers language-none"><code class="language-none">//当前日期的前一星期日期select date_add('2020-05-15',-7);//2020-05-08//后一星期日期select date_add('2020-05-15',+7);//2020-05-22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="next-day"><a href="#next-day" class="headerlink" title="next_day"></a>next_day</h4><p>获取当前时间下一周的某天</p><pre class="line-numbers language-none"><code class="language-none">获取下一周的星期一select next_day('2020-05-15','MO');//2020-05-18//星期一到星期日MOTUWETHFRSASU//获取当前周的周一select date_add(next_day('2020-05-15','MO'),-7);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="last-day"><a href="#last-day" class="headerlink" title="last_day()"></a>last_day()</h4><p><strong>返回这个月的最后一天的日期，忽略时分秒部分（HH:mm:ss）</strong> last_day(string date)</p><pre class="line-numbers language-none"><code class="language-none">返回值：string2 hive&gt; select  last_day('2017-02-17 08:34:23');3 OK4 2017-02-285 Time taken: 0.082 seconds, Fetched: 1 row(s)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="date-sub"><a href="#date-sub" class="headerlink" title="date_sub()"></a>date_sub()</h4><pre class="line-numbers language-none"><code class="language-none">date_sub (string startdate,int days)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回值: string </p><p>说明: 返回开始日期startdate减少days天后的日期。 </p><pre class="line-numbers language-none"><code class="language-none">select date_sub('2016-12-29',10);//2016-12-19<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="months-between"><a href="#months-between" class="headerlink" title="months_between"></a>months_between</h4><p>用于计算date1和date2之间有几个月。    如果date1在日历中比date2晚，那么MONTHS_BETWEEN()就返回一个正数。<br>如果date1在日历中比date2早，那么MONTHS_BETWEEN()就返回一个负数。<br>如果date1和date2日期一样，那么MONTHS_BETWEEN()就返回一个0。</p><pre class="line-numbers language-none"><code class="language-none">months_between(date1,date2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p><a href="https://www.cnblogs.com/logon/p/3748020.html">https://www.cnblogs.com/logon/p/3748020.html</a></p><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>默认inner join，</p><p>inner join 产生的结果是两个表的<strong>交集</strong>（匹配上的才会展示）</p><p>如果右表中有多条重复的字段，只要匹配上就显示</p><h4 id="left-semi-join-1"><a href="#left-semi-join-1" class="headerlink" title="left semi join"></a>left semi join</h4><p>1）Semi Join，也叫半连接</p><p>2）left semi join 子句中右边的表只能在 ON 子句中设置过滤条件，在 WHERE 子句、SELECT 子句或其他地方过滤都不行。</p><p>3）遇到右表重复记录，左表会跳过，而 join on 则会一直遍历。</p><p>4）left semi join 中<strong>最后 select 的结果只许出现左表</strong>，因为右表只有 join key 参与关联计算了，而 join on 默认是整个关系模型都参与计算了。</p><p>left semi join 如果右表中有多条重复的字段，只会显示一次</p><h4 id="left-outer-join"><a href="#left-outer-join" class="headerlink" title="left outer join"></a>left outer join</h4><p>left outer join 显示左表的全部，右表</p><h4 id="full-join"><a href="#full-join" class="headerlink" title="full join"></a>full join</h4><p>full join 是全连接，会显示两个表的全部内容，没有匹配到的值显示Null</p><h4 id="union"><a href="#union" class="headerlink" title="union"></a>union</h4><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。</p><p>注意，UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。UNION 只选取记录，而UNION ALL会列出所有记录。</p><pre class="line-numbers language-none"><code class="language-none">select * from teblename1 union tablename2 //相同的字段只会显示一遍select * from tablename1 union all tablename2 //相同的字段也会显示select_statement UNION [ALL | DISTINCT] select_statement UNION [ALL | DISTINCT] select_statement …//查询语句 UNION [ALL | DISTINCT] 查询语句 ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="union-all"><a href="#union-all" class="headerlink" title="union all"></a>union all</h4><p>union all会显示全部的内容，不会进行去重，效率比union高。</p><h5 id="union和union-all的区别"><a href="#union和union-all的区别" class="headerlink" title="union和union all的区别"></a>union和union all的区别</h5><p>union会去重，但会耗费一定资源，经常使用union all，因为效率高</p><h5 id="union-all和full-join的区别"><a href="#union-all和full-join的区别" class="headerlink" title="union all和full join的区别"></a>union all和full join的区别</h5><p>union all关联的两个查询必须拥有相同数量的列。列也必须拥有相似的数据类型</p><p>full join 没有这个限制</p><h5 id="union和join的区别"><a href="#union和join的区别" class="headerlink" title="union和join的区别"></a>union和join的区别</h5><p>join适合有相同字段的表进行join（<strong>可以on</strong>）</p><p>union适合没有相同字段的表</p><h4 id="Map-join"><a href="#Map-join" class="headerlink" title="Map join"></a>Map join</h4><p>将小文件加载到内存</p><p>它通常会用在如下的一些情景：在二个要连接的表中，有一个很大，有一个很小，这个小表可以存放在内存中而不影响性能。<br>这样我们就把小表文件复制到每一个Map任务的本地，再让Map把文件读到内存中待用。</p><pre class="line-numbers language-none"><code class="language-none">set hive.auto.convert.join=true;//set hive.mapjoin.smalltable.filesize=25000000; //小于25M例：select /*+MAPJOIN(t_dept)*/* from t_emp e join t_dept d on e.deptno=d.deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="特殊-is-Null"><a href="#特殊-is-Null" class="headerlink" title="特殊:is Null"></a>特殊:is Null</h4><p>可以使用is null来那出特殊的一部分</p><p><img src="/2021/01/16/cdh/hive/hive/241947220904425.jpg" alt="img"></p><p>DDL：对于表结构的处理</p><pre class="line-numbers language-none"><code class="language-none">alter table tablname rename to new tablename;//更改表的名称alter table tablename change column old column new column coltype;//表中字段的修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>DML：对于表中获取的数据的修改</p><pre class="line-numbers language-none"><code class="language-none">later table tablename add columns (col coltype);//增加表中的字段alter table tablename replace columns (col,是最后的结果展示)//减少表中的字段 age name id ——&gt;&gt;age id <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><h5 id="什么是分区？为什么要分区？"><a href="#什么是分区？为什么要分区？" class="headerlink" title="什么是分区？为什么要分区？"></a>什么是分区？为什么要分区？</h5><p>hive中查询数据表，默认都是全表扫描，如果数据量很大，查询的效率会很低(hive底层是mr)</p><p>为了提升查询效率，通常把经常使用的字段  作为分区字段</p><p><strong>普通表和分区表的区别</strong>在于：一个Hive表在HDFS上是有一个对应的目录来存储数据，普通表的数据直接存储在这个目录下，而分区表数据存储时，是再划分子目录来存储的。一个分区一个子目录。主要作用是来优化查询性能。</p><p>来减少数量，加快查询效率</p><h5 id="原始表什么字段适合分区？"><a href="#原始表什么字段适合分区？" class="headerlink" title="原始表什么字段适合分区？"></a>原始表什么字段适合分区？</h5><p>  这个字段经常被放到where后面做查询条件<br>  这个字段的字段值要符合某个规律</p><h5 id="如何创建分区"><a href="#如何创建分区" class="headerlink" title="如何创建分区"></a>如何创建分区</h5><p>hive中通常把数据表分为原始表，分区表，临时表，结果表。</p><p><strong>原始表</strong>：一般都是把采集到的日志数据文件导入一个表中，这个表中的数据都是日志原始数据</p><p><strong>分区表</strong>：为了提高查询效率，根据某一列进行分区</p><p><strong>临时表</strong>：有原始表到结果表可能会保存临时的统计结果，通常是内部表</p><p><strong>结果表</strong>：存放最终的统计结果，通常也是内部表</p><h5 id="单分区"><a href="#单分区" class="headerlink" title="单分区"></a>单分区</h5><pre class="line-numbers language-none"><code class="language-none">//创建基础表create teble tepyb(id int,temp int,hour int,day int)row format  delimited fields terminated by " ";//创建分区表，分区的伪列不要写在前面的建表语句create table tep(id int,temp int,hour int) partitioned by(day int) row format delimited fields terminated by '\t' lines terminated by '\n' //行之间的分隔符stored as textfile;////往基础表中加载数据load data local inpath '/tt.txt' into table tep ;//指定分区的列按照什么字段值来分alter table tablename add partition (day=2);alter table tablename add partition (day=3);//删除分区的分区条件alter table tablename drop partition (分区条件)alter table part drop partition (mouth='8',day=14);//给每个分区添加数据//建立分区就是在hdfs数据表的目录下再创建目录  //目录名称规则是分区列名称=分区值insert into tep partition (day) select id temp hour day from tpp_bb;//在完成后可以通过linux01:50070下面的/user/hive/warehouse来监控分区分桶后的文件夹//分区是按照字段值把数据放到不同的目录中//  创建好分区表之后  如果再需要按照day进行查询   就不再使用原始表tepyb   而是直接使用分区表tep进行按照国家查询select * from tep where day =2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="多分区"><a href="#多分区" class="headerlink" title="多分区"></a>多分区</h5><p>加了一层分区 更快更便捷</p><pre class="line-numbers language-none"><code class="language-none">//创建分区表create table tep(id int,temp int,hour int) partitioned by(mouth string,day string)row format delimited fields terminated by '\t'lines terminated by '\n'stored as textfile;//创建基准表create table tep2(id int,temp int,hour int,mouth string,day string) row format delimited fields terminated by '\t'lines terminated by '\n'stored as filetext;//给分区添加数据insert into table tablenamepartition (mouth='7',day='10')select mouth,day from tep2 where mouth='7' day='10'; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="动态分区"><a href="#动态分区" class="headerlink" title="动态分区"></a>动态分区</h5><p>动态分区列必须在SELECT语句的列中最后指定，并且与它们在partition()子句中出现的顺序相同。</p><pre class="line-numbers language-none"><code class="language-none">//对应的伪列进行全部的分区//开启动态分区set hive.exec.dynamic.partition=true;//指定动态分区采用的非严格模式set hive.exec.dynamic.partition.mode=nonstrict;//指定动态分区总数SET hive.exec.max.dynamic.partitions=100000;//设定每个节点的最大分区数量SET hive.exec.max.dynamic.partitions.pernode=100000;//创建基准表导入数据....//创建分区表create table tempon.t_access_sum_d (ucount int) partitioned by (uyear string,umonth string)row format delimited fields terminated by '\t'lines terminated by '\n';stored as textfile;//导入数据到分区表中insert overwrite tempon.t_access_sum_d partition (uyear,umonth) select sum(ucount),year(umonth),month(umonth) from tempon.t_access2 group by year(umonth),month(umonth)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">//查看表的分区show partitions tablename;//增加表的分区条件alter table tablename add partition (分区字段)alter table part add partition (mouth='8',day=14);//删除表的分区alter table tablename drop partition (分区字段)alter table part drop partition (mouth='8',day=14);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="混合分区"><a href="#混合分区" class="headerlink" title="混合分区"></a>混合分区</h5><pre class="line-numbers language-none"><code class="language-none">//混合了动态分区和静态分区。且静态分区应该放到动态分区的前面。//插入数据时，第一级分区写死，第二级分区使用动态分区。这样就有效控制了由于分区过多，导致文件名过多，影响hdfs性能的问题。//！！注意静态分区字段要在动态前面insert overwrite  table tempon.t_access_sum_dpartition (uyear='2015',umonth)select sum(ucount),month(umonth) from tempon.t_access2 group by year(umonth),month(umonth) having year(umonth) = '2015';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分桶"><a href="#分桶" class="headerlink" title="分桶"></a>分桶</h3><h5 id="什么是分桶？为什么要分桶？"><a href="#什么是分桶？为什么要分桶？" class="headerlink" title="什么是分桶？为什么要分桶？"></a>什么是分桶？为什么要分桶？</h5><p>桶是比区更细粒度的划分，</p><p>Hive采用对列值哈希，按照hash值除以桶的个数求余的方式决定该条记录存放在哪个桶当中。</p><p>分桶的作用：加快查询的效率，减少 join的笛卡尔积</p><h5 id="如何创建分桶"><a href="#如何创建分桶" class="headerlink" title="如何创建分桶"></a>如何创建分桶</h5><p>通过数据量的大小来定有多少个桶</p><h5 id="表中哪些列适合分桶"><a href="#表中哪些列适合分桶" class="headerlink" title="表中哪些列适合分桶"></a>表中哪些列适合分桶</h5><p>经常被用在where之后出现</p><p>这个字段的字段值没有任何规律</p><h5 id="分桶开始"><a href="#分桶开始" class="headerlink" title="分桶开始"></a>分桶开始</h5><pre class="line-numbers language-none"><code class="language-none">//开启强制执行分桶set hive.enforce.bucketing=true;//创建分桶表create table tmw(id int,name string) clustered by (id) sorted by 'id asc' into 3 buckets;//创建基准表create table tmwyb(id int,name string) row format delimited fields terminated by '\t' lines terminated by '\n'stored as textfile;//load给基准表加载数据load data local inpath '/buck.txt' into table twmyb;//分桶表插入数据insert into tmw select * from tmwyb;//原始表的数据会被放入桶表中  hdfs上按照桶的数量拆分成文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="分区和分桶一起"><a href="#分区和分桶一起" class="headerlink" title="分区和分桶一起"></a>分区和分桶一起</h5><pre class="line-numbers language-none"><code class="language-none">set hive.enforce.bucketing=true;//开启分桶set hive.optimize.bucketmapjoin=true;设置：是否是严格 是否开启分桶set mapreduce.job.reduces=4;//设置reduce的数量create table tmw(id int,name string) partitioned by(sex string) clustered by (id) into 3 buckets;//创建分区分桶表  into num 来指定多少个桶create table tmw2(id int,name string,sex string) row format delimited fields terminated by "\t" lines terminated by '\n' stored as textfile;//创建基础表load data local inpath '/' into table tmw2;//加载数据insert into tmw partition(sex) select id,name,sex from tmw2;//分区表中进行插入数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分区和分桶的区别"><a href="#分区和分桶的区别" class="headerlink" title="分区和分桶的区别"></a>分区和分桶的区别</h4><p>分区是按照分区字段值把数据放入不同的分区目录中  ，分桶是把原始数据按照hash值除以桶的数量取余数放入对应的桶文件中<br>      分区可以使用静态分区和动态分区<br>              静态分区是手动指定分区值<br>              动态分区是hive自动按照分区字段的值(按照相同的值进行分区)进行分区<br>      分桶是按照分桶列的值hash 随机进行分区</p><p>分区是非随机的 有规律的   分桶是随机的</p><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>分区分桶越多，在查询时越快捷和方便，但是每分区和分桶一次就会产生大量的元数据，会增大namenode的压力，索引是为了减少namenode的压力，创建好的索引文件来存放位置信息，索引文件是有序的，存放在本地的mysql</p><p>索引文件可以有多个，（多种表达形式）</p><pre class="line-numbers language-none"><code class="language-none">//创建索引文件create index index_name on table table_name(id)//创建索引文件 索引名称 表名称 as"org.apache.hadoop.hive.ql.index.compact.CompactIndexHandler"//工具类，生成文件，排序，记录相关位置with deferred rebuild;//先不建立索引;在这里没有建立索引，等数据过来之后建立//真正创建索引文件alter index index_name on table_name rebuild;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>索引文件的名称</p><p><img src="/2021/01/16/cdh/hive/hive/1568202672470.png" alt="1568202672470"></p><p>表及文件，可以使用sql语句来查看文件</p><p>id——位置——偏移量</p><p><img src="/2021/01/16/cdh/hive/hive/1568202741562.png" alt="1568202741562"></p><h4 id="hive中的复杂数据类型"><a href="#hive中的复杂数据类型" class="headerlink" title="hive中的复杂数据类型"></a>hive中的复杂数据类型</h4><h5 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h5><pre class="line-numbers language-none"><code class="language-none">create table ma(id int,name string,array array)row format delimited fields terminated by " ";collection items terminated by ",";//在创建表时除了指定表自身的分隔符还要制定array数据的分隔符数据例：1 zhangsan a,b,c,d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><pre class="line-numbers language-none"><code class="language-none">create table ma(id int,name string,favi map&lt;string,string&gt;)row format delimited fields terminated by " "collection items terminated by ","map keys terminated by ":";//表自身的分隔符，map kv对的分隔符，kv之间的分隔符数据例：1 zhangsan a:b,c:d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h5><pre class="line-numbers language-none"><code class="language-none">create table tt(id int,name string,address struct&lt;province:string,city:string,xian:string&gt;)row format delimited fields terminated by " " collection items terminated by ",";//struct类似于数组，但是key是在建表时在struct中指定好的数据例：1 zhangsan a,b,c,d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/01/16/cdh/hive/hive/1568203440357.png" alt="1568203440357"></p><h4 id="炸裂函数"><a href="#炸裂函数" class="headerlink" title="炸裂函数"></a>炸裂函数</h4><h4 id="HIVE函数-八种"><a href="#HIVE函数-八种" class="headerlink" title="HIVE函数(八种)"></a>HIVE函数(八种)</h4><p> <a href="https://www.cnblogs.com/MOBIN/p/5618747.html">https://www.cnblogs.com/MOBIN/p/5618747.html</a></p><h5 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h5><pre class="line-numbers language-none"><code class="language-none">round(DOUBLE a)  返回对a四舍五入的bigint值round(Double a,int d)  返回double型d的保留n位小数的double值floor(Double)  向下取整，返回bigintceil(double a)  给其不greatest(T v1, T v2,...) 求最大值least(T v1, T v2,...)  求最小值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="集合函数"><a href="#集合函数" class="headerlink" title="集合函数"></a>集合函数</h5><pre class="line-numbers language-none"><code class="language-none">size(Map&lt;k.v&gt;)  求map的长度size(Array&lt;T&gt;)  求数组的长度map_keys(Map&lt;k.v&gt;)返回map中的所有keymap_values(Map&lt;k.v&gt;)返回map中所有的valuearray_contains(Array&lt;T&gt;,value)  该数组array&lt;T&gt;包含value返回true，否则返回flasesort_array(Array&lt;T&gt;)  按照自然顺序对数组进行排序并返回<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h5><pre class="line-numbers language-none"><code class="language-none">binary(string|binary) 将输入的值转换成二进制cast(expr as &lt;type&gt;)将expr转换成type类型 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="日期函数-1"><a href="#日期函数-1" class="headerlink" title="日期函数"></a>日期函数</h5><pre class="line-numbers language-none"><code class="language-none">from_unixtime(bigint unixtime[,string format])可以将时间戳格式化成format格式，format可为“yyyy-MM-dd hh:mm:ss”,“yyyy-MM-dd hh”,“yyyy-MM-dd hh:mm”等等）如from_unixtime(1250111000,"yyyy-MM-dd") 得到2009-03-12unix_timestamp(String date) 将'yyyy-MM-dd HH:mm:ss'格式时间字符转化成bigint时间戳to_date(string timestamp)   返回时间字符串的日期部分(string类型)year(string date)   返回时间字符串的年份部分mouth(string date)返回时间字符串的月份部分day(string date)返回时间字符串的天hour(string date)返回时间字符串的小时minute(string date)返回时间字符串的分钟second(string date)返回时间字符串的秒current_date  返回当前时间date类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="条件函数"><a href="#条件函数" class="headerlink" title="条件函数"></a>条件函数</h5><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">if</span><span class="token punctuation">(</span>boolean testcondition<span class="token punctuation">,</span>T valueTrue<span class="token punctuation">,</span>T valueFalseOrNull<span class="token punctuation">)</span>   <span class="token comment">//如果testCondition为ture返回valueTrue，false返回valueFalseOrNull</span>nvl<span class="token punctuation">(</span>T value<span class="token punctuation">,</span>T defalut_value<span class="token punctuation">)</span><span class="token comment">//如果value值为null返回defalut_value，否则返回value</span><span class="token comment">//一般case语句使用以下两种形式</span>CASE a WHEN b THEN c <span class="token punctuation">[</span>WHEN d THEN e<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">[</span>ELSE f<span class="token punctuation">]</span> ENDCASE WHEN a THEN b <span class="token punctuation">[</span>WHEN c THEN d<span class="token punctuation">]</span><span class="token operator">*</span> <span class="token punctuation">[</span>ELSE e<span class="token punctuation">]</span> END<span class="token comment">//When a = b, returns c; when a = d, returns e; else returns f.</span><span class="token comment">//如果a=b就返回c,a=d就返回e，否则返回f  </span><span class="token comment">//如CASE 4 WHEN 5  THEN 5 WHEN 4 THEN 4 ELSE 3 END 将返回4</span>isnull<span class="token punctuation">(</span>a<span class="token punctuation">)</span>如果a为<span class="token keyword">null</span>就返回<span class="token boolean">true</span>，否则返回<span class="token boolean">false</span>isnotnull<span class="token punctuation">(</span>a<span class="token punctuation">)</span>如果a时非<span class="token keyword">null</span>返回tuue，否则返回<span class="token boolean">false</span><span class="token comment">//非空查找函数</span>coalesce<span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">,</span>s3<span class="token punctuation">,</span>s4<span class="token punctuation">,</span>s5<span class="token punctuation">,</span>s6<span class="token punctuation">)</span><span class="token comment">//说明:  返回参数中的第一个非空值；如果所有值都为NULL，那么返回NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h5><pre class="line-numbers language-none"><code class="language-none">length(string A)  返回字符串的长度reverse(string A)反转字符串rtrim(string A)去掉字符串后面出现空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h5><pre class="line-numbers language-none"><code class="language-none">count(*)   总计sum(col)指定列的和avg(col)指定列的平均值min(col)指定列的最小值max(col)指定列的最大值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="表生成函数"><a href="#表生成函数" class="headerlink" title="表生成函数"></a>表生成函数</h5><pre class="line-numbers language-none"><code class="language-none">不常用 没有写，在需要时查看连接 https://www.cnblogs.com/MOBIN/p/5618747.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><pre class="line-numbers language-none"><code class="language-none">//数字函数pomd()//取模，求余数rount()//四舍五入floor()//向下取整coli()//先上取整//集合函数size(array/map)//长度大小  select size(score) from tt;map_keysselect explode(map_keys(字段名)) from tablename;//显示所有的keymap_valuesselect explode(map_values(字段名)) from tablename;//显示所有的value值sort_array对查询的结果进行排序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数黄金组合"><a href="#函数黄金组合" class="headerlink" title="函数黄金组合"></a>函数黄金组合</h4><h5 id="sum-if"><a href="#sum-if" class="headerlink" title="sum(if)"></a>sum(if)</h5><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><h5 id="自定义函数的类型"><a href="#自定义函数的类型" class="headerlink" title="自定义函数的类型"></a>自定义函数的类型</h5><p>UDF：进一出一  eg:trim(string A)  给定一个字符串  trim去除两边的空格  掌握<br>UDAF：进多出一  eg:sum()  对一列值求和   熟悉<br>UDTF：进一出多  了解</p><h5 id="UDF的编写过程"><a href="#UDF的编写过程" class="headerlink" title="UDF的编写过程"></a>UDF的编写过程</h5><ol><li><p>新建java项目添加<strong>hive-exec-2.1.0.jar</strong>和<strong>hadoop-common-2.7.3.jar</strong></p></li><li><p>编写自定义类继承<strong>UDF</strong>类</p></li><li><p>编写方法evaluate （方法的参数就是自定义函数的进一数据的类型）</p></li><li><p>把编写的类打成jar包</p></li><li><p>hive中注册jar包</p><pre class="line-numbers language-none"><code class="language-none">hive&gt; add jar /home/hadoop/xxx.jar;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre><code>CREATE TEMPORARY FUNCTION xxx AS '描述名';<pre class="line-numbers language-none"><code class="language-none">##### UDTF的编写过程继承org.apache.hadoop.hive.ql.udf.generic.GenericUDTF,实现initialize, process, close三个方法。UDTF首先会调用initialize方法，此方法返回UDTF的返回行的信息（返回个数，名称和类型）。初始化完成后，会调用process方法,真正的处理过程在process函数中，在process中，每一次forward()调用产生一行；如果产生多列可以将多个列的值放在一个数组中，然后将该数组传入到forward()函数。最后close()方法调用，对需要清理的方法进行清理。把编写的类打成jar包hive中注册jar包把列转成行就是把array，map这种数据集合分散开来成为单个数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>select explode(字段名称) from 表名;//填写字段名称，字段的类型是array或map数据类型的//但是select不能加explode以外的任何显示内容<pre class="line-numbers language-none"><code class="language-none">![1568204725217](Hive/1568204725217.png)###### ！爆炸函数的局限性在使用爆炸函数的时候，select后面只能跟爆炸函数，其他的不能跟![1568205862236](Hive/1568205862236.png)###### lateral view  斜写视图，为了解决爆炸函数的局限性使用测写视图的方式，在求出爆炸函数结果的同时，求出除了爆炸函数字段之外的字段。需要添加爆炸之后的表名，和爆炸之后的字段名，这个字段名可以放置于select之后，查询爆炸之后的字段值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>select name,category_infofrom movie_infolateral view explode(category) tmp_tbl as category_info;//explode是自定义UDTF//解决了爆炸函数的局限性，在需要爆炸之后的字段，把字段放置到爆炸之后，然后在前面调用，这里category_info就是如此select * from sdk_logtable lateral view flat_analizer(ops) temp_sdk as event_name,event_json;//flat_analizer是自定义UDTF//as 根据udtf出来的值，定义几个别名<pre class="line-numbers language-none"><code class="language-none">#### #### 窗口函数 https://blog.csdn.net/czr11616/article/details/101645693 over()子句理解为开窗子句，打开一个窗口，窗口内包含多条记录,over()会给每一行开一个窗口。 在使用over()子句进行查询的时候， 不仅可以查询到每条记录的信息，还可以查询到这条记录对应窗口内的所有记录的聚合信息，**所以我们通常结合聚合函数和over()子句一起使用**。 **在SQL处理中，窗口函数都是最后一步执行，而且仅位于Order by字句之前。**##### over()默认over()默认什么都不写，是从第一行道最后一行的窗口，并统计窗口内所有记录的列值的和##### order byover()子句中接order by over(order by date)默认的开窗范围是排序后的date，第一行到当前行##### partition byover()接partition by Partition By子句也可以称为查询分区子句，**非常类似于Group By**，都是将数据按照边界值分组，而Over之前的函数在每一个分组之内进行，如果超出了分组，则函数会重新计算.默认的开窗范围是当前行所在分组的所有记录,写了partition by不用写group by<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>select name,orderdate,cost,sum(cost) over(partition by month(orderdate))from t_window<pre class="line-numbers language-none"><code class="language-none">##### partition by + order by 先分组，再排序，即组内排序每一行的开窗范围是当前行所在分组的第一行到当前行#### 分析函数 https://www.cnblogs.com/skyEva/p/5730531.html ##### NtileNtile是hive很强大的一个分析函数它把有序的数据集合平均分配到指定数量个桶中，将桶号分配给每一行。如果不能平均分配，则优先分配较小编号的桶，并且各个桶中能放的行数最多相差1。 ```sql-- 把用户和消费表，按消费下降顺序平均分成2份drop table if exists test_by_payment_ntile;create table test_by_payment_ntile asselect       nick,       payment ,      NTILE(2) OVER(ORDER BY payment desc) AS rn from test_nick_payment;-- 分别对每一份计算平均值，就可以得到消费靠前50%和后50%的平均消费select    'avg_payment' as inf,   t1.avg_payment_up_50 as avg_payment_up_50,   t2.avg_payment_down_50 as avg_payment_down_50from (select         avg(payment) as avg_payment_up_50   from test_by_payment_ntile   where rn=1)t1   join(select           avg(payment) as avg_payment_down_50  from test_by_payment_ntile  where rn=2)t2on (t1.dp_id=t2.dp_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>##### Rank() over()</code></pre></li></ol><p>相同的值会输出相同的序号，不间断(1、2、3、3、5)</p><h5 id="Dense-Rank-over"><a href="#Dense-Rank-over" class="headerlink" title="Dense_Rank() over()"></a>Dense_Rank() over()</h5><p>相同的值会输出相同的序号，间断(1、2、3、3、4)</p><h5 id="Row-Number-over"><a href="#Row-Number-over" class="headerlink" title="Row_Number() over()"></a>Row_Number() over()</h5><p>在使用 row_number() over()函数时候，over()里头的分组以及排序的执行晚于 where group by  order by 的执行。</p><p>相同的值会输出不同的序号，唯一不可重复（1、2、3、4、5）</p><pre class="line-numbers language-none"><code class="language-none">row_number  给行加上编号row_number() over (partition by 字段a order by 字段b desc) rank//partition by分区//order by 排序 （！可以和分区的字段不同！）//rank 是排序的别名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例子：</strong></p><pre class="line-numbers language-none"><code class="language-none">select    class1,   score,   rank() over(partition by class1 order by score desc) rk1,   dense_rank() over(partition by class1 order by score desc) rk2,   row_number() over(partition by class1 order by score desc) rk3from zyy_test1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">//可以用于先分组之后对分组后的内容进行排序select t1.name,t2.salary-t1.salary from(select row_number() over(partition by name order by salary desc)rn,* from carry1) t1,(select row_number() over(partition by name order by salary desc)rn,* from carry1) t2where t1.rn=t2.rn+1 and t1.name=t2.name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果：</strong></p><img src="https://images2015.cnblogs.com/blog/548357/201608/548357-20160812172352046-1842997041.png" alt="img" style="zoom:100%;"> <h3 id="Hive数据倾斜"><a href="#Hive数据倾斜" class="headerlink" title="Hive数据倾斜"></a>Hive数据倾斜</h3><p><a href="https://blog.csdn.net/zuochang_liu/article/details/105274316">https://blog.csdn.net/zuochang_liu/article/details/105274316</a></p><p>1、join使用map join</p><p>2、去重使用group by 不使用distinct（sum() group by替换 count distinct    完成计算）</p><p>3、如果是大量空值进行计算导致reduce处理慢，可以在join时过滤掉null数据,或者在空值设置前缀来分发到各个reduce</p><p>4、开启数据倾斜负载均衡</p><p>就是先随机分发并处理，再按照 key group by 来分发处理。</p><p>操作：当选项设定为 true，生成的查询计划会有两个 MRJob。</p><p>第一个 MRJob 中，Map 的输出结果集合会随机分布到 Reduce 中，每个 Reduce 做部分</p><p>聚合操作，并输出结果，这样处理的结果是相同的 GroupBy Key 有可能被分发到不同的</p><p>Reduce 中，从而达到负载均衡的目的；</p><p>第二个 MRJob 再根据预处理的数据结果按照 GroupBy Key 分布到 Reduce 中（这个过</p><p>程可以保证相同的原始 GroupBy Key 被分布到同一个 Reduce 中），最后完成最终的聚合操作。</p><p>点评：它使计算变成了两个 mapreduce，先在第一个中在 shuffle 过程 partition 时随机</p><p>给 key 打标记，使每个 key 随机均匀分布到各个 reduce 上计算，但是这样只能完成部分计算，因为相同 key 没有分配到相同 reduce 上。</p><p>所以需要第二次的 mapreduce,这次就回归正常 shuffle,但是数据分布不均匀的问题在第一次 mapreduce 已经有了很大的改善，因此基本解决数据倾斜。因为大量计算已经在第一次</p><p>mr 中随机分布到各个节点完成。</p><p>5、不同数据类型关联产生数据倾斜</p><p><a href="https://blog.csdn.net/zuochang_liu/article/details/105274316">https://blog.csdn.net/zuochang_liu/article/details/105274316</a></p><p>情形：比如用户表中 user_id 字段为 int，log 表中 user_id 字段既有 string 类型也有 int 类型。当按照 user_id 进行两个表的 Join 操作时。</p><p>后果：处理此特殊值的 reduce 耗时；只有一个 reduce 任务</p><p>默认的 Hash 操作会按 int 型的 id 来进行分配，这样会导致所有 string 类型 id 的记录都分配</p><p>到一个 Reducer 中。</p><h3 id="hive性能优化常用的方法"><a href="#hive性能优化常用的方法" class="headerlink" title="hive性能优化常用的方法"></a>hive性能优化常用的方法</h3><p>1）MapJoin</p><p>如果不指定 MapJoin 或者不符合 MapJoin 的条件，那么 Hive 解析器会将 Join 操作转换</p><p>成 Common Join，即：在 Reduce 阶段完成 join。容易发生数据倾斜。可以用 MapJoin 把小</p><p>表全部加载到内存在 map 端进行 join，避免 reducer 处理。</p><p>2）行列过滤</p><p>列处理：在 SELECT 中，只拿需要的列，如果有，尽量使用分区过滤，少用 SELECT *。</p><p>行处理：在分区剪裁中，当使用外关联时，如果将副表的过滤条件写在 Where 后面，那</p><p>么就会先全表关联，之后再过滤。</p><p>3）列式存储</p><p>4）采用分区技术</p><p>5）合理设置 Map 数</p><p>（1）通常情况下，作业会通过 input 的目录产生一个或者多个 map 任务。</p><p>主要的决定因素有：input 的文件总个数，input 的文件大小，集群设置的文件块大小。</p><p>（2）是不是 map 数越多越好？</p><p>答案是否定的。如果一个任务有很多小文件（远远小于块大小 128m），则每个小文件</p><p>也会被当做一个块，用一个 map 任务来完成，而一个 map 任务启动和初始化的时间远远大</p><p>于逻辑处理的时间，就会造成很大的资源浪费。而且，同时可执行的 map 数是受限的。</p><p>（3）是不是保证每个 map 处理接近 128m 的文件块，就高枕无忧了？</p><p>答案也是不一定。比如有一个 127m 的文件，正常会用一个 map 去完成，但这个文件只</p><p>有一个或者两个小字段，却有几千万的记录，如果 map 处理的逻辑比较复杂，用一个 map</p><p>任务去做，肯定也比较耗时。</p><p>针对上面的问题 2 和 3，我们需要采取两种方式来解决：即减少 map 数和增加 map 数；</p><p>6）小文件进行合并</p><p>在 Map 执行前合并小文件，减少 Map 数：CombineHiveInputFormat 具有对小文件进行</p><p>合并的功能（系统默认的格式）。HiveInputFormat 没有对小文件合并功能。</p><p>7）合理设置 Reduce 数</p><p>Reduce 个数并不是越多越好</p><p>（1）过多的启动和初始化 Reduce 也会消耗时间和资源；</p><p>（2）另外，有多少个 Reduce，就会有多少个输出文件，如果生成了很多个小文件，那</p><p>么如果这些小文件作为下一个任务的输入，则也会出现小文件过多的问题；</p><p>在设置 Reduce 个数的时候也需要考虑这两个原则：处理大数据量利用合适的 Reduce</p><p>数；使单个 Reduce 任务处理数据量大小要合适；</p><p>8）常用参数</p><p>// 输出合并小文件</p><p>SET hive.merge.mapfiles = true; – 默认 true，在 map-only 任务结束时合并</p><p>小文件</p><p>SET hive.merge.mapredfiles = true; – 默认 false，在 map-reduce 任务结</p><p>束时合并小文件</p><p>SET hive.merge.size.per.task = 268435456; – 默认 256M</p><p>SET hive.merge.smallfiles.avgsize = 16777216; – 当输出文件的平均大小</p><p>小于 16m 该值时，启动一个独立的 map-reduce 任务进行文件 merge</p><p>9）开启 map 端 combiner（不影响最终业务逻辑）</p><p>set hive.map.aggr=true；</p><p>10）压缩（选择快的）</p><p>设置 map 端输出、中间结果压缩。（不完全是解决数据倾斜的问题，但是减少了 IO 读</p><p>写和网络传输，能提高很多效率）</p><p>11）开启 JVM 重用<br>————————————————<br>版权声明：本文为CSDN博主「大数据私房菜」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/zuochang_liu/article/details/105274316">https://blog.csdn.net/zuochang_liu/article/details/105274316</a></p>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS Gateway 报错： Failed to delete file or dir [/tmp/.hdfs-nfs]： it still exists</title>
      <link href="2020/11/12/cdh/hdfs-gateway-bao-cuo-failed-to-delete-file-or-dir-tmp.hdfs-nfs-it-still-exists/"/>
      <url>2020/11/12/cdh/hdfs-gateway-bao-cuo-failed-to-delete-file-or-dir-tmp.hdfs-nfs-it-still-exists/</url>
      
        <content type="html"><![CDATA[<p>tmp没有权限，所有Gateway节点都弄</p><pre class="line-numbers language-none"><code class="language-none">chmod 777 /tmp <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启Hdfs</p><p>原来的权限是</p><pre class="line-numbers language-none"><code class="language-none">drwxrwxrwt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是只允许root用户来操作的目录<br>执行完后  权限会改成</p><pre class="line-numbers language-none"><code class="language-none">drwxrwxrw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>变成了所有用户可以操作的目录</p>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDH5.16.2安装Kafka4.1.0</title>
      <link href="2020/11/12/cdh/kafka/cdh5.16.2-an-zhuang-kafka4.1.0/"/>
      <url>2020/11/12/cdh/kafka/cdh5.16.2-an-zhuang-kafka4.1.0/</url>
      
        <content type="html"><![CDATA[<p>安装Kafka，需要下载Parcel包</p><p>Kafka.parcel下载地址：<a href="http://archive.cloudera.com/kafka/parcels/4.1.0/">http://archive.cloudera.com/kafka/parcels/4.1.0/</a></p><p><img src="https://img-blog.csdnimg.cn/20201112092356320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>将下面的三个文件上传到/opt/cloudera/parcel-repo目录下</p><p><img src="https://img-blog.csdnimg.cn/2020111209344464.png#pic_center" alt="在这里插入图片描述"><br>把sha1改成sha</p><p>在7180页面进行解压和激活Kafka服务</p>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
            <tag> CDH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDH5.16.2安装Spark2.4</title>
      <link href="2020/11/12/cdh/spark/cdh5.16.2-an-zhuang-spark2.4/"/>
      <url>2020/11/12/cdh/spark/cdh5.16.2-an-zhuang-spark2.4/</url>
      
        <content type="html"><![CDATA[<p>安装了好几次才成功，做做笔记<br>CDH安装时，用的离线安装，下载parcel包进行操作<br><img src="https://img-blog.csdnimg.cn/20201112085329647.png#pic_center" alt="在这里插入图片描述"><br>上面的这四个都得下载下来，manifest.json和parcel的可以在一起下载</p><p>Spark2.4.0下载地址：<a href="https://archive.cloudera.com/spark2/parcels/2.4.0.cloudera2/">https://archive.cloudera.com/spark2/parcels/2.4.0.cloudera2/</a><br><img src="https://img-blog.csdnimg.cn/20201112085711967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>Yarn的下载地址：<a href="http://archive.cloudera.com/spark2/csd/">http://archive.cloudera.com/spark2/csd/</a><br><img src="https://img-blog.csdnimg.cn/20201112085835980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>选择对应版本的进行下载<br>下载完毕进行上传</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>将下面的三个文件上传到<code>/opt/cloudera/parcel-repo</code>目录下<br><img src="https://img-blog.csdnimg.cn/20201112090025357.png#pic_center" alt="在这里插入图片描述"><br>将.parcel.sha1改成.parcel.sha</p><pre class="line-numbers language-none"><code class="language-none">mv SPARK2-2.4.0.cloudera2-1.cdh5.13.3.p0.1041012-el7.parcel.sha1 SPARK2-2.4.0.cloudera2-1.cdh5.13.3.p0.1041012-el7.parcel.sha<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将下面的jar包上传到/opt/cloudera/csd目录下<br><img src="https://img-blog.csdnimg.cn/20201112090443374.png#pic_center" alt="在这里插入图片描述"><br>打开7180监控页面，点击右上角<br><img src="https://img-blog.csdnimg.cn/20201112090916437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击检查新的Parcel，出来Spark2，然后进行分配，分配完成后再点一下进行激活，这是单独的两个步骤<br><img src="https://img-blog.csdnimg.cn/20201112091106611.png#pic_center" alt="选择Spark2，"><br><img src="https://img-blog.csdnimg.cn/2020111209133729.png#pic_center" alt="在这里插入图片描述"></p><p>激活成功之后，进行Spark的安装<br><img src="https://img-blog.csdnimg.cn/20201112091409833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201112091437667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>安装完就好了</p>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canal配置方式发送数据到Kafka</title>
      <link href="2020/11/10/canal/canal1.1.4-shu-ju-zhi-jie-fa-song-kafka-topic/"/>
      <url>2020/11/10/canal/canal1.1.4-shu-ju-zhi-jie-fa-song-kafka-topic/</url>
      
        <content type="html"><![CDATA[<h1 id="Canal修改配置文件"><a href="#Canal修改配置文件" class="headerlink" title="Canal修改配置文件"></a>Canal修改配置文件</h1><p>在原有Canal已经启动运行成功的情况下，</p><p>停掉服务，找到这个配置文件中对应项进行修改：</p><h2 id="第一个配置文件"><a href="#第一个配置文件" class="headerlink" title="第一个配置文件"></a>第一个配置文件</h2><blockquote><p>vim  /opt/canal/conf/canal.properties</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># 配置zkcanal.zkServers = hadoop1:2181,hadoop2:2181,hadoop3:2181# 设置成rowcanal.instance.binlog.format = ROW# 可选项: tcp(默认), kafka, RocketMQcanal.serverMode = kafka# 填写你的kafka地址和端口，可以不用都写canal.mq.servers = hadoop1:9092,hadoop2:9092,hadoop3:9092# 配置你的mysql地址，数据库的名称不用改，它默认全是这个名字，刚开始改名了，后来嫌麻烦改回来了# 涉及到配置账号密码的都设置好别漏掉一个canal.instance.tsdb.url = jdbc:mysql://hadoop1:3306/canal_tsdbcanal.instance.tsdb.dbUsername = canalcanal.instance.tsdb.dbPassword = 123456#这里要配置成mysql的，不变的话链接mysql会报 java.sql.SQLExceptionjava.sql.SQL：driverClass org.h2.Driver# canal.instance.tsdb.spring.xml = classpath:spring/tsdb/h2-tsdb.xml  canal.instance.tsdb.spring.xml = classpath:spring/tsdb/mysql-tsdb.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二个配置文件"><a href="#第二个配置文件" class="headerlink" title="第二个配置文件"></a>第二个配置文件</h2><blockquote><p>vim  /opt/canal/conf/example/instance.properties</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># 配置mysqlcanal.instance.tsdb.url=jdbc:mysql://hadoop1:3306/canal_tsdbcanal.instance.tsdb.dbUsername=canalcanal.instance.tsdb.dbPassword=123456# 配置过滤，可以在这里指定表和库，只获取他们的binlogcanal.instance.filter.regex=.*\\..*# 配置多topic，在这里可以指定你的数据放kafka的哪个topic，还可以自己指定topic的名称，不存在的topic会自动创建canal.mq.dynamicTopic=exercise_topic:exercise\\.user,exercise_topic2:exercise2\\.user2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面配置文件中的特殊参数配置说明可以在下面进行查看</p><p>conf/example/instance.properties配置文件中的<code>canal.instance.filter.regex=</code>  属性：</p><p>mysql 数据解析关注的表，Perl正则表达式.多个正则之间以逗号(,)分隔，转义符需要双斜杠(\)<br>常见例子：</p><ol><li>所有表：.* or .<em>\..</em></li><li>canal schema下所有表： canal\..*</li><li>canal下的以canal打头的表：canal\.canal.*</li><li>canal schema下的一张表：canal.test1</li><li>多个规则组合使用：canal\..*,mysql.test1,mysql.test2 (逗号分隔)<br>注意：此过滤条件只针对row模式的数据有效(ps. mixed/statement因为不解析sql，所以无法准确提取tableName进行过滤)</li></ol><p>conf/example/instance.properties配置文件的<code>canal.mq.dynamicTopic</code> 表达式说明：</p><p><strong>canal 1.1.3</strong>版本之后, 支持配置格式：schema 或 schema.table，多个配置之间使用逗号或分号分隔：</p><ul><li>例子1：test.test 指定匹配的单表，发送到以test_test为名字的topic上</li><li>例子2：... 匹配所有表，则每个表都会发送到各自表名的topic上</li><li>例子3：test 指定匹配对应的库，一个库的所有表都会发送到库名的topic上</li><li>例子4：test.* 指定匹配的表达式，针对匹配的表会发送到各自表名的topic上</li><li>例子5：test,test1.test1，指定多个表达式，会将test库的表都发送到test的topic上，test1.test1的表发送到对应的test1_test1 topic上，其余的表发送到默认的canal.mq.topic值<br>为满足更大的灵活性，允许对匹配条件的规则指定发送的topic名字，配置格式：topicName:schema 或 topicName:schema.table：</li><li>例子1: test:test.test 指定匹配的单表，发送到以test为名字的topic上</li><li>例子2: test:... 匹配所有表，因为有指定topic，则每个表都会发送到test的topic下</li><li>例子3: test:test 指定匹配对应的库，一个库的所有表都会发送到test的topic下</li><li>例子4：testA:test.* 指定匹配的表达式，针对匹配的表会发送到testA的topic下</li><li>例子5：test0:test,test1:test1.test1，指定多个表达式，会将test库的表都发送到test0的topic下，test1.test1的表发送到对应的test1的topic下，其余的表发送到默认的canal.mq.topic值</li></ul><p>conf/example/instance.properties配置文件的<code>canal.mq.partitionHash</code> 表达式说明：<br>canal 1.1.3版本之后, 支持配置格式：schema.table:pk1^pk2，多个配置之间使用逗号分隔：</p><ul><li>例子1：test.test:pk1^pk2 指定匹配的单表，对应的hash字段为pk1 + pk2</li><li>例子2：...:id 正则匹配，指定所有正则匹配的表对应的hash字段为id</li><li>例子3：...:pk 正则匹配，指定所有正则匹配的表对应的hash字段为表主键(自动查找)</li><li>例子4: 匹配规则啥都不写，则默认发到0这个partition上</li><li>例子5：... ，不指定pk信息的正则匹配，将所有正则匹配的表,对应的hash字段为表名。按表hash: 一张表的所有数据可以发到同一个分区，不同表之间会做散列 (会有热点表分区过大问题)</li><li>例子6: test.test:id,...* , 针对test的表按照id散列,其余的表按照table散列</li><li>注意：设置匹配规则，多条匹配规则之间是按照顺序进行匹配(命中一条规则就返回)</li></ul><h2 id="启动Canal"><a href="#启动Canal" class="headerlink" title="启动Canal"></a>启动Canal</h2><p>配置完成，启动canal，然后查看日志</p><pre class="line-numbers language-none"><code class="language-none">tail -10 logs/canal/canal.logtail -10 logs/example/example.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>没有报错信息，启动成功！</p><p>查看kafka的topic列表</p><pre class="line-numbers language-none"><code class="language-none">kafka-topics --list --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有我要的发数据的topic</p><p>打开mysql执行一句delete或者insert<br>再次查看kafka的topics，发现已经生成了topic<br>进行消费数据</p><pre class="line-numbers language-none"><code class="language-none">kafka-console-consumer --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --from-beginning --topic exercise_topic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到消费到了数据<br><img src="https://img-blog.csdnimg.cn/2020111115374725.png#pic_center" alt="在这里插入图片描述"><br>配置好用好这个就不用写canal客户端代码了<br>到这里就完成了，如果有什么没有表述清楚，可以告知，会改。</p><p>下面是我整体的配置文件</p><p>canal.properties  整体配置文件：</p><pre class="line-numbers language-none"><code class="language-none">########################################################## common argument############################################################### tcp bind ipcanal.ip =# register ip to zookeepercanal.register.ip =canal.port = 11111canal.metrics.pull.port = 11112# canal instance user/passwd# canal.user = canal# canal.passwd = E3619321C1A937C46A0D8BD1DAC39F93B27D4458# canal admin config#canal.admin.manager = 127.0.0.1:8089canal.admin.port = 11110canal.admin.user = admincanal.admin.passwd = 4ACFE3202A5FF5CF467898FC58AAB1D615029441canal.zkServers = hadoop1:2181,hadoop2:2181,hadoop3:2181# flush data to zkcanal.zookeeper.flush.period = 1000canal.withoutNetty = false# tcp, kafka, RocketMQ# canal.serverMode = tcpcanal.serverMode = kafka# flush meta cursor/parse position to filecanal.file.data.dir = ${canal.conf.dir}canal.file.flush.period = 1000## memory store RingBuffer size, should be Math.pow(2,n)canal.instance.memory.buffer.size = 16384## memory store RingBuffer used memory unit size , default 1kbcanal.instance.memory.buffer.memunit = 1024 ## meory store gets mode used MEMSIZE or ITEMSIZEcanal.instance.memory.batch.mode = MEMSIZEcanal.instance.memory.rawEntry = true## detecing configcanal.instance.detecting.enable = false#canal.instance.detecting.sql = insert into retl.xdual values(1,now()) on duplicate key update x=now()canal.instance.detecting.sql = select 1canal.instance.detecting.interval.time = 3canal.instance.detecting.retry.threshold = 3canal.instance.detecting.heartbeatHaEnable = false# support maximum transaction size, more than the size of the transaction will be cut into multiple transactions deliverycanal.instance.transaction.size =  1024# mysql fallback connected to new master should fallback timescanal.instance.fallbackIntervalInSeconds = 60# network configcanal.instance.network.receiveBufferSize = 16384canal.instance.network.sendBufferSize = 16384canal.instance.network.soTimeout = 30# binlog filter configcanal.instance.filter.druid.ddl = truecanal.instance.filter.query.dcl = falsecanal.instance.filter.query.dml = falsecanal.instance.filter.query.ddl = falsecanal.instance.filter.table.error = falsecanal.instance.filter.rows = falsecanal.instance.filter.transaction.entry = false# binlog format/image check#canal.instance.binlog.format = ROW,STATEMENT,MIXEDcanal.instance.binlog.format = ROW canal.instance.binlog.image = FULL,MINIMAL,NOBLOB# binlog ddl isolationcanal.instance.get.ddl.isolation = false# parallel parser configcanal.instance.parser.parallel = true## concurrent thread number, default 60% available processors, suggest not to exceed Runtime.getRuntime().availableProcessors()#canal.instance.parser.parallelThreadSize = 16## disruptor ringbuffer size, must be power of 2canal.instance.parser.parallelBufferSize = 256# table meta tsdb infocanal.instance.tsdb.enable = truecanal.instance.tsdb.dir = ${canal.file.data.dir:../conf}/${canal.instance.destination:}canal.instance.tsdb.url = jdbc:h2:${canal.instance.tsdb.dir}/h2;CACHE_SIZE=1000;MODE=MYSQL;canal.instance.tsdb.dbUsername = canalcanal.instance.tsdb.dbPassword = 123456# dump snapshot interval, default 24 hourcanal.instance.tsdb.snapshot.interval = 24# purge snapshot expire , default 360 hour(15 days)canal.instance.tsdb.snapshot.expire = 360# aliyun ak/sk , support rds/mqcanal.aliyun.accessKey =canal.aliyun.secretKey =########################################################## destinations##############################################################canal.destinations = example# conf root dircanal.conf.dir = ../conf# auto scan instance dir add/remove and start/stop instancecanal.auto.scan = truecanal.auto.scan.interval = 5#canal.instance.tsdb.spring.xml = classpath:spring/tsdb/h2-tsdb.xmlcanal.instance.tsdb.spring.xml = classpath:spring/tsdb/mysql-tsdb.xmlcanal.instance.global.mode = springcanal.instance.global.lazy = falsecanal.instance.global.manager.address = ${canal.admin.manager}#canal.instance.global.spring.xml = classpath:spring/memory-instance.xmlcanal.instance.global.spring.xml = classpath:spring/file-instance.xml#canal.instance.global.spring.xml = classpath:spring/default-instance.xml###########################################################      MQ      ###############################################################canal.mq.servers = hadoop1:9092,hadoop2:9092,hadoop3:9092canal.mq.retries = 2canal.mq.batchSize = 16384canal.mq.maxRequestSize = 1048576canal.mq.lingerMs = 100canal.mq.bufferMemory = 33554432canal.mq.canalBatchSize = 50canal.mq.canalGetTimeout = 100canal.mq.flatMessage = truecanal.mq.compressionType = nonecanal.mq.acks = all#canal.mq.properties. =canal.mq.producerGroup = test# Set this value to "cloud", if you want open message trace feature in aliyun.canal.mq.accessChannel = local# aliyun mq namespace#canal.mq.namespace =###########################################################     Kafka Kerberos Info    ###############################################################canal.mq.kafka.kerberos.enable = falsecanal.mq.kafka.kerberos.krb5FilePath = "../conf/kerberos/krb5.conf"canal.mq.kafka.kerberos.jaasFilePath = "../conf/kerberos/jaas.conf"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>instance.properties  整体配置文件：</p><pre class="line-numbers language-none"><code class="language-none">################################################### mysql serverId , v1.0.26+ will autoGen# canal.instance.mysql.slaveId=0# enable gtid use true/falsecanal.instance.gtidon=false# position infocanal.instance.master.address=hadoop1:3306canal.instance.master.journal.name=canal.instance.master.position=canal.instance.master.timestamp=canal.instance.master.gtid=# rds oss binlogcanal.instance.rds.accesskey=canal.instance.rds.secretkey=canal.instance.rds.instanceId=# table meta tsdb infocanal.instance.tsdb.enable=true#canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/canal_tsdb#canal.instance.tsdb.dbUsername=canal#canal.instance.tsdb.dbPassword=canalcanal.instance.tsdb.url=jdbc:mysql://hadoop1:3306/canal_tsdbcanal.instance.tsdb.dbUsername=canalcanal.instance.tsdb.dbPassword=123456#canal.instance.standby.address =#canal.instance.standby.journal.name =#canal.instance.standby.position =#canal.instance.standby.timestamp =#canal.instance.standby.gtid=# username/passwordcanal.instance.dbUsername=canalcanal.instance.dbPassword=123456canal.instance.connectionCharset = UTF-8# enable druid Decrypt database passwordcanal.instance.enableDruid=false#canal.instance.pwdPublicKey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALK4BUxdDltRRE5/zXpVEVPUgunvscYFtEip3pmLlhrWpacX7y7GCMo2/JM6LeHmiiNdH1FWgGCpUfircSwlWKUCAwEAAQ==# table regex#canal.instance.filter.regex=.*\\..*canal.instance.filter.regex=exercise.user# table black regexcanal.instance.filter.black.regex=# table field filter(format: schema1.tableName1:field1/field2,schema2.tableName2:field1/field2)#canal.instance.filter.field=test1.t_product:id/subject/keywords,test2.t_company:id/name/contact/ch# mq configcanal.mq.topic=example# dynamic topic route by schema or table regex#canal.mq.dynamicTopic=mytest1.user,mytest2\\..*,.*\\..*canal.mq.partition=0# hash partition config#canal.mq.partitionsNum=3#canal.mq.partitionHash=test.table:id^name,.*\\..*#################################################<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Canal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canal </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CM报错：Unable to build ntityManagerFactory</title>
      <link href="2020/11/10/cdh/cm-bao-cuo/"/>
      <url>2020/11/10/cdh/cm-bao-cuo/</url>
      
        <content type="html"><![CDATA[<p>今天CDH突然报错，先重启了一下CM，然后在重试，结果还是不行，WebUI打不开</p><p>报错内容</p><pre class="line-numbers language-none"><code class="language-none">2020-11-10 13:32:36,827 ERROR 100851968@scm-web-6023:org.mortbay.log: /cmf/j_spring_security_checkjava.lang.RuntimeException: javax.persistence.PersistenceException: org.hibernate.exception.GenericJDBCException: Could not open connectionorg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.cloudera.server.cmf.TrialState': Cannot resolve reference to bean 'entityManagerFactoryBean' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactoryBean': FactoryBean threw exception on object creation; nested exception is javax.persistence.PersistenceException: [PersistenceUnit: cmf.server] Unable to build EntityManagerFactory........<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在网上查了没查出什么结果</p><p>就把agent和server的日志都看了看，就是连接不上Mysql数据库，而且权限都配置好了<br>然后发现了一篇博客</p><blockquote><p><a href="https://www.cnblogs.com/zlslch/p/7266101.html">https://www.cnblogs.com/zlslch/p/7266101.html</a></p></blockquote><p>参考里面的一部分，浏览了里面提到的cm-5.16.2/etc/cloudera-scm-server/db.properties,…..等文件之后，发现里面存在的是CM连接数据库的配置信息<br>这些信息是之前用过的(初始化了多次数据库)，把这些我改成了我现在的用户和密码后，重启CM</p><pre class="line-numbers language-none"><code class="language-none">/opt/cm-5.16.2/etc/init.d/cloudera-scm-agent restart/opt/cm-5.16.2/etc/init.d/cloudera-scm-server restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次 浏览器连接 7180  进行查看，成功</p>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7下Canal1.1.4安装</title>
      <link href="2020/11/10/canal/centos7-xia-canal1.1.4-de-an-zhuang/"/>
      <url>2020/11/10/canal/centos7-xia-canal1.1.4-de-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Canal是什么？"><a href="#Canal是什么？" class="headerlink" title="Canal是什么？"></a>Canal是什么？</h1><p>canal [kə’næl]，译意为水道/管道/沟渠，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费<br><img src="https://img-blog.csdnimg.cn/20201110125412686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>工作原理</strong></p><p>canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送 dump 协议<br>MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )<br>canal 解析 binary log 对象(原始为 byte 流)</p><h2 id="安装前的准备-配置Mysql"><a href="#安装前的准备-配置Mysql" class="headerlink" title="安装前的准备 配置Mysql"></a>安装前的准备 配置Mysql</h2><p>Canal是模仿mysql的slave，需要读取mysql的binlog文件，Mysql默认是没有开启binlog的，要先开启日志</p><p>vim /etc/my.cnf</p><pre class="line-numbers language-none"><code class="language-none">[mysqld]log-bin=mysql-bin # 开启 binlogbinlog-format=ROW # 选择 ROW 模式server_id=1 # 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置完成后</p><p>查看binlog的状态</p><pre class="line-numbers language-none"><code class="language-none">show VARIABLES like 'log_bin'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201110132056354.png#pic_center" alt="在这里插入图片描述"></p><p>//查看binlog日志</p><pre class="line-numbers language-none"><code class="language-none">show binary logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201110132112497.png#pic_center" alt="在这里插入图片描述"></p><p>//查看master状态</p><pre class="line-numbers language-none"><code class="language-none">show master status ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201110132122230.png#pic_center" alt="在这里插入图片描述"><br>注意：针对阿里云 RDS for MySQL , 默认打开了 binlog , 并且账号默认具有 binlog dump 权限 , 不需要任何权限或者 binlog 设置,可以直接跳过这一步</p><h2 id="Mysql-binlog的三种格式"><a href="#Mysql-binlog的三种格式" class="headerlink" title="Mysql  binlog的三种格式"></a>Mysql  binlog的三种格式</h2><p>1） statement<br>语句级，binlog会记录每次一执行写操作的语句。<br>相对row模式节省空间，但是可能产生不一致性，比如<br>update tt set create_date=now()<br>如果用binlog日志进行恢复，由于执行时间不同可能产生的数据就不同。<br>优点： 节省空间<br>缺点： 有可能造成数据不一致。<br>2） row<br>行级， binlog会记录每次操作后每行记录的变化。<br>优点：保持数据的绝对一致性。因为不管sql是什么，引用了什么函数，他只记录执行后的效果。<br>缺点：占用较大空间。</p><p>3） mixed<br>statement的升级版，一定程度上解决了，因为一些情况而造成的statement模式不一致问题<br>在某些情况下譬如：<br>当函数中包含 UUID() 时；<br>包含 AUTO_INCREMENT 字段的表被更新时；<br>执行 INSERT DELAYED 语句时；<br>用 UDF 时；<br>会按照 ROW的方式进行处理<br>优点：节省空间，同时兼顾了一定的一致性。<br>缺点：还有些极个别情况依旧会造成不一致，另外statement和mixed对于需要对binlog的监控的情况都不方便。</p><h2 id="重启你的Mysql服务"><a href="#重启你的Mysql服务" class="headerlink" title="重启你的Mysql服务"></a>重启你的Mysql服务</h2><pre class="line-numbers language-none"><code class="language-none">service mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="进入你的mysql，添加canal使用的用户"><a href="#进入你的mysql，添加canal使用的用户" class="headerlink" title="进入你的mysql，添加canal使用的用户"></a>进入你的mysql，添加canal使用的用户</h2><pre class="line-numbers language-none"><code class="language-none">use mysql;在mysql创建一个用户create user 'canal'@'%' identified by '123456';修改密码update user set authentication_string=password("123456") where user="canal";对用户进行授权grant all privileges on *.* to 'canal'@'localhost' identified by '123456' with grant option;GRANT ALL PRIVILEGES ON *.* TO 'canal'@'%' IDENTIFIED BY '123456';刷新权限FLUSH PRIVILEGES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加完毕后，测试是否可以正常连接，如果不测试的话，到时候canal报错还得看日志</p><h2 id="下载Canal"><a href="#下载Canal" class="headerlink" title="下载Canal"></a>下载Canal</h2><p>下载Canal的包：<a href="https://github.com/alibaba/canal/releases/tag/canal-1.1.4">官网下载地址</a></p><p>下载上传后解压包</p><pre class="line-numbers language-none"><code class="language-none">mkdir canaltar -zxvf canal.deployer-1.1.4.tar.gz -C /opt/canal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>会生成四个文件夹<br><img src="https://img-blog.csdnimg.cn/20201110130532710.png#pic_center" alt="在这里插入图片描述"></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>vim conf/example/instance.properties</p><pre class="line-numbers language-none"><code class="language-none">## mysql serverIdcanal.instance.mysql.slaveId = 1234#position info，需要改成自己的数据库信息canal.instance.master.address = hadoop1:3306 canal.instance.master.journal.name = canal.instance.master.position = canal.instance.master.timestamp = #canal.instance.standby.address = #canal.instance.standby.journal.name =#canal.instance.standby.position = #canal.instance.standby.timestamp = #username/password，需要改成自己的数据库信息canal.instance.dbUsername = canalcanal.instance.dbPassword = 123456canal.instance.defaultDatabaseName =canal.instance.connectionCharset = UTF-8#table regexcanal.instance.filter.regex = .\*\\\\..\*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要修改Canal的端口号可以在conf/canal.properties中修改</p><p>vim conf/canal.properties<br><img src="https://img-blog.csdnimg.cn/20201110130951663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="启动Canal服务端"><a href="#启动Canal服务端" class="headerlink" title="启动Canal服务端"></a>启动Canal服务端</h2><pre class="line-numbers language-none"><code class="language-none">sh bin/startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>查看Server 日志</p><pre class="line-numbers language-none"><code class="language-none">vim  logs/canal/canal.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 instance 的日志</p><pre class="line-numbers language-none"><code class="language-none">vim  logs/example/example.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有报错就说明启动没有问题</p><h2 id="客户端pom文件配置"><a href="#客户端pom文件配置" class="headerlink" title="客户端pom文件配置"></a>客户端pom文件配置</h2><p>服务端启动完成后使用代码访问服务端<br>pom文件中导包</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba.otter&lt;/groupId&gt;        &lt;artifactId&gt;canal.client&lt;/artifactId&gt;        &lt;version&gt;1.1.4&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h2><pre class="line-numbers language-none"><code class="language-none">import com.alibaba.otter.canal.client.CanalConnectors;import com.alibaba.otter.canal.client.CanalConnector;import com.alibaba.otter.canal.protocol.Message;import com.alibaba.otter.canal.protocol.CanalEntry.Column;import com.alibaba.otter.canal.protocol.CanalEntry.Entry;import com.alibaba.otter.canal.protocol.CanalEntry.EntryType;import com.alibaba.otter.canal.protocol.CanalEntry.EventType;import com.alibaba.otter.canal.protocol.CanalEntry.RowChange;import com.alibaba.otter.canal.protocol.CanalEntry.RowData;import org.springframework.beans.factory.InitializingBean;import org.springframework.stereotype.Component;import java.net.InetSocketAddress;import java.util.List;@Componentpublic class CannalClient implements InitializingBean {    public static void main(String args[]) {        // 创建链接  连接地址是安装canal的地址，端口默认11111，example是他的配置文件的topic名称，账号密码是自己设置的        CanalConnector connector = CanalConnectors.newSingleConnector(new InetSocketAddress("hadoop1",                11111), "example", "canal", "123456");        int batchSize = 1000;        int emptyCount = 0;        try {            connector.connect();            connector.subscribe(".*\\..*");            connector.rollback();            int totalEmptyCount = 120;            while (emptyCount &lt; totalEmptyCount) {                Message message = connector.getWithoutAck(batchSize); // 获取指定数量的数据                long batchId = message.getId();                int size = message.getEntries().size();                if (batchId == -1 || size == 0) {                    emptyCount++;                    System.out.println("empty count : " + emptyCount);                    try {                        Thread.sleep(1000);                    } catch (InterruptedException e) {                    }                } else {                    emptyCount = 0;                    // System.out.printf("message[batchId=%s,size=%s] \n", batchId, size);                    printEntry(message.getEntries());                }                connector.ack(batchId); // 提交确认                // connector.rollback(batchId); // 处理失败, 回滚数据            }            System.out.println("empty too many times, exit");        } finally {            connector.disconnect();        }    }    private static void printEntry(List&lt;Entry&gt; entrys) {        for (Entry entry : entrys) {            if (entry.getEntryType() == EntryType.TRANSACTIONBEGIN || entry.getEntryType() == EntryType.TRANSACTIONEND) {                continue;            }            RowChange rowChage = null;            try {                rowChage = RowChange.parseFrom(entry.getStoreValue());            } catch (Exception e) {                throw new RuntimeException("ERROR ## parser of eromanga-event has an error , data:" + entry.toString(),                        e);            }            EventType eventType = rowChage.getEventType();            System.out.println(String.format("================&gt; binlog[%s:%s] , name[%s,%s] , eventType : %s",                    entry.getHeader().getLogfileName(), entry.getHeader().getLogfileOffset(),                    entry.getHeader().getSchemaName(), entry.getHeader().getTableName(),                    eventType));            for (RowData rowData : rowChage.getRowDatasList()) {                if (eventType == EventType.DELETE) {                    printColumn(rowData.getBeforeColumnsList());                } else if (eventType == EventType.INSERT) {                    printColumn(rowData.getAfterColumnsList());                } else {                    System.out.println("-------&gt; before");                    printColumn(rowData.getBeforeColumnsList());                    System.out.println("-------&gt; after");                    printColumn(rowData.getAfterColumnsList());                }            }        }    }    private static void printColumn(List&lt;Column&gt; columns) {        for (Column column : columns) {            System.out.println(column.getName() + " : " + column.getValue() + "    update=" + column.getUpdated());        }    }    @Override    public void afterPropertiesSet() throws Exception {    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在启动后可以操作mysql的数据库，插入删除数据看看是否有数据被打印出来</p><p>没有说明白的地方可以查看官方文档<a href="https://github.com/alibaba/canal/wiki/QuickStart">https://github.com/alibaba/canal/wiki/QuickStart</a></p>]]></content>
      
      
      <categories>
          
          <category> Canal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sqoop1导入数据hdsf/hive</title>
      <link href="2020/11/09/cdh/sqoop/sqoop1-dao-ru-hdfs-hive-shu-ju/"/>
      <url>2020/11/09/cdh/sqoop/sqoop1-dao-ru-hdfs-hive-shu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="Sqoop"><a href="#Sqoop" class="headerlink" title="Sqoop"></a>Sqoop</h1><h2 id="Sqoop是什么"><a href="#Sqoop是什么" class="headerlink" title="Sqoop是什么"></a>Sqoop是什么</h2><p>sqoop是apache旗下一款“Hadoop和关系数据库服务器之间传送数据”的工具。sqoop通过mr导入导出，底层是只有m没有r的mr任务</p><p>导入数据：MySQL，Oracle导入数据到Hadoop的HDFS、HIVE、HBASE等数据存储系统；</p><p>导出数据：从Hadoop的文件系统中导出数据到关系数据库</p><p>CDH先安装了Sqoop2，以为用法一样，只是结构不一样了，后来发现用法完全不一样，又把sqoop给装了回来，还复习了一波<br>hadoop1    是我的Mysql安装机器<br>exercise    Mysql中测试的的数据库<br>test_table   Mysql  exercise数据库的测试表</p><h2 id="手动安装sqoop"><a href="#手动安装sqoop" class="headerlink" title="手动安装sqoop"></a>手动安装sqoop</h2><p>这里我是CDH直接安装的，下面安装的步骤是apache版本过程</p><p>1、上传解压sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar包</p><pre class="line-numbers language-none"><code class="language-none">tar -zxvf sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、修改etc/profile文件</p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME=/root/Downloads/jdk1.8.0_161export PATH=$PATH:$JAVA_HOME/binexport HADOOP_HOME=/root/Downloads/hadoop-2.6.5export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbinexport ZOOKEEPER_HOME=/root/Downloads/zookeeper-3.4.5export PATH=$PATH:$ZOOKEEPER_HOME/binexport HIVE_HOME=/root/Downloads/apache-hive-1.2.0-binexport PATH=$PATH:$HIVE_HOME/binexport FLUME_HOME=/root/Downloads/apache-flume-1.6.0-binexport PATH=$PATH:$FLUME_HOME/binexport HBASE_HOME=/root/Downloads/hbase-1.2.6export PATH=$PATH:$HBASE_HOME/binexport SQOOP_HOME=/root/Downloads/sqoop-1.4.6.bin__hadoop-2.0.4-alphaexport PATH=$PATH:$SQOOP_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>source /etc/profile 来刷新配置文件来使生效</p><p>3、在sqoop下的lib中添加mysql控制包，是负责sql能够识别的</p><pre class="line-numbers language-none"><code class="language-none">cd /home/hadoop/hive-1.2.1/libcp mysql-connector-java-5.1.24-bin.jar /home/hadoop/sqoop-1.4.6/lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、修改conf/sqoop-env.sh</p><p>mv sqoop-env-template.sh sqoop-env.sh</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">export HADOOP_COMMON_HOME=/opt/modules/hadoop#Set path to where hadoop-*-core.jar is availableexport HADOOP_MAPRED_HOME=/opt/modules/hadoop#Set the path to where bin/hive is availableexport HIVE_HOME=/opt/modules/hiveexport ZOOKEEPER_HOME=/opt/modules/zookeeper#Set the path for where zookeper config dir isexport ZOOCFGDIR=/opt/modules/zookeeper#set the path to where bin/hbase is availableexport HBASE_HOME=/opt/modules/hbase<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、测试</p><pre class="line-numbers language-none"><code class="language-none">sqoop version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="底层工作机制"><a href="#底层工作机制" class="headerlink" title="底层工作机制"></a>底层工作机制</h2><p>将导入或导出命令翻译成 MapReduce 程序来实现</p><p>在翻译出的 MapReduce 中主要是对InputFormat 和 </p><p>OutputFormat 进行定制<img src="/2020/11/09/cdh/sqoop/sqoop1-dao-ru-hdfs-hive-shu-ju/640" alt="img"></p><table><thead><tr><th>选项</th><th>含义说明</th></tr></thead><tbody><tr><td>–append</td><td>将数据追加到HDFS上一个已存在的数据集上</td></tr><tr><td>–as-avrodatafile</td><td>将数据导入到Avro数据文件</td></tr><tr><td>–as-sequencefile</td><td>将数据导入到SequenceFile</td></tr><tr><td>–as-textfile</td><td>将数据导入到普通文本文件（默认）</td></tr><tr><td>–boundary-query</td><td><statement>    边界查询，用于创建分片（InputSplit）</statement></td></tr><tr><td>–columns &lt;col,col,col…&gt;</td><td>从表中导出指定的一组列的数据</td></tr><tr><td>—delete-target-dir</td><td>如果指定目录存在，则先删除掉</td></tr><tr><td>–direct</td><td>使用直接导入模式（优化导入速度）</td></tr><tr><td>–direct-split-size <n></n></td><td>分割输入stream的字节大小（在直接导入模式下）</td></tr><tr><td>–fetch-size <n></n></td><td>从数据库中批量读取记录数</td></tr><tr><td>–inline-lob-limit <n></n></td><td>设置内联的LOB对象的大小</td></tr><tr><td>-m,–num-mappers <n></n></td><td>使用n个map任务并行导入数据</td></tr><tr><td>-e,–query <statement></statement></td><td>导入的查询语句</td></tr><tr><td>–split-by <column-name></column-name></td><td>指定按照哪个列去分割数据，不同数据交给不同maptask执行</td></tr><tr><td>–table <table-name></table-name></td><td>导入的源表表名</td></tr><tr><td>–target-dir <dir></dir></td><td>导入HDFS的目标路径</td></tr><tr><td>–warehouse-dir <dir></dir></td><td>HDFS存放表的根路径</td></tr><tr><td>–where <where clause=""></where></td><td>指定导出时所使用的查询条件</td></tr><tr><td>-z,–compress</td><td>启用压缩</td></tr><tr><td>–compression-codec <c></c></td><td>指定Hadoop的codec方式（默认gzip）</td></tr><tr><td>–null-string <null-string></null-string></td><td>如果指定列为字符串类型，使用指定字符串替换值为null的该类列的值</td></tr><tr><td>–null-non-string <null-string></null-string></td><td>如果指定列为非字符串类型，使用指定字符串替换值为null的该类列的值</td></tr><tr><td>这里的<code>--table</code>和 <code>--query</code>两者是可以替换的。在使用query时，可以不使用sql，改成–table的形式</td><td></td></tr><tr><td>使用query时，必须得在Sql语句后面加上/<code>$CONDITIONS </code></td><td></td></tr><tr><td><code>$CONDITIONS </code>的作用可以参考以下博客</td><td></td></tr><tr><td><a href="https://www.cnblogs.com/youngchaolin/p/12271211.html">https://www.cnblogs.com/youngchaolin/p/12271211.html</a></td><td></td></tr></tbody></table><h2 id="sqoop查询mysql的数据库"><a href="#sqoop查询mysql的数据库" class="headerlink" title="sqoop查询mysql的数据库"></a>sqoop查询mysql的数据库</h2><pre class="line-numbers language-none"><code class="language-none">sqoop list-databases \--connect "jdbc:mysql://hadoop1:3306/" \--username root \--password 123456 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sqoop查看指定数据库的表"><a href="#sqoop查看指定数据库的表" class="headerlink" title="sqoop查看指定数据库的表"></a>sqoop查看指定数据库的表</h2><pre class="line-numbers language-none"><code class="language-none">sqoop list-tables \--connect "jdbc:mysql://hadoop1:3306/exercise" \--username root \--password 123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="把mysql表的表结构导入到hive中"><a href="#把mysql表的表结构导入到hive中" class="headerlink" title="把mysql表的表结构导入到hive中"></a>把mysql表的表结构导入到hive中</h2><pre class="line-numbers language-none"><code class="language-none">sqoop create-hive-table \--connect "jdbc:mysql://hadoop1:3306/exercise?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false" \--table traveling_track \--username root  \--password 123456 \--hive-table exercise.hive_traveling_track \--fields-terminated-by "\t" \--lines-terminated-by "\n";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="把mysl数据导入Hdfs中"><a href="#把mysl数据导入Hdfs中" class="headerlink" title="把mysl数据导入Hdfs中"></a>把mysl数据导入Hdfs中</h2><pre class="line-numbers language-none"><code class="language-none">sqoop import \--connect "jdbc:mysql://hadoop1:3306/exercise?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false" \--username root \--password 123456 \--query "select * from traveling_track where \$CONDITIONS" \--target-dir /user/hive_traveling_track \--split-by raw_add_time \--direct \--null-string '\\N' \--null-non-string '\\N'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述语句还可以指定mr的任务个数    -m </p><h2 id="把mysql的数据导入到hive中-覆盖数据"><a href="#把mysql的数据导入到hive中-覆盖数据" class="headerlink" title="把mysql的数据导入到hive中  覆盖数据"></a>把mysql的数据导入到hive中  覆盖数据</h2><pre class="line-numbers language-none"><code class="language-none">sqoop import \--connect "jdbc:mysql://hadoop1:3306/exercise?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false" \--username root \--password 123456 \--query "select * from traveling_track where id = 392855 and \$CONDITIONS" \--fields-terminated-by ',' \--target-dir \hive_traveling_track_temp_data \--num-mappers 1 \--hive-import \--hive-overwrite \--hive-database exercise \--hive-table hive_traveling_track<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="增量导入数据"><a href="#增量导入数据" class="headerlink" title="增量导入数据"></a>增量导入数据</h2><h3 id="append增量导入数据到Hdfs，然后hive中load加载数据"><a href="#append增量导入数据到Hdfs，然后hive中load加载数据" class="headerlink" title="append增量导入数据到Hdfs，然后hive中load加载数据"></a>append增量导入数据到Hdfs，然后hive中load加载数据</h3><pre class="line-numbers language-none"><code class="language-none">sqoop import \--connect "jdbc:mysql://hadoop1:3306/exercise?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false" \--username root \--password 123456 \--table traveling_track \--target-dir /user/temp_traveling_track \--split-by id \--m 6  \--incremental append \--check-column id \--last-value 392855<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>–check-column:用指定字段去检查是否符合增量导入的条件<br>–incremental:指定增量导入的模式,可选 <code>append</code>  |  <code>lastmodified</code><br>–last-value:跟–check配合使用,上次导入的最后一个值,元数据中所有大于last-value的值都会被导入</p><h3 id="lastmodified增量导入数据到Hdfs，然后hive中load加载数据"><a href="#lastmodified增量导入数据到Hdfs，然后hive中load加载数据" class="headerlink" title="lastmodified增量导入数据到Hdfs，然后hive中load加载数据"></a>lastmodified增量导入数据到Hdfs，然后hive中load加载数据</h3><pre class="line-numbers language-none"><code class="language-none">sqoop import \--connect "jdbc:mysql://hadoop1:3306/exercise?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false" \--username root \--password 123456 \--table traveling_track \--target-dir /user/temp_traveling_track \--split-by id \-m 4 \--incremental lastmodified \--merge-key id \--check-column raw_add_time \--last-value "2020-07-31 09:31:51";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>--check-column</code>: 必须是timestamp列  时间列（int）<br><code>--incremental lastmodified</code>: 设置为最后改动模式，基于时间列的增量导入（将时间列大于等于阈值的所有数据增量导入Hadoop）<br><code>--merge-key</code>: 合并列（主键，合并键值相同的记录）必须是唯一主键<br><code>--last-value</code>: 所有大于最后一个时间的数据都会被更新<br>这个我试了之后，我的结果比预想值多了一条，<br>表中作为阈值的数据产生了重复数据。<br>而且我的数据没有同一秒的，一秒多条数据，可如果能会因为merge-key的合并功能导致数据的缺失<br>这个暂不确定，以后再试试</p><h2 id="sqoop与HBase"><a href="#sqoop与HBase" class="headerlink" title="sqoop与HBase"></a>sqoop与HBase</h2><h3 id="mysql导入hbase表中"><a href="#mysql导入hbase表中" class="headerlink" title="mysql导入hbase表中"></a>mysql导入hbase表中</h3><pre class="line-numbers language-none"><code class="language-none">//-column-family ''指定列族名sqoop import -connect jdbc:mysql://linux03:3306/hehe -username root -password 123456 root-table student -hbase-table student2 -column-family 'per data' -hbase-row-key id -m1 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Sqoop的Append和Lastmodified的区别"><a href="#Sqoop的Append和Lastmodified的区别" class="headerlink" title="Sqoop的Append和Lastmodified的区别"></a>Sqoop的Append和Lastmodified的区别</h2><p>Lastmodified 和Append模式的区别：<br><code>Append</code>模式处理不了更新数据，而<code>Lastmodified</code>模式可以</p><p>​<br>​    </p>]]></content>
      
      
      <categories>
          
          <category> Sqoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
            <tag> Sqoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yarn的学习笔记</title>
      <link href="2020/11/09/cdh/yarn/yarn/"/>
      <url>2020/11/09/cdh/yarn/yarn/</url>
      
        <content type="html"><![CDATA[<h2 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h2><h3 id="Yarn是什么？"><a href="#Yarn是什么？" class="headerlink" title="Yarn是什么？"></a>Yarn是什么？</h3><p>Apache Hadoop YARN （Yet Another Resource Negotiator，另一种资源协调者）是一种新的 Hadoop <strong>资源管理器</strong>，它是一个通用资源管理系统，可为上层应用提供统一的资源管理和调度，它的引入为集群在利用率、资源统一管理和数据共享等方面带来了巨大好处。</p><h3 id="Yarn的组件"><a href="#Yarn的组件" class="headerlink" title="Yarn的组件"></a>Yarn的组件</h3><p><a href="https://www.cnblogs.com/TiePiHeTao/p/66b3f9a60ed97359681c7cb97f1e3627.html">https://www.cnblogs.com/TiePiHeTao/p/66b3f9a60ed97359681c7cb97f1e3627.html</a></p><h4 id="ResourceManager"><a href="#ResourceManager" class="headerlink" title="ResourceManager"></a><strong>ResourceManager</strong></h4><p>sourceManager负责整个集群的资源管理和分配，是一个全局的资源管理系统。<strong>它主要由两个组件构成：调度器（Scheduler）和应用程序管理器（Applications Manager，ASM）。</strong></p><p>NodeManager以心跳的方式向ResourceManager汇报资源使用情况（目前主要是CPU和内存的使用情况）。RM只接受NM的资源回报信息，对于具体的资源处理则交给NM自己处理。</p><p>YARN Scheduler根据application的请求为其分配资源，不负责application job的监控、追踪、运行状态反馈、启动等工作（<strong>仅负责分配资源</strong>）。</p><h4 id="NodeManager"><a href="#NodeManager" class="headerlink" title="NodeManager"></a>NodeManager</h4><p>NodeManager是每个节点上的资源和任务管理器，它是管理这台机器的代理，负责该节点程序的运行，以及该节点资源的管理和监控。YARN集群每个节点都运行一个NodeManager。</p><p>NodeManager定时向ResourceManager汇报本节点资源（CPU、内存）的使用情况和Container的运行状态。当ResourceManager宕机时NodeManager自动连接RM备用节点。</p><p>NodeManager接收并处理来自ApplicationMaster的Container启动、停止等各种请求。</p><h4 id="ApplicationMaster"><a href="#ApplicationMaster" class="headerlink" title="ApplicationMaster"></a>ApplicationMaster</h4><p>用户提交的<strong>每个应用程序均包含一个ApplicationMaster</strong>，它可以运行在ResourceManager以外的机器上。</p><p>负责与RM调度器协商以获取资源（用Container表示）。</p><p>将得到的任务进一步分配给内部的任务(资源的二次分配)。</p><p>与NM通信以启动/停止任务。</p><p>监控所有任务运行状态，并在任务运行失败时重新为任务申请资源以重启任务。</p><h4 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h4><p>资源分配单位用一个抽象概念“资源容器”（Resource Container，简称Container）表示，Container是一个动态资源分配单位，它将内存、CPU、磁盘、网络等资源封装在一起，从而限定每个任务使用的资源量。此外，该调度器是一个可插拔的组件，用户可根据自己的需要设计新的调度器，YARN提供了多种直接可用的调度器，比如Fair Scheduler和Capacity Scheduler等。</p><h3 id="Yarn的内存"><a href="#Yarn的内存" class="headerlink" title="Yarn的内存"></a>Yarn的内存</h3><p>yarn的内存默认设置是8G，可以灵活的调整他的大小</p><p>运行一个任务默认最大内存也是8G，这个也是需要调整的</p><h3 id="Yarn执行的流程"><a href="#Yarn执行的流程" class="headerlink" title="Yarn执行的流程"></a>Yarn执行的流程</h3><p><a href="https://www.cnblogs.com/Transkai/p/10549923.html">https://www.cnblogs.com/Transkai/p/10549923.html</a></p><p><img src="/2020/11/09/cdh/yarn/yarn/1565437165939.png" alt="1565437165939"></p><p>2、如果是yarn平台，对resoucemanager提交作业审请<br>3、resourcemanager返回一个jobid和数据保存目录（hdfs://xxx/staging/xxx）<br>4、客户端根据返回数据保存目录路径，将job.split、job.xml、jar文件提交到hdfs://xxx/staging/xxx目录<br>5、提交数据资源之后，客户端对resouremanager提交任务运行<br>6、resourcemanager将任务存储任务队列<br>7、resourcemanager发送命令nodemanager处理从任务取出的任务<br>8、nodemanager往resourcemanageer审请我要创建一个app master<br>a、在nodemanager创建一个container，再启动app master<br>9、app master读取数据切片处理方案<br>10、app master往resourcemanager审请运行资源<br>11、resourcemanager往空闲的nodemanager主机发送指令，要创建Container<br>12、app master往nodemanger发送运行指令，container运行任务。</p><h3 id="Yarn调度器"><a href="#Yarn调度器" class="headerlink" title="Yarn调度器"></a>Yarn调度器</h3><p><a href="https://www.cnblogs.com/lenmom/p/11285273.html">https://www.cnblogs.com/lenmom/p/11285273.html</a></p><h5 id="1、FIFO-Scheduler-先进先出调度器"><a href="#1、FIFO-Scheduler-先进先出调度器" class="headerlink" title="1、FIFO Scheduler(先进先出调度器)"></a><strong>1、FIFO Scheduler(先进先出调度器)</strong></h5><p>先进先出，但不适合资源公平性</p><p>FIFO Scheduler是最简单也是最容易理解的调度器，也不需要任何配置，但它并不适用于共享集群。大的应用可能会占用所有集群资源，这就导致其它应用被阻塞。在共享集群中，更适合采用Capacity Scheduler或Fair Scheduler，这两个调度器都允许大任务和小任务在提交的同时获得一定的系统资源。下面“Yarn调度器对比图”展示了这几个调度器的区别，从图中可以看出，<strong>在FIFO 调度器中，小任务会被大任务阻塞</strong>。</p><p><img src="/2020/11/09/cdh/yarn/yarn/31857-20190801204346575-976593023.png" alt="img"></p><h5 id="2、Capacity-Scheduler-容量调度器"><a href="#2、Capacity-Scheduler-容量调度器" class="headerlink" title="2、Capacity Scheduler(容量调度器)"></a><strong>2、Capacity Scheduler(容量调度器)</strong></h5><p><img src="/2020/11/09/cdh/yarn/yarn/31857-20190801204818038-843718141.png" alt="img"></p><p>yarn-site.xml中默认配置的资源调度器。</p><p>独立的专门队列保证小作业也可以提交后就启动，队列容量是专门保留的</p><p>以整个集群的利用率为代价，与FIFO比，大作业执行的时间要长</p><p>Capacity调度器，有一个专门的队列用来运行小任务，但是为小任务专门设置一个队列会预先占用一定的集群资源，这就导致大任务的执行时间会落后于使用FIFO调度器时的时间。用这个资源调度器，就可以配置yarn资源队列，这个后面后介绍用到。</p><h5 id="3、FairS-scheduler-公平调度器"><a href="#3、FairS-scheduler-公平调度器" class="headerlink" title="3、FairS scheduler(公平调度器)"></a><strong>3、FairS scheduler(公平调度器)</strong></h5><p>不需要预留资源，调度器可以在运行的作业之间动态平衡资源，大作业启动时，因为是唯一运行的，所以获得集群的所有资源，之后小作业启动时，被分配到集群的一半的资源，这样每个作业都能公平共享资源</p><p>Fair调度器的设计目标    是为所有的应用分配公平的资源（对公平的定义可以通过参数来设置）</p><p>举个例子，假设有两个用户A和B，他们分别拥有一个队列。当A启动一个job而B没有任务时，A会获得全部集群资源；当B启动一个job后，A的job会继续运行，不过一会儿之后两个任务会各自获得一半的集群资源。如果此时B再启动第二个job并且其它job还在运行，则它将会和B的第一个job共享B这个队列的资源，也就是B的两个job会用于四分之一的集群资源，而A的job仍然用于集群一半的资源，结果就是资源最终在两个用户之间平等的共享。在Fair调度器中，我们不需要预先占用一定的系统资源，Fair调度器会为所有运行的job动态的调整系统资源。当第一个大job提交时，只有这一个job在运行，此时它获得了所有集群资源；当第二个小任务提交后，Fair调度器会分配一半资源给这个小任务，让这两个任务公平的共享集群资源。<br>a) 公平调度器，就是能够共享整个集群的资源<br>b) 不用预先占用资源，每一个作业都是共享的<br>c) 每当提交一个作业的时候，就会占用整个资源。如果再提交一个作业，那么第一个作业就会分给第二个作业一部分资源，第一个作业也就释放一部分资源。再提交其他的作业时，也同理。。。。也就是说每一个作业进来，都有机会获取资源。</p><h4 id="调度器之间的区别"><a href="#调度器之间的区别" class="headerlink" title="调度器之间的区别"></a>调度器之间的区别</h4><p>**FIFO Scheduler(先进先出调度器)**不用进行配置，小任务会被大任务阻塞。</p><p>**Capacity Scheduler(容量调度器)**，是yarn的默认调度器，会预先占用一定集群资源，小任务一个执行队列，大任务一个执行队列</p><p>**FairS scheduler(公平调度器)**，能够共享整个集群资源，不用预先占用集群资源，每一个作业都是共享的</p><h4 id="Fair-Scheduler与Capacity-Scheduler区别"><a href="#Fair-Scheduler与Capacity-Scheduler区别" class="headerlink" title="Fair Scheduler与Capacity Scheduler区别"></a>Fair Scheduler与Capacity Scheduler区别</h4><p><strong>资源公平共享</strong>：在每个队列中，Fair Scheduler可选择按照FIFO、Fair或DRF策略为应用程序分配资源。Fair策略即平均分配，默认情况下，每个队列采用该方式分配资源<br><strong>支持资源抢占</strong>：当某个队列中有剩余资源时，调度器会将这些资源共享给其他队列，而当该队列中有新的应用程序提交时，调度器要为它回收资源。为了尽可能降低不必要的计算浪费，调度器采用了先等待再强制回收的策略，即如果等待一段时间后尚有未归还的资源，则会进行资源抢占；从那些超额使用资源的队列中杀死一部分任务，进而释放资源<br><strong>负载均衡</strong>：Fair Scheduler提供了一个基于任务数的负载均衡机制，该机制尽可能将系统中的任务均匀分配到各个节点上。此外，用户也可以根据自己的需求设计负载均衡机制<br><strong>调度策略灵活配置</strong>：Fiar Scheduler允许管理员为每个队列单独设置调度策略（当前支持FIFO、Fair或DRF三种）<br>提高小应用程序响应时间：由于采用了最大最小公平算法，小作业可以快速获取资源并运行完成</p><h3 id="Yarn调度器配置文件"><a href="#Yarn调度器配置文件" class="headerlink" title="Yarn调度器配置文件"></a><strong>Yarn</strong>调度器<strong>配置</strong>文件</h3><p>yarn资源调度器是在<strong>yarn-site.xml</strong>中配置</p><h3 id="Yarn的Uber模式"><a href="#Yarn的Uber模式" class="headerlink" title="Yarn的Uber模式"></a>Yarn的Uber模式</h3><p>Yarn的默认配置会禁用uber组件，即不允许JVM重用（不允许container重用）。我们先看看在这种情况下，Yarn是如何执行一个MapReduce job的。首先，Resource Manager里的Application Manager会为每一个application(比如一个用户提交的MapReduce Job)在NodeManager里面申请一个container，然后在该container里面启动一个Application Master。container在Yarn中是分配资源的容器(内存、cpu、硬盘等)，它启动时便会相应启动一个JVM。此时，Application Master便陆续为application包含的每一个task(一个Map task或Reduce task)向Resource Manager申请一个container。等每得到一个container后，便要求该container所属的NodeManager将此container启动，然后就在这个container里面执行相应的task。等这个task执行完后，这个container便会被NodeManager收回，而container所拥有的JVM也相应地被退出。</p><p>申请——》启动——》运行——》回收</p><p>用户可以通过启用uber组件来允许JVM重用——即在同一个container里面依次执行多个task。在mapred-site.xml文件中，改变一下几个参数的配置即可启用uber的方法：</p><h4 id="Uber配置文件"><a href="#Uber配置文件" class="headerlink" title="Uber配置文件"></a>Uber配置文件</h4><p>在maped-site.xml文件添加</p><p><img src="/2020/11/09/cdh/yarn/yarn/1565710519732.png" alt="1565710519732"></p><h3 id="Yarn-分布式资源管理系统"><a href="#Yarn-分布式资源管理系统" class="headerlink" title="Yarn 分布式资源管理系统"></a>Yarn 分布式资源管理系统</h3><p>yarn能够给长短应用运行时提供资源分配</p><h3 id="RPC协议"><a href="#RPC协议" class="headerlink" title="RPC协议"></a>RPC协议</h3><p>远程过程调用</p><p><img src="/2020/11/09/cdh/yarn/yarn/1565525258071.png" alt="1565525258071"></p><h5 id="长应用"><a href="#长应用" class="headerlink" title="长应用"></a>长应用</h5><p>通常情况下，永不停止运行</p><h5 id="短应用"><a href="#短应用" class="headerlink" title="短应用"></a>短应用</h5><p>短时间内会运行结束的程序</p><p>JobTracker是主节点的进程 </p><p>TaskTracker是从节点的进程 ，管理mr任务 </p><p><img src="/2020/11/09/cdh/yarn/yarn/1565437244367.png" alt="1565437244367"></p><h3 id="一个程序运行需要3点"><a href="#一个程序运行需要3点" class="headerlink" title="一个程序运行需要3点"></a>一个程序运行需要3点</h3><p>数据，资源，mr（jar包）</p>]]></content>
      
      
      <categories>
          
          <category> Yarn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDH5.16.2 Spark安装后启动失败</title>
      <link href="2020/11/09/cdh/spark/cdh5.16-spark2-an-zhuang-cheng-gong-dan-qi-dong-shi-bai/"/>
      <url>2020/11/09/cdh/spark/cdh5.16-spark2-an-zhuang-cheng-gong-dan-qi-dong-shi-bai/</url>
      
        <content type="html"><![CDATA[<p>参考文章<a href="https://blog.csdn.net/nieji3057/article/details/79416531">https://blog.csdn.net/nieji3057/article/details/79416531</a><br>CDHspark升级成Spark2之后，在启动时spark后面都要加一个2，</p><pre class="line-numbers language-none"><code class="language-none">spark-shell   -&gt;  spark2-shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动Spark后会报一个错</p><pre class="line-numbers language-none"><code class="language-none">Permission denied: user=root, access=WRITE, inode="/user"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是权限不对，这里已经是root，应该是最高权限了，怎么不对<br>在CDH中，hdfs用户才是最高的权限，你的HDFS目录中的spark目录所属用户是hdfs，root没有权限访问也就导致了报错<br>需要把你的Hdfs路径的Spark权限改成spark用户的</p><pre class="line-numbers language-none"><code class="language-none">sudo -u hdfs hadoop fs -chown root /user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在命令行中重试</p><pre class="line-numbers language-none"><code class="language-none">spark2-shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201109090350137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NTg0NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>成了</p>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka2.2.0命令</title>
      <link href="2020/11/06/cdh/kafka/kafka2.2.cdh-ming-ling-xing-ming-ling/"/>
      <url>2020/11/06/cdh/kafka/kafka2.2.cdh-ming-ling-xing-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>Kafka安装完成启动后，测试连不起来，发现版本比以前高，他们的语法有点变化，zookeeper这个语法被淘汰掉了，因为新版本不存放offset在zk上了。使用–bootstrap-server来指定broker的位置</p><blockquote><p>查看所有topic</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-topics --list --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>生产者</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-console-producer --broker-list hadoop1:9092,hadoop2:9092,hadoop3:9092 --topic TP_LABEL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>消费者</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-console-consumer --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --topic TP_LABEL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>消费者-从头消费数据</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-console-consumer --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --from-beginning --topic TP_LABEL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>查看topic主题详细信息</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-topics  --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --topic TP_LABEL --describe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>查看消费者组</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-consumer-groups --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>查看指定消费者组详细信息(CONSUMER-ID HOST CLIENT-ID PARTITIONS ASSIGNMENT)</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-consumer-groups --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --group cloudera_mirrormaker --describe --members --verboseCONSUMER-ID                                                 HOST            CLIENT-ID              #PARTITIONS     ASSIGNMENTcloudera_mirrormaker-0-1d1a8103-3e9d-43c4-9a34-09f677fd049a /10.130.210.246 cloudera_mirrormaker-0 0               -cloudera_mirrormaker-0-a6168ff9-e579-4536-b92a-fc6aaf82b8c1 /10.130.210.245 cloudera_mirrormaker-0 0               -cloudera_mirrormaker-0-a110eabd-5191-49a0-acf4-dbdc7e9a602f /10.130.210.247 cloudera_mirrormaker-0 0               -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看指定消费者组详细信息(CONSUMER-ID HOST CLIENT-ID PARTITIONS)</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-consumer-groups --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --group cloudera_mirrormaker --describe --members//CONSUMER-ID                                                 HOST            CLIENT-ID              #PARTITIONS     //cloudera_mirrormaker-0-1d1a8103-3e9d-43c4-9a34-09f677fd049a /10.130.210.246 cloudera_mirrormaker-0 0               //cloudera_mirrormaker-0-a6168ff9-e579-4536-b92a-fc6aaf82b8c1 /10.130.210.245 cloudera_mirrormaker-0 0               //cloudera_mirrormaker-0-a110eabd-5191-49a0-acf4-dbdc7e9a602f /10.130.210.247 cloudera_mirrormaker-0 0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看指定消费者组详细信息(TOPIC PARTITION CURRENT-OFFSET LOG-END-OFFSET LAG CONSUMER-ID HOST CLIENT-ID)</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-consumer-groups --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --group cloudera_mirrormaker --describe//TOPIC               PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG             CONSUMER-ID                                     HOST            CLIENT-ID//xxx_trajectory 0          143693805       143693905       100             consumer-1-02f47385-5496-4094-9513-09c0b66b47bc /59.202.28.243  consumer-1//xxx_trajectory 1          137186261       137186348       87              consumer-1-02f47385-5496-4094-9513-09c0b66b47bc /59.202.28.243  consumer-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看指定消费者组详细信息(COORDINATOR(ID) ASSIGNMENT-STRATEGY STATE MEMBERS)</p></blockquote><pre class="line-numbers language-none"><code class="language-none">kafka-consumer-groups --bootstrap-server hadoop1:9092,hadoop2:9092,hadoop3:9092 --group cloudera_mirrormaker --describe --state//COORDINATOR (ID)          ASSIGNMENT-STRATEGY       STATE                #MEMBERS//hadoop3:9092 (63)         range                     Stable               3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
            <tag> CDH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTP时间服务器配置</title>
      <link href="2020/11/03/ntp-shi-jian-fu-wu-qi-pei-zhi/"/>
      <url>2020/11/03/ntp-shi-jian-fu-wu-qi-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="NTP时间服务器配置"><a href="#NTP时间服务器配置" class="headerlink" title="NTP时间服务器配置"></a>NTP时间服务器配置</h1><p>最近服务器中时间和现实时间不对应，需要修改服务器时间，这时候需要安装时间同步的服务器。</p><p>ntp配置有两种:</p><p>第一种是自己定制一台服务器为主节点，其他节点进行同步.</p><p>第二种是连接别人已经配好的时间服务器进行时间同步。这里NTP配置使用的是第二种，连接的是<code>ntp.neu.edu.cn iburst</code> 东北大学的时间服务器。</p><h2 id="一、-东北大学NTP服务"><a href="#一、-东北大学NTP服务" class="headerlink" title="一、 东北大学NTP服务"></a>一、 东北大学NTP服务</h2><p>1、查看centos是否已经安装过ntp服务器</p><pre class="line-numbers language-none"><code class="language-none">rpm -qa|grep ntp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果安装过，可以先进行卸载在重新安装。</p><p>2、安装ntp服务</p><pre class="line-numbers language-none"><code class="language-none">yum -y install ntp ntpdate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、开放防火墙，打开端口</p><p>这次没有涉及到访问失败等错误，暂时没有涉及这一过程</p><p>这里再尝试访问 ntp.neu.edu.cn iburst 东北大学服务器，看是否能返回时间，确认可用性</p><p><img src="/2020/11/03/ntp-shi-jian-fu-wu-qi-pei-zhi/image-20210118132401581-1611060385064.png" alt="尝试连接访问"></p><p>4、ntp配置文件配置</p><pre class="line-numbers language-none"><code class="language-none">vim /etc/ntp.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置文件内容：只用添加一行内容</p><pre class="line-numbers language-none"><code class="language-none">// 注释配置文件中原有的NTP服务器，并在其中添加自己所需的NTP服务器地址# Use public servers from the pool.ntp.org project.# Please consider joining the pool (http://www.pool.ntp.org/join.html).# server 0.centos.pool.ntp.org iburst# server 1.centos.pool.ntp.org iburst# server 2.centos.pool.ntp.org iburst# server 3.centos.pool.ntp.org iburstserver ntp.neu.edu.cn iburst<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、NTP配置为自启动并启动</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable ntpd.service//安装为服务systemctl start ntpd  //启动运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、查看客户端运行状态</p><pre class="line-numbers language-none"><code class="language-none">systemctl status ntpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、查看同步状态信息</p><pre class="line-numbers language-none"><code class="language-none">ntpstat[root@localhost jars]# ntpstatsynchronised to NTP server (202.118.1.46) at stratum 2   time correct to within 35 ms   polling server every 64 s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、自定义主节点配置NTP"><a href="#二、自定义主节点配置NTP" class="headerlink" title="二、自定义主节点配置NTP"></a>二、自定义主节点配置NTP</h2><p>需要多台节点才能够使用此方式,如果只有一台节点,你配置为主节点,他会以自身时间为基准和手动修改时间没有区别</p><p>三台服务器:10.130.210.245  10.130.210.246  10.130.210.247</p><p>这里选择了245为主节点</p><p>1、查看centos是否已经安装过ntp服务器</p><pre class="line-numbers language-none"><code class="language-none">rpm -qa|grep ntp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果安装过，可以先进行卸载在重新安装。</p><p>2、安装ntp服务</p><pre class="line-numbers language-none"><code class="language-none">yum -y install ntp ntpdate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、开放防火墙，打开端口</p><p>这次没有涉及到访问失败等错误，暂时没有涉及这一过程</p><p>4、ntp配置文件配置</p><p>这里主节点从节点配置是不一样的</p><pre class="line-numbers language-none"><code class="language-none">vim /etc/ntp.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主节点配置文件内容：</p><pre class="line-numbers language-none"><code class="language-none">restrict 10.130.210.245 nomodify notrap nopeer noquery //当前节点IP地址# 授权172.22.10.0网段上所有机器可以从这台机器上查询和时间同步restrict 10.130.210.0 mask 255.255.255.0 nomodify notrap //集群所在网段、掩码、权限# 新增本地ntp服务器172.22.10.6，注释掉原有的server 0-n// 注释配置文件中原有的NTP服务器# Use public servers from the pool.ntp.org project.# Please consider joining the pool (http://www.pool.ntp.org/join.html).# server 0.centos.pool.ntp.org iburst# server 1.centos.pool.ntp.org iburst# server 2.centos.pool.ntp.org iburst# server 3.centos.pool.ntp.org iburstserver 127.127.1.0#使用本地时间fudge 127.127.1.0 stratum 10#ntp stratum层#这两行代码设置时间服务器是自己<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">/etc/ntp.conf# 参数详解：#ignore  ：关闭所有的 NTP 联机服务#nomodify：客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。#notrust ：客户端除非通过认证，否则该客户端来源将被视为不信任子网#noquery ：不提供客户端的时间查询：用户端不能使用ntpq，ntpc等命令来查询ntp服务器#notrap ：不提供trap远端登陆：拒绝为匹配的主机提供模式 6 控制消息陷阱服务。          陷阱服务是 ntpdq 控制消息协议的子系统，用于远程事件日志记录程序。#nopeer ：用于阻止主机尝试与服务器对等，并允许欺诈性服务器控制时钟#kod ： 访问违规时发送 KoD 包。#restrict -6 表示IPV6地址的权限设置。          #stratum说明:# 正常情况下stratum值范围“0~15”# Stratum-2则从Stratum-1获取时间，Stratum-3从Stratum-2获取时间，以此类推，# 但Stratum层的总数限制在15以内。所有这些服务器在逻辑上形成阶梯式的架构相互连接，# 而Stratum-1的时间服务器是整个系统的基础<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端配置:</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">/etc/ntp.conf// 注释配置文件中原有的NTP服务器，并在其中添加自己刚刚定义的NTP服务器地址# Use public servers from the pool.ntp.org project.# Please consider joining the pool (http://www.pool.ntp.org/join.html).# server 0.centos.pool.ntp.org iburst# server 1.centos.pool.ntp.org iburst# server 2.centos.pool.ntp.org iburst# server 3.centos.pool.ntp.org iburstserver 10.130.210.245  fudge 10.130.210.245 stratum 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、NTP配置为自启动并启动</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable ntpd.service//安装为服务systemctl start ntpd  //启动运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、查看客户端运行状态</p><pre class="line-numbers language-none"><code class="language-none">systemctl status ntpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、查看同步状态信息</p><pre class="line-numbers language-none"><code class="language-none">ntpstat[root@localhost jars]# ntpstatsynchronised to NTP server (202.118.1.46) at stratum 2   time correct to within 35 ms   polling server every 64 s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、配置NTP（集群时间的定时同步）"><a href="#三、配置NTP（集群时间的定时同步）" class="headerlink" title="三、配置NTP（集群时间的定时同步）"></a>三、配置NTP（集群时间的定时同步）</h2><pre class="line-numbers language-none"><code class="language-none">rpm -qa |grep ntp//查看是否安装，查不出来要先安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>1.vim /etc/ntp.conf （修改配置文件）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">restrict default ignore<span class="token comment">&lt;!--解开注释，修改网段改成自己的--&gt;</span>restrict 192.168.10.0 mask 255.255.255.0 nomodify notrap<span class="token comment">&lt;!--注释掉---&gt;</span>不使用北京时间了#server 0.centos.pool.ntp.org iburst#server 1.centos.pool.ntp.org iburst#server 2.centos.pool.ntp.org iburst#server 3.centos.pool.ntp.org iburst<span class="token comment">&lt;!--去掉以下注释--&gt;</span>没有就添加上<span class="token comment">&lt;!--失去网络后，使用本地的时间配置--&gt;</span>server 127.127.1.0fudge 127.127.1.0 stratum 10<span class="token comment">&lt;!--这里的参数说明在第二个类型配置中有说明--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更改主节点的net.conf</p><p><img src="/2020/11/03/ntp-shi-jian-fu-wu-qi-pei-zhi/1567673183759-1611060370035.png" alt="第一张图"></p><p><img src="/2020/11/03/ntp-shi-jian-fu-wu-qi-pei-zhi/1567673197384-1611060399818.png" alt="第二张图"></p><p>2、vim /etc/sysconfig/ntpd</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">&lt;!--增加内容--&gt;SYNC_HWCLOCK=yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、service ntpd status</p><p>查看运行状态，进行重启ntp服务</p><p>4、service ntpd start</p><p>5、设置开机启动</p><pre class="line-numbers language-none"><code class="language-none">chkconfig ntpd on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、在其他节点上进行设置定时任务crontab -e</p><p>//代表了分 时 日 周 月  命令  主机名 </p><pre class="line-numbers language-none"><code class="language-none">*/10 * * * * /usr/sbin/ntpdate bw77<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、定时任务完成<img src="/2020/11/03/ntp-shi-jian-fu-wu-qi-pei-zhi/1567673332501-1611060410677.png" alt="1567673332501">后可以crontab -l 来查看定时任务</p><pre class="line-numbers language-none"><code class="language-none">crontab -l查看任务<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Ntp常用命令"><a href="#Ntp常用命令" class="headerlink" title="Ntp常用命令"></a>Ntp常用命令</h2><pre class="line-numbers language-none"><code class="language-none">#查询已安装的ntp版本信息等rpm -qa | grep ntp      #启动,停止, 重启, 查询ntp服务状态service ntpd status     检查ntp是否启动 service ntpd start      启动NTP(开一台就好)  service ntpd stop       关闭ntpservice ntpd restart    重新启动ntpwhich ntpdate       ntpdate这个系统命令在哪里 which renoot  renoot这个命令在哪里 which(查看可执行文件的位置)chkconfig ntpd on       设置ntpd为开机启动 #查看ntp服务器与上层ntp的状态ntpq -p  # 命令查看时间同步状态ntpstat  #下面返回的数据则表示成功连接synchronised to NTP server (202.118.1.46) at stratum 2   time correct to within 35 ms   polling server every 64 s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NTP配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据部分知识总结</title>
      <link href="2020/11/03/da-shu-ju-zhi-shi-zong-jie/"/>
      <url>2020/11/03/da-shu-ju-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h1><p>HttpFs</p><p>NFS Gateway工具可以将HDFS上面的空间映射到linux本地磁盘上，然后再进行操作</p><p>只要在一个hdfs客户端上装上，启动NFS Gateway服务，并mount上这个NFS文件夹，其他主机即可访问（编辑文件有限制，读写没问题）。</p><p>在尝试启动 NFS Gateway 角色实例之前，请先启动该主机上的portmap或者rpcbind服务。</p><pre class="line-numbers language-none"><code class="language-none">yum install rpcbind -y//安装rpcbind<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><p>hive Metastore 服务器端口  9083</p><h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h2 id="zk仲裁机制"><a href="#zk仲裁机制" class="headerlink" title="zk仲裁机制"></a>zk仲裁机制</h2><p>zk服务器运行方式有两种</p><ul><li>独立模式(standlone)</li><li>仲裁模式</li></ul><p>zk的状态无法进行覆盖，生产环境中会有一定危险</p><p>仲裁模式集群中，具备高可用的覆写功能。如果zk信息全部同步完成后，在进行下一条数据的同步，延时会比较突出</p><p>为了规避这个问题，zk使用了法定人数的思想。在zk信息同步时，保证若干个指定的节点同步完成，就继续下一次操作，而不是等全部的节点都同步完成。</p><p>法定人数至少是3，为了正常工作，集群中至少有3台服务器是正常运行的。</p><h1 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h1><h2 id="SparkStreaming"><a href="#SparkStreaming" class="headerlink" title="SparkStreaming"></a>SparkStreaming</h2><h2 id="RDD五大特性"><a href="#RDD五大特性" class="headerlink" title="RDD五大特性"></a>RDD五大特性</h2><p>A list of partitions<br>a function for computing each split<br>a list of dependencies on other RDDs<br>Optionally,a partitioner for key-value RDDs<br>Optionally,a list of preferred locations to compute each splip</p><h3 id="SparkStreaming背压机制"><a href="#SparkStreaming背压机制" class="headerlink" title="SparkStreaming背压机制"></a>SparkStreaming背压机制</h3><p>当Spark消费数据时，batch processing time&gt;batch interval时，也就是批次数据的处理时间比批次数据产生的时间长的时候，越来越多的数据被接收，但是数据的处理速度没有跟上，导致数据开始积压，可能进一步导致OOM异常</p><p>Spark1.5之前，使用Receiver-based数据接收器，可以通过配置<code>spark。streaming.receiver.maxRate</code>参数来限制每个receiver每秒最大可以接受的记录的数据。对于 Direct Approach 的数据接收，我们可以通过配置<code>spark.streaming.kafka.maxRatePerPartition</code> 参数来限制每次作业中每个 Kafka 分区最多读取的记录条数。</p><p>这种方法虽然可以通过限制接收速率，来适配当前的处理能力，但这种方式存在以下几个问题：</p><ul><li>我们需要事先估计好集群的处理速度以及消息数据的产生速度；</li><li>这两种方式需要人工参与，修改完相关参数之后，我们需要手动重启 Spark Streaming 应用程序；</li><li>如果当前集群的处理能力高于我们配置的 maxRate，而且 producer 产生的数据高于 maxRate，这会导致集群资源利用率低下，而且也会导致数据不能够及时处理。</li></ul><p><strong>反压机制</strong></p><p>Spark 1.5 引入了反压（Back Pressure）机制，其通过动态收集系统的一些数据来自动地适配集群数据处理能力。</p><h2 id="Spark-shuffle优化设置"><a href="#Spark-shuffle优化设置" class="headerlink" title="Spark shuffle优化设置"></a>Spark shuffle优化设置</h2><pre class="line-numbers language-none"><code class="language-none">set hive.exec.dynamic.partition=true;  set hive.exec.dynamic.partition.mode=nonstrict;set spark.speculation=true;set spark.sql.shuffle.partitions=1000;set spark.sql.adaptive.enabled=true;set spark.sql.adaptive.shuffle.targetPostShuffleInputSize=128000000;set spark.sql.adaptiveBroadcastJoinThreshold=10485760; set spark.sql.adaptive.allowAdditionalShuffle=true;set spark.sql.adaptive.join.enabled=true;set spark.sql.adaptive.skewedJoin.enabled=true;set spark.sql.adaptive.minNumPostShufflePartitions=1;set spark.sql.adaptive.maxNumPostShufflePartitions=1000;set spark.sql.planner.skewJoin=true;set spark.sql.planner.skewJoin.threshold=100000;set spark.sql.cbo.enabled=true;set spark.sql.cbo.joinReorder.card.weight=0.8;set spark.executor.extraJavaOptions=-XX:ParallelGCThreads=4 -XX:+UseParallelGC;set spark.sql.autoBroadcastJoinThreshold=10485760;set spark.sql.broadcastTimeout=600s;set spark.sql.bigdata.useExecutorBroadcast=true;set spark.hadoopRDD.ignoreEmptySplits=true;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><h2 id="kafka数据同步-镜像工具-kafka-mirror-maker"><a href="#kafka数据同步-镜像工具-kafka-mirror-maker" class="headerlink" title="kafka数据同步/镜像工具 kafka mirror maker"></a>kafka数据同步/镜像工具 kafka mirror maker</h2><p>MirrorMaker为kafka的镜像工具，如果没有这个需求就可以不启动这个服务。</p><p>可以使用kafkamaker来进行kafka之间的数据迁移/发送</p><h2 id="Kafka为什么快"><a href="#Kafka为什么快" class="headerlink" title="Kafka为什么快"></a>Kafka为什么快</h2><h3 id="磁盘读写"><a href="#磁盘读写" class="headerlink" title="磁盘读写"></a>磁盘读写</h3><p><a href="https://mp.weixin.qq.com/s/b5d1zNec-RcFwgEtNxNRUg">原文地址</a></p><p><img src="/2020/11/03/da-shu-ju-zhi-shi-zong-jie/ddd70f0e1e858cc507a23112e6d05010.png" alt="磁盘原理"></p><p>磁盘读写过程</p><ol><li>先进行寻址（找到对应的柱面，磁头要瞄准相应的磁道）</li><li>旋转（等待扇区从磁头地下旋转经过）</li><li>数据传输（从内存和磁盘中进行实际传输）</li></ol><p>kafka读取数据是采用的是顺序读写的方式，省去了磁盘寻址的时间，比随机读写要快约1000倍</p><h3 id="页缓存pagecache-buffcache"><a href="#页缓存pagecache-buffcache" class="headerlink" title="页缓存pagecache+buffcache"></a>页缓存pagecache+buffcache</h3><p><code>pagecache</code>（以page为单位，进行缓存文件内容）</p><p>缓存在pagecache中的文件数据能够更快的被用户读取</p><p>同时，带有buffer的写入操作，数据写入到page cache中就立即返回，不需要等待持久化到磁盘中，提高了上层应用读写文件的整体性能。cached这列的数值表示的是当前的页缓存（page cache）的占用量，page cache文件的页数据，页是逻辑上的概念，因此page cache是与文件系统同级的</p><p><strong>好处是</strong>：避免了brock的内存开销，避免了GC问题，应用程序重启数据不会丢失。操作系统层面的缓存利用率会更高，服务重启不会消失，避免了缓存重建的过程</p><p><code>buffer cache</code>：磁盘等设备缓冲</p><p>buffers列 表示当前的块缓存（buffer cache）占用量，buffer cache用于缓存块设备（如磁盘）的块数据。块是物理上的概念，因此buffer cache是与块设备驱动程序同级的。</p><h3 id="mmap（内存文件映射）"><a href="#mmap（内存文件映射）" class="headerlink" title="mmap（内存文件映射）"></a>mmap（内存文件映射）</h3><p>把物理磁盘文件和page cache进行映射，可以向读写硬盘一样读写内存</p><h3 id="零拷贝（zero-copy）"><a href="#零拷贝（zero-copy）" class="headerlink" title="零拷贝（zero-copy）"></a>零拷贝（zero-copy）</h3><p> 操作系统非零拷贝过程：</p><ol><li>从磁盘copy到page cache</li><li>从page cache copy到用户缓存区中</li><li>从用户缓存区中copy到socket缓存中</li><li>socket缓存中copy到网卡接口中</li></ol><p>零拷贝的过程：</p><ol><li>磁盘文件copy到page cache中</li><li>从page cachecopy到网卡接口中</li></ol><h3 id="存储设计"><a href="#存储设计" class="headerlink" title="存储设计"></a>存储设计</h3><p>topic分为了多个partition</p><p>partition存储时分成了多个sgement</p><p>sgement中存储了.index和.log文件</p><p>sgement只允许追加的形式</p><p>offset支持连续的预读和批量写</p><h3 id="批量发送"><a href="#批量发送" class="headerlink" title="批量发送"></a>批量发送</h3><p>为了减少网络io的开销，kafka支持batch.size和linger.ms</p><p><code>batch.szie</code>:消息条数达到个数就立刻发送</p><p><code>linger.ms</code>:消息不够，但是超过一定时间就发送</p><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>节省网络io</p><p>如果每个消息都压缩，但是压缩率相对很低，所以Kafka使用了批量压缩，即将多个消息一起压缩而不是单个消息压缩</p><p>Kafka允许使用递归的消息集合，批量的消息可以通过压缩的形式传输并且在日志中也可以保持压缩格式，直到被消费者解压缩</p><p>Kafka支持多种压缩协议，包括Gzip和Snappy压缩协议</p><h3 id="消息写入过程"><a href="#消息写入过程" class="headerlink" title="消息写入过程"></a>消息写入过程</h3><p><img src="/2020/11/03/da-shu-ju-zhi-shi-zong-jie/640" alt="img"></p><p>producer需要从用户空间到网卡(zero-copy)</p><p>生产者发送批量压缩的数据到broker，broker通过MappedByteBuffer的map()函数映射其地址到你的虚拟内存地址。</p><p>接着就可以对这个MappedByteBuffer执行写入操作了，写入的时候他会直接进入PageCache中，然后过一段时间之后，由os的线程异步刷入磁盘中，可以看上面的示意图。</p><p>上图中似乎只有一次数据拷贝的过程，他就是从PageCache里拷贝到磁盘文件里而已！这个就是你使用mmap技术之后，相比于传统磁盘IO的一个性能优化</p><h3 id="消息读的过程"><a href="#消息读的过程" class="headerlink" title="消息读的过程"></a>消息读的过程</h3><p>读取数据会先判断消息是否在page cache存在，存在就可以直接从page cache消费数据，所以消费实时数据会很快。</p><p>但是消费历史数据，就得将之前的历史数据和邻近的数据块，加载到page cache中。</p><p>这里加载邻近的数据就是一个预读的过程，是一个优化的过程</p>]]></content>
      
      
      <categories>
          
          <category> 复习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive/Spark小文件的处理</title>
      <link href="2020/11/03/xiao-wen-jian-chu-li/"/>
      <url>2020/11/03/xiao-wen-jian-chu-li/</url>
      
        <content type="html"><![CDATA[<p>解决hive/Spark的大量小文件问题</p><p>原文链接：<a href="https://mp.weixin.qq.com/s/m4NPnZaKJMXKrTwtZoOQeQ">https://mp.weixin.qq.com/s/m4NPnZaKJMXKrTwtZoOQeQ</a></p><h3 id="1、hive解决小文件问题"><a href="#1、hive解决小文件问题" class="headerlink" title="1、hive解决小文件问题"></a>1、hive解决小文件问题</h3><p>小文件问题存在程序执行之前<br>程序可能会需要读取多个数据源的数据，或者动态分区中生成了大量的小文件，再或者上一个mr执行完成的结果文件，<br>这些数据以分大量的小文件形式分布在磁盘中，如果按照默认的形式去执行，那么这些小文件将会每个都产生一个mr任务，而mr任务的启动和销毁都会消耗大量的资源，导致集群运行缓慢，或者直接导致集群崩溃<br>而且mr的执行比mr的初始化时间和销毁时间短</p><p>解决问题的思路：<br>1、少用动态分区，<br>在使用动态分区的时候，使用distribute by 来进行数据的划分（将map端的数据按照指定字段来进行划分到不同的reduce来进行处理）</p><p>2、上面的方式运行完毕后，发现每个动态分区的目录中都只有一个文件，这是因为没有指定每个文件的大小和reduce的个数，在hive-site.xml配置文件中配置他们的文件数量</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">-- 在 map only 的任务结束时合并小文件set hive.merge.mapfiles = true;-- 在 MapReduce 的任务结束时合并小文件set hive.merge.mapredfiles = true;-- 作业结束时合并文件的大小 set hive.merge.size.per.task = 256000000;-- 每个Map最大输入大小(这个值决定了合并后文件的数量) set mapred.max.split.size=256000000;   -- 每个reducer的大小， 默认是1G，输入文件如果是10G，那么就会起10个reducer；set hive.exec.reducers.bytes.per.reducer=1073741824;set hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、Spark的优化小文件"><a href="#2、Spark的优化小文件" class="headerlink" title="2、Spark的优化小文件"></a>2、Spark的优化小文件</h3><p>sparksql并行度默认是200，在使用了group by join等产生shuffle算子后会产生大量的小文件，可以使用repartition/coalesce算子来进行优化</p><p>coalesce算子在不产生shuffle的情况下进行数据分区的合并，但是内存不足会oom</p><p>常用情况：</p><p>一般有使用到Spark进行完业务处理后，为了避免小文件问题，对RDD/DataFrame进行分区的缩减，避免写入HDFS有大量的小文件问题，从而给HDFS的NameNode内存造成大的压力，而调用coalesce，实则源码调用的是case class Repartition shuffle参数为false的，默认是不走shuffle的。</p><ol><li>假设当前spark作业的提交参数是num-executor 10 ，executor-core 2，那么就会有20个Task同时并行，如果对最后结果DataFrame进行coalesce操作缩减为(10)，最后也就只会生成10个文件，也表示只会运行10个task，就会有大量executor空跑，cpu core空转的情况；</li><li>而且coalesce的分区缩减是全在内存里进行处理，如果当前处理的数据量过大，这样很容易就导致程序OOM异常</li><li> 如果 coalesce 前的分区数小于 后预想得到的分区数，coalesce就不会起作用，也不会进行shuffle，因为父RDD和子RDD是窄依赖</li></ol><p>Repartition Hint可以增加或减少分区数量，它执行数据的完全shuffle，并确保数据平均分配。</p><p>常用情况：</p><p>上游数据分区数据分布不均匀，才会对RDD/DataFrame等数据集进行重分区，将数据重新分配均匀</p><p>假设原来有N个分区，现在repartition(M)的参数传为M，</p><p>​    而 N &lt; M ，则会根据HashPartitioner （key的hashCode % M）进行数据的重新划分</p><p>​    而 N  远大于 M ，那么还是建议走repartition，这样所有的executor都会运作起来，效率更高，如果还是走coalesce，假定参数是1，那么即使原本申请了10个executor，那么最后执行的也只会有1个executor。</p><h3 id="3、Hadoop-HAR归档"><a href="#3、Hadoop-HAR归档" class="headerlink" title="3、Hadoop HAR归档"></a>3、Hadoop HAR归档</h3><p>Hadoop Archive是一种特殊的归档格式，Hadoop Archive映射到文件系统目录，一个HAR以扩展名.har结尾，一个HAR目录包含元数据（以_index和_masterindex的形式）和data（part- *）文件。 _index文件包含文件名称，这些文件时归档的一部分，并且包含这些文件在归档中的位置。</p><p>对于已经产生小文件的hive表可以使用har归档，而且Hive提供了原生支持：</p><pre class="line-numbers language-none"><code class="language-none">set  hive.archive.enabled=  true ;set  hive.archive.har.parentdir.settable=  true ;set  har.partfile.size=256000000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在配置项设置完之后，就可以使用以下命令进行归档。</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE table_name ARCHIVE PARTITION (partition_col = partition_col_value, partition_col = partiton_col_value, ...)ALTER TABLE srcpart ARCHIVE PARTITION(ds='2008-04-08', hr='12')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以对已归档的分区恢复为原文件。</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE srcpart UNARCHIVE PARTITION(ds='2008-04-08', hr='12')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 小文件优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小文件优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的使用</title>
      <link href="2020/11/03/git/git-de-shi-yong/"/>
      <url>2020/11/03/git/git-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="Git的使用"><a href="#Git的使用" class="headerlink" title="Git的使用"></a>Git的使用</h2><p>1、下载安装过程，此处省略，安装过程中，可以选择是否可以通过第三方软件控制</p><p>2、注册git的账号，github,gitlab都可以，</p><h4 id="3、打开git的命令行窗口-设置账号"><a href="#3、打开git的命令行窗口-设置账号" class="headerlink" title="3、打开git的命令行窗口,设置账号"></a>3、打开git的命令行窗口,设置账号</h4><pre class="line-numbers language-none"><code class="language-none">//在这里设置自己的账号和邮箱git config --global user.name "zhanghao"   git config --global user.email "e-mail"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4、在指定位置初始化你的本地仓库"><a href="#4、在指定位置初始化你的本地仓库" class="headerlink" title="4、在指定位置初始化你的本地仓库"></a>4、在指定位置初始化你的本地仓库</h4><pre class="line-numbers language-none"><code class="language-none">git init//该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5、查看文件状态"><a href="#5、查看文件状态" class="headerlink" title="5、查看文件状态"></a>5、查看文件状态</h4><pre class="line-numbers language-none"><code class="language-none">//本地仓库目录下使用命令git status //如果没有提交到本地仓库上，那么就是红色的//提交了就是绿色的git status是用来查看当前工作状态，假如有文件为红色，说明文件修改了，此时在工作区。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6、添加数据到本地仓库"><a href="#6、添加数据到本地仓库" class="headerlink" title="6、添加数据到本地仓库"></a>6、添加数据到本地仓库</h4><pre class="line-numbers language-none"><code class="language-none">git add 文件名称//将指定文件添加到本地仓库，之后就是绿色的了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="7、git-提交"><a href="#7、git-提交" class="headerlink" title="7、git 提交"></a>7、git 提交</h4><pre class="line-numbers language-none"><code class="language-none">git commit -m "这里面就是message"提交时，会将本地仓库提交上去，需要指定 commit message 数据git <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="8、git-创建分支并切换到新建分支"><a href="#8、git-创建分支并切换到新建分支" class="headerlink" title="8、git 创建分支并切换到新建分支"></a>8、git 创建分支并切换到新建分支</h4><pre class="line-numbers language-none"><code class="language-none">git checkout -b dev//git checkout 命令加上 -b 参数表示创建并切换，相当于以下两条命令：$ git branch dev //创建分支$ git checkout dev  //切换到指定分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9、查看所有分支列表"><a href="#9、查看所有分支列表" class="headerlink" title="9、查看所有分支列表"></a>9、查看所有分支列表</h4><pre class="line-numbers language-none"><code class="language-none">git branch <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/11/03/git/git-de-shi-yong/TyporaImage\image-20210112140653747.png" alt="image-20210112140653747"></p><h4 id="10、合并分支"><a href="#10、合并分支" class="headerlink" title="10、合并分支"></a>10、合并分支</h4><pre class="line-numbers language-none"><code class="language-none">git merge dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="11、删除分支"><a href="#11、删除分支" class="headerlink" title="11、删除分支"></a>11、删除分支</h4><pre class="line-numbers language-none"><code class="language-none">$ git branch -d dev//删除dev这个分支克隆远程仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">git clone &lt;url&gt; $ git clone //Git 克隆的是该 Git 仓库服务器上的几乎所有数据，而不是仅仅复制完成你的工作所需要文件。 当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来//克隆的仓库名称取别名git clone &lt;url&gt;  myurlname$ git clone https://github.com/libgit2/libgit2 mylibgit//这样克隆下来的仓库名称就变成了mylibgit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12、忽略文件"><a href="#12、忽略文件" class="headerlink" title="12、忽略文件"></a>12、忽略文件</h4><pre class="line-numbers language-none"><code class="language-none">在你的项目总创建一个  .gitignore 的文件，列出要忽略的文件的模式。cat .gitignore 案例：.[oa]//第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件*~//第二行告诉 Git 忽略所有名字以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。# 忽略所有的 .a 文件*.a# 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件!lib.a# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO/TODO# 忽略任何目录下名为 build 的文件夹build/# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txtdoc/*.txt# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件doc/**/*.pdf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">文件 .gitignore 的格式规范如下：所有空行或者以 # 开头的行都会被 Git 忽略。可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。匹配模式可以以（/）开头防止递归。匹配模式可以以（/）结尾指定目录。要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>13、查看已暂存和未暂存的修改</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拉链表</title>
      <link href="2020/11/03/shu-ju-cang-ku/la-lian-biao/"/>
      <url>2020/11/03/shu-ju-cang-ku/la-lian-biao/</url>
      
        <content type="html"><![CDATA[<p><strong><em>*</em>*2020-04-06 mysql对应的user_info表*\</strong>***</p><table><thead><tr><th>用户id</th><th>姓名</th><th>年龄</th><th>手机号</th><th>创建时间</th><th>修改时间</th></tr></thead><tbody><tr><td>0001</td><td>张三</td><td>20</td><td>111111</td><td>2020-04-06</td><td>2020-04-06</td></tr><tr><td>0002</td><td>小红</td><td>21</td><td>222222</td><td>2020-04-06</td><td>2020-04-06</td></tr></tbody></table><p><strong><em>*</em>*2020-04-07 mysql对应的user_info表*\</strong>***</p><table><thead><tr><th>用户id</th><th>姓名</th><th>年龄</th><th>手机号</th><th>创建时间</th><th>修改时间</th></tr></thead><tbody><tr><td>0001</td><td>张三</td><td>20</td><td>111222</td><td>2020-04-06</td><td>2020-04-07</td></tr><tr><td>0002</td><td>小红</td><td>21</td><td>222222</td><td>2020-04-06</td><td>2020-04-06</td></tr><tr><td>0003</td><td>李四</td><td>22</td><td>333333</td><td>2020-04-07</td><td>2020-04-07</td></tr><tr><td>0004</td><td>王五</td><td>44</td><td>444444</td><td>2020-04-07</td><td>2020-04-07</td></tr></tbody></table><p><strong><em>*</em>*2020-04-08 mysql对应的user_info表*\</strong>***</p><table><thead><tr><th>用户id</th><th>姓名</th><th>年龄</th><th>手机号</th><th>创建时间</th><th>修改时间</th></tr></thead><tbody><tr><td>0001</td><td>张三</td><td>20</td><td>111233</td><td>2020-04-06</td><td>2020-04-08</td></tr><tr><td>0002</td><td>小红</td><td>21</td><td>222221</td><td>2020-04-06</td><td>2020-04-08</td></tr><tr><td>0003</td><td>李四</td><td>22</td><td>333333</td><td>2020-04-07</td><td>2020-04-07</td></tr><tr><td>0004</td><td>王五</td><td>44</td><td>444445</td><td>2020-04-07</td><td>2020-04-08</td></tr><tr><td>005</td><td>德玛</td><td>55</td><td>555555</td><td>2020-04-08</td><td>2020-04-08</td></tr></tbody></table><p>抽取到ods之后，现在要保留用户的历史数据和新增数据，负责后期我要查看这个用户历史使用的手机号没法查看</p><p>所以我们要变成这样的结构：</p><table><thead><tr><th>用户id</th><th>姓名</th><th>年龄</th><th>手机号</th><th>创建时间</th><th>修改时间</th><th>start_time</th><th>end_time</th><th>date_id</th></tr></thead><tbody><tr><td>0001</td><td>张三</td><td>20</td><td>111111</td><td>2020-04-06</td><td>2020-04-06</td><td>2020-04-06</td><td>2020-04-06</td><td>2020-04-08</td></tr><tr><td>0001</td><td>张三</td><td>20</td><td>111222</td><td>2020-04-06</td><td>2020-04-07</td><td>2020-04-07</td><td>2020-04-07</td><td>2020-04-08</td></tr><tr><td>0001</td><td>张三</td><td>20</td><td>111233</td><td>2020-04-06</td><td>2020-04-08</td><td>2020-04-08</td><td>9999-12-31</td><td>2020-04-08</td></tr><tr><td>0002</td><td>小红</td><td>21</td><td>222222</td><td>2020-04-06</td><td>2020-04-06</td><td>2020-04-06</td><td>2020-04-07</td><td>2020-04-08</td></tr><tr><td>0002</td><td>小红</td><td>21</td><td>222221</td><td>2020-04-06</td><td>2020-04-08</td><td>2020-04-08</td><td>9999-12-31</td><td>2020-04-08</td></tr><tr><td>0003</td><td>李四</td><td>22</td><td>333333</td><td>2020-04-07</td><td>2020-04-07</td><td>2020-04-07</td><td>9999-12-31</td><td>2020-04-08</td></tr><tr><td>0004</td><td>王五</td><td>44</td><td>444444</td><td>2020-04-07</td><td>2020-04-07</td><td>2020-04-07</td><td>2020-04-07</td><td>2020-04-08</td></tr><tr><td>0004</td><td>王五</td><td>44</td><td>444445</td><td>2020-04-07</td><td>2020-04-08</td><td>2020-04-08</td><td>9999-12-31</td><td>2020-04-08</td></tr><tr><td>005</td><td>德玛</td><td>55</td><td>555555</td><td>2020-04-08</td><td>2020-04-08</td><td>2020-04-08</td><td>9999-12-31</td><td>2020-04-08</td></tr></tbody></table><p>保留历史可以选择的方式：</p><p>1、可以选择全量</p><p>但是每次都全量，肯定行不通，极大的浪费空间和造成数据的重复性</p><p>2、增量</p><p>可以获取到增量数据，但是改变的数据，你没有办法获取到</p><p>3、拉链</p><p>这里使用拉链表，是最适合解决这个问题的</p><p>要保留每个用户的历史手机号和修改时间</p><ol><li>创建一个拉链表</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> wedw_dwd<span class="token punctuation">.</span>test_user_info_dz <span class="token keyword">drop</span> <span class="token keyword">if</span> <span class="token keyword">EXISTS</span> <span class="token keyword">PARTITION</span><span class="token punctuation">(</span>date_id<span class="token operator">=</span><span class="token string">'2020-04-07'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>插入数据</li></ol><p>a表是建的拉链表，b表是ods层的数据表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> wedw_dwd<span class="token punctuation">.</span>test_user_info_dz <span class="token keyword">PARTITION</span><span class="token punctuation">(</span>date_id<span class="token operator">=</span><span class="token string">'2020-04-07'</span><span class="token punctuation">)</span><span class="token keyword">select</span>      a<span class="token punctuation">.</span>user_id    <span class="token punctuation">,</span>a<span class="token punctuation">.</span>user_name    <span class="token punctuation">,</span>a<span class="token punctuation">.</span>user_age    <span class="token punctuation">,</span>a<span class="token punctuation">.</span>user_cellphone    <span class="token punctuation">,</span>a<span class="token punctuation">.</span>create_time    <span class="token punctuation">,</span>a<span class="token punctuation">.</span>update_time    <span class="token punctuation">,</span>a<span class="token punctuation">.</span>start_time    <span class="token punctuation">,</span>a<span class="token punctuation">.</span>end_time<span class="token keyword">from</span> wedw_dwd<span class="token punctuation">.</span>test_user_info_dz a <span class="token keyword">left</span> <span class="token keyword">join</span> wedw_ods<span class="token punctuation">.</span>test_user_info_${DATA_DATE} b <span class="token keyword">on</span> b<span class="token punctuation">.</span>user_id<span class="token operator">=</span>a<span class="token punctuation">.</span>user_id <span class="token operator">and</span> b<span class="token punctuation">.</span>create_time <span class="token operator">&lt;</span> <span class="token string">'2020-04-08'</span>   <span class="token keyword">where</span> a<span class="token punctuation">.</span>date_id <span class="token operator">=</span> <span class="token string">'2020-04-06'</span> <span class="token operator">and</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>user_id <span class="token operator">is</span> <span class="token boolean">null</span>       <span class="token operator">or</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>user_id <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">and</span> a<span class="token punctuation">.</span>end_time <span class="token operator">&lt;=</span><span class="token string">'2020-04-06'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><table><thead><tr><th>用户id</th><th>姓名</th><th>年龄</th><th>手机号</th><th>创建时间</th><th>修改时间</th><th>start_time</th><th>end_time</th><th>date_id</th></tr></thead><tbody><tr><td>0001</td><td>张三</td><td>20</td><td>111233</td><td>2020-04-06</td><td>2020-04-08</td><td>2020-04-08</td><td>9999-12-31</td><td>2020-04-08</td></tr><tr><td>0002</td><td>小红</td><td>21</td><td>222221</td><td>2020-04-06</td><td>2020-04-08</td><td>2020-04-08</td><td>9999-12-31</td><td>2020-04-08</td></tr><tr><td>0003</td><td>李四</td><td>22</td><td>333333</td><td>2020-04-07</td><td>2020-04-07</td><td>2020-04-07</td><td>9999-12-31</td><td>2020-04-08</td></tr><tr><td>0004</td><td>王五</td><td>44</td><td>444445</td><td>2020-04-07</td><td>2020-04-08</td><td>2020-04-08</td><td>9999-12-31</td><td>2020-04-08</td></tr><tr><td>005</td><td>德玛</td><td>55</td><td>555555</td><td>2020-04-08</td><td>2020-04-08</td><td>2020-04-08</td><td>9999-12-31</td><td>2020-04-08</td></tr></tbody></table></li></ol><p>原文链接：<a href="https://mp.weixin.qq.com/s/mrM2x-YH2Bs69JGCXLBRdA">https://mp.weixin.qq.com/s/mrM2x-YH2Bs69JGCXLBRdA</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据仓库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据仓库 </tag>
            
            <tag> 拉链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓慢变化维解决的几种方式</title>
      <link href="2020/11/03/shu-ju-cang-ku/huan-man-bian-hua-wei/"/>
      <url>2020/11/03/shu-ju-cang-ku/huan-man-bian-hua-wei/</url>
      
        <content type="html"><![CDATA[<h2 id="缓慢变化纬"><a href="#缓慢变化纬" class="headerlink" title="缓慢变化纬"></a>缓慢变化纬</h2><p>Slowly Changing Dimensions are dimensions that have data that slowly changes. 意思就是说数据会发生缓慢变化的维度就叫”缓慢变化维”。</p><p>处理缓慢变化维度是Kimball数仓体系中永恒的话题，因为数据仓库的本质，以及维度表在维度建模中的基础作用，我们几乎总是要跟踪维度的变更（change tracking），以保留历史，并提供准确的查询和分析结果。在《The Data Warehouse Toolkit, 3rd Edition》一书的第5章，Kimball提出了多种缓慢变化维度的类型和处理方法，其中前五种是原生的，后面的方法都是混合方法（hybrid techniques），因此下面来看看前五种，即Type 0~Type 4。</p><h4 id="Tpye0-保留原始值"><a href="#Tpye0-保留原始值" class="headerlink" title="Tpye0 保留原始值"></a>Tpye0 保留原始值</h4><p>某一个属性值绝不会变化。事实表始终按照该原始值进行分组。比如在用户维度表中，用户注册时使用的原始用户名（original_user_name）。如果它发生变化，那么变化后的值是无效的，会被抛弃，始终按照用户第一次填写的数据为准。很明显这种方式是不推荐的。</p><p>说白话就是只要第一次的数据，不要变化后的数据</p><h4 id="Type1-覆盖更新"><a href="#Type1-覆盖更新" class="headerlink" title="Type1 覆盖更新"></a>Type1 覆盖更新</h4><p>与业务数据保持一致，同样为直接update。这样就难以记录历史变化，例如如果周杰伦于15年7月调入北京，那么我们想要知道北京销售员在15年的销售数据时，就会将周杰伦的业绩算入北京分公司下，实际上周杰伦7月份以前的销售数据均应算在台北，所以为了避免这样的问题就有了TYPE2的处理方式。</p><p>这样的方式就是Mysql中一般表的处理方式，如果变中的值发生了变化就直接update，不保留历史数据，这样显然是不符合我们需求的。</p><h4 id="Type2-增加新的列"><a href="#Type2-增加新的列" class="headerlink" title="Type2 增加新的列"></a>Type2 增加新的列</h4><p>数据仓库系统的目标之一是正确地表示历史记录。我们在生产环境中的基于Hive的数仓建设过程中，拉链表就是直接的体现。</p><p>这种类型在维度表中<strong>添加两个辅助列</strong>：该行的有效日期（effective date）和过期日期（expiration date），分别指示该行从哪个时间点开始生效，以及在哪个时间点过后会变为无效。<strong>每当一个或多个维度发生更改时，就创建一个新的行</strong>，新行包含有修改后的维度值，而旧行包含有修改前的维度值，且旧行的过期日期也会同步修改。书中的例子如下：</p><p><img src="/2020/11/03/shu-ju-cang-ku/huan-man-bian-hua-wei/640" alt="图片"></p><p>在上图中，当前有效列（current列）的过期日期会被记录为9999-12-31。当Department Name维度变化时，旧有的Product Key为12345的行的过期日期被更新为修改日期，并且新建了一个Key为25984的行，包含新的数据。</p><p>需要注意的是，这里的Product Key是所谓代理键（surrogate key），即不表示具体业务含义，而只是代表表内数据行的唯一ID。在处理SCD时，代理键可以直接用来区分同一自然键（natural key）的数据的新旧版本。上图中的SKU就是自然键。</p><p>这种类型的SCD处理方式能够非常有效且精确地保留历史与反映变更，但缺点是会造成数据的膨胀，因为即使只有一个维度变化，也要创建新行。</p><h4 id="Type3-新增属性列"><a href="#Type3-新增属性列" class="headerlink" title="Type3 新增属性列"></a>Type3 新增属性列</h4><p>用不同的字段来保存不同的值，就是在表中增加一个字段，这个字段用来保存变化后的当前值，而原来的值则被称为变化前的值。我们举个很简单的例子，例如我们在用户表中的用户住址这一列会变化，那么我们可以通过新增一个列来表示曾经的地址：</p><p>这么做虽然解决上面的数据膨胀的问题，但是如果很多个列都会变化，那么我们要新增很多系列，显然这是不合理的。另外，这种做法只能保留上一次的数据，那么更久远的变化就丢失了。</p><p>这种方式是我第一次了解拉链表时，最快想到的方式，但是这样并不理想，如果某一列持续update 那么会一直新增column，如果column没有了那么就会覆盖上次的值，有这上面两种类型的缺点</p><h4 id="Type4-新增维度表"><a href="#Type4-新增维度表" class="headerlink" title="Type4 新增维度表"></a>Type4 新增维度表</h4><p>如果我们的表规模非常大，数据量千万以上，大量的列变化非常频繁，那么这时候就不能用上面的办法来支撑了，我们需要将那些快速变化的维度从原来的大维度表中拆分出来单独处理，是为微维度（mini-dimension）。</p><p>我们用书中的内容举例，如果顾客维度中有一部分人口统计学（demographic）维度是RCD，就将它们拆成单独的维度表：</p><p><img src="/2020/11/03/shu-ju-cang-ku/huan-man-bian-hua-wei/640" alt="图片"></p><p>最后给出一张《The Data Warehouse Toolkit, 3rd Edition》中的这几种方式的比较图：</p><p><img src="/2020/11/03/shu-ju-cang-ku/huan-man-bian-hua-wei/640" alt="比较图"></p>]]></content>
      
      
      <categories>
          
          <category> 数据仓库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据仓库 </tag>
            
            <tag> 缓慢变化维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop Federation</title>
      <link href="2020/11/03/cdh/hadoop/hadoop-federation-lian-bang/"/>
      <url>2020/11/03/cdh/hadoop/hadoop-federation-lian-bang/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop-Federation联邦"><a href="#Hadoop-Federation联邦" class="headerlink" title="Hadoop Federation联邦"></a>Hadoop Federation联邦</h1><p>Hadoop    namenode 水平扩展</p><p><a href="https://www.cnblogs.com/jifengblog/p/9307702.html">https://www.cnblogs.com/jifengblog/p/9307702.html</a></p><p>单 NameNode 的架构使得 HDFS 在集群扩展性和性能上都有潜在的问题，当集群大到一定程度后，NameNode 进程使用的内存可能会达到上百 G，NameNode 成为了性能的瓶颈。因而提出了 namenode 水平扩展方案– Federation。</p><p>NameNode 的 Federation,也就是会有多个NameNode。多个 NameNode 的情况意味着有多个 namespace(命名空间)，区别于 HA 模式下的多 NameNode，它们是拥有着同一个 namespace。</p><p>所有关于存储数据的信息和管理是放在 NameNode 这边,而真实数据的存储则是在各个 DataNode 下。而这些隶属于同一个 NameNode 所管理的数据都是在同一个命名空间下的。而一个 namespace 对应一个 block pool。Block Pool 是同一个 namespace 下的 block 的集合.当然这是我们最常见的单个 namespace 的情况,也就是一个 NameNode 管理集群中所有元数据信息的时候.如果我们遇到了之前提到的 NameNode 内存使用过高的问题,这时候怎么办?元数据空间依然还是在不断增大,一味调高 NameNode 的 jvm 大小绝对不是一个持久的办法.这时候就诞生了 HDFS Federation 的机制.</p><h2 id="Federation-架构设计"><a href="#Federation-架构设计" class="headerlink" title="Federation 架构设计"></a>Federation 架构设计</h2><p>HDFS Federation 是解决 namenode 内存瓶颈问题的水平横向扩展方案。</p><p>Federation 意味着在集群中将会有多个 namenode/namespace。这些 namenode 之间是联合的，也就是说，他们之间相互独立且不需要互相协调，各自分工，管理自己的区域。分布式的 datanode 被用作通用的数据块存储存储设备。每个 datanode 要向集群中所有的namenode 注册，且周期性地向所有 namenode 发送心跳和块报告，并执行来自所有 namenode的命令。</p><p><img src="https://images2018.cnblogs.com/blog/1385779/201807/1385779-20180713221451764-694934100.png" alt="img"></p><p><img src="https://images2018.cnblogs.com/blog/1385779/201807/1385779-20180713221458715-863634950.png" alt="img"></p><p>Federation 一个典型的例子就是上面提到的 NameNode 内存过高问题,我们完全可以将上面部分大的文件目录移到另外一个NameNode上做管理. 更重要的一点在于,, 这些 NameNode是共享集群中所有的 e DataNode 的 , 它们还是在同一个集群内的 。</p><p>这时候在DataNode上就不仅仅存储一个Block Pool下的数据了,而是多个(在DataNode的 datadir 所在目录里面查看 BP-xx.xx.xx.xx 打头的目录)。</p><h3 id="概括起来："><a href="#概括起来：" class="headerlink" title="概括起来："></a>概括起来：</h3><p>　　　　多个 NN 共用一个集群里的存储资源，每个 NN 都可以单独对外提供服务。</p><p>　　　　每个 NN 都会定义一个存储池，有单独的 id，每个 DN 都为所有存储池提供存储。</p><p>　　　　DN 会按照存储池 id 向其对应的 NN 汇报块信息，同时，DN 会向所有 NN 汇报本地存储可用资源情况。</p><p><img src="https://images2018.cnblogs.com/blog/1385779/201807/1385779-20180713221819834-409214850.png" alt="img"></p><h3 id="HDFS-Federation不足"><a href="#HDFS-Federation不足" class="headerlink" title="HDFS Federation不足"></a>HDFS Federation不足</h3><p>　　HDFS Federation 并没有完全解决单点故障问题。虽然 namenode/namespace 存在多个，但是从单个 namenode/namespace 看，仍然存在单点故障：如果某个 namenode 挂掉了，其管理的相应的文件便不可以访问。Federation中每个namenode仍然像之前HDFS上实现一样，配有一个 secondary namenode，以便主 namenode 挂掉一下，用于还原元数据信息。</p><p>　　所以一般集群规模真的很大的时候，会采用 HA+Federation 的部署方案。也就是每个联合的 namenodes 都是 ha 的。</p><h1 id="HA方案之QJM"><a href="#HA方案之QJM" class="headerlink" title="HA方案之QJM"></a>HA方案之QJM</h1>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadopp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch的学习使用</title>
      <link href="2020/11/03/elasticsearch/elasticsearch/"/>
      <url>2020/11/03/elasticsearch/elasticsearch/</url>
      
        <content type="html"><![CDATA[<h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><p>当阅读本书时，将会遇到有关 Elasticsearch 分布式特性的补充章节。这些章节将介绍有关集群扩容、故障转移(<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distributed-cluster.html"><em>集群内的原理</em></a>) 、应对文档存储(<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distributed-docs.html"><em>分布式文档存储</em></a>) 、执行分布式搜索(<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distributed-search.html"><em>执行分布式检索</em></a>) ，以及分区（shard）及其工作原理(<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/inside-a-shard.html"><em>分片内部原理</em></a>) 。</p><p>这些章节并非必读，完全可以无需了解内部机制就使用 Elasticsearch，但是它们将从另一个角度帮助你了解更完整的 Elasticsearch 知识。可以根据需要跳过它们，或者想更完整地理解时再回头阅读也无妨。</p><h2 id="Elasticsearch是什么"><a href="#Elasticsearch是什么" class="headerlink" title="Elasticsearch是什么"></a>Elasticsearch是什么</h2><p>Elasticsearch 是一个开源的搜索引擎，建立在一个全文搜索引擎库 <a href="https://lucene.apache.org/core/">Apache Lucene™</a> 基础之上。 Lucene 可以说是当下最先进、高性能、全功能的搜索引擎库—无论是开源还是私有。</p><p>但是 Lucene 仅仅只是一个库。为了充分发挥其功能，你需要使用 Java 并将 Lucene 直接集成到应用程序中。 更糟糕的是，您可能需要获得信息检索学位才能了解其工作原理。Lucene <em>非常</em> 复杂。</p><p>Elasticsearch 不仅仅是 Lucene，并且也不仅仅只是一个全文搜索引擎。 它可以被下面这样准确的形容：</p><ul><li>一个分布式的实时文档存储，<em>每个字段</em> 可以被索引与搜索</li><li>一个分布式实时分析搜索引擎</li><li>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</li></ul><p>Elasticsearch 天生就是分布式的，并且在设计时屏蔽了分布式的复杂性。</p><p>Elasticsearch 在分布式方面几乎是透明的。教程中并不要求了解分布式系统、分片、集群发现或其他的各种分布式概念。</p><p>Elasticsearch 尽可能地屏蔽了分布式系统的复杂性。这里列举了一些在后台自动执行的操作：</p><ul><li>分配文档到不同的容器 或 <em>分片</em> 中，文档可以储存在一个或多个节点中</li><li>按集群节点来均衡分配这些分片，从而对索引和搜索过程进行负载均衡</li><li>复制每个分片以支持数据冗余，从而防止硬件故障导致的数据丢失</li><li>将集群中任一节点的请求路由到存有相关数据的节点</li><li>集群扩容时无缝整合新节点，重新分配分片以便从离群节点恢复</li></ul><h2 id="Elasticsearch-安装"><a href="#Elasticsearch-安装" class="headerlink" title="Elasticsearch 安装"></a>Elasticsearch 安装</h2><p>1、在安装好jdk8.0以上版本的情况下，上传elasticSearch的jar包，进行解压，<strong>解压到普通目录下，除了root目录</strong>。</p><p>2、修改配置文件config下面的elasticsearch.yml配置文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># ---------------------------------- Cluster -----------------------------------## Use a descriptive name for your cluster:#集群名称cluster.name: my-application## ------------------------------------ Node ------------------------------------## Use a descriptive name for the node:#指定当前节点名称node.name: node-1## Add custom attributes to the node:##node.attr.rack: r1# ---------------------------------- Network -----------------------------------## Set the bind address to a specific IP (IPv4 or IPv6):#当前节点地址network.host: 192.168.247.20## Set a custom port for HTTP:# 指定http访问端口(默认9200)http.port: 9200## For more information, consult the network module documentation.## --------------------------------- Discovery ----------------------------------## Pass an initial list of hosts to perform discovery when new node is started:# The default list of hosts is ["127.0.0.1", "[::1]"]#配置为集群中所有节点的ip地址discovery.zen.ping.unicast.hosts: ["Linux01", "Linux02","Linux03"]## Prevent the "split brain" by configuring the majority of nodes (total number of master-eligible nodes / 2 + 1):#配置集群节点数量(nodes/2+1)discovery.zen.minimum_master_nodes: 2## For more information, consult the zen discovery module documentation.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、创建新用户</p><pre class="line-numbers language-none"><code class="language-none">//因为es不能用root来开启，得新建立一个用户来开启esuseradd elkpasswd  elk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4、开放权限</p><pre class="line-numbers language-none"><code class="language-none">chmod -R 777 elasticsearch-6.2.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、所有机器切换用户elk到bin目录开启elasticSearch</p><pre class="line-numbers language-none"><code class="language-none">[root@Linux01 elasticsearch-6.2.4]# su elk[elk@Linux01 elasticsearch-6.2.4]#  bin/elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意：搭建集群如出现问题，请先删除data文件夹中内容，再启动集群</strong></p><p>6、查看结果</p><p>查看节点状态</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>192.168.247.20:9200<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查到以下内容则正常</p><pre class="line-numbers language-none"><code class="language-none">{  "name": "node-1",  "cluster_name": "my-application",  "cluster_uuid": "P6bOcKBgQ_61HKKgh5lNgA",  "version": {    "number": "6.2.4",    "build_hash": "ccec39f",    "build_date": "2018-04-12T20:37:28.497551Z",    "build_snapshot": false,    "lucene_version": "7.2.1",    "minimum_wire_compatibility_version": "5.6.0",    "minimum_index_compatibility_version": "5.0.0"  },  "tagline": "You Know, for Search"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看集群的状态</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//192.168.247.20:9200/_cluster/health<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查到以下内容则正常</p><pre class="line-numbers language-none"><code class="language-none">{    "cluster_name": "my-application",    "status": "green",    "timed_out": false,    "number_of_nodes": 3,    "number_of_data_nodes": 3,    "active_primary_shards": 10,    "active_shards": 20,    "relocating_shards": 0,    "initializing_shards": 0,    "unassigned_shards": 0,    "delayed_unassigned_shards": 0,    "number_of_pending_tasks": 0,    "number_of_in_flight_fetch": 0,    "task_max_waiting_in_queue_millis": 0,    "active_shards_percent_as_number": 100.0}//green：正常//  yellow: 集群正常 数据正常，部分副本不正常//  red: 集群部分正常，数据可能丢失，需要紧急修复<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装可能出现的问题"><a href="#安装可能出现的问题" class="headerlink" title="安装可能出现的问题"></a>安装可能出现的问题</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//www.dajiangtai.com/community/18136.do?origin=csdn-geek&amp;dt=1214<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Elasticsearch-请求语句的组成"><a href="#Elasticsearch-请求语句的组成" class="headerlink" title="Elasticsearch 请求语句的组成"></a>Elasticsearch 请求语句的组成</h2><p>一个 Elasticsearch 请求和任何 HTTP 请求一样由若干相同的部件组成：</p><pre class="line-numbers language-none"><code class="language-none">curl -X&lt;VERB&gt; '&lt;PROTOCOL&gt;://&lt;HOST&gt;:&lt;PORT&gt;/&lt;PATH&gt;?&lt;QUERY_STRING&gt;' -d '&lt;BODY&gt;'curl -XGET 'http://localhost:9200/_count?pretty' -d '{    "query": {        "match_all": {}    }}'Elasticsearch 返回一个 HTTP 状态码（例如：200 OK）和（除`HEAD`请求）一个 JSON 格式的返回值。前面的 curl 请求将返回一个像下面一样的 JSON 体：{    "count" : 0,    "_shards" : {        "total" : 5,        "successful" : 5,        "failed" : 0    }}在返回结果中没有看到 HTTP 头信息是因为我们没有要求`curl`显示它们。想要看到头信息，需要结合 -i 参数来使用 curl 命令：curl -i -XGET 'localhost:9200/'缩写格式:省略请求中所有相同的部分，例如主机名、端口号以及 curl 命令本身。而不是像下面显示的那样用一个完整的请求：curl -XGET 'localhost:9200/_count?pretty' -d '{    "query": {        "match_all": {}    }}'变成了GET /_count{    "query": {        "match_all": {}    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Elasticsearch-请求语句的参数"><a href="#Elasticsearch-请求语句的参数" class="headerlink" title="Elasticsearch 请求语句的参数"></a>Elasticsearch 请求语句的参数</h2><p>被 <code>&lt; &gt;</code> 标记的部件：</p><table><thead><tr><th><code>PROTOCOL</code></th><th><code>http</code> 或者 <code>https</code>（如果你在 Elasticsearch 前面有一个 <code>https</code> 代理）</th></tr></thead><tbody><tr><td><code>VERB</code></td><td>适当的 HTTP <em>方法</em> 或 <em>谓词</em> : <code>GET</code>、 <code>POST</code>、 <code>PUT</code>、 <code>HEAD</code> 或者 <code>DELETE</code>。</td></tr><tr><td><code>HOST</code></td><td>Elasticsearch 集群中任意节点的主机名，或者用 <code>localhost</code> 代表本地机器上的节点。</td></tr><tr><td><code>PORT</code></td><td>运行 Elasticsearch HTTP 服务的端口号，默认是 <code>9200</code> 。</td></tr><tr><td><code>PATH</code></td><td>API 的终端路径（例如 <code>_count</code> 将返回集群中文档数量）。Path 可能包含多个组件，例如：<code>_cluster/stats</code> 和 <code>_nodes/stats/jvm</code> 。</td></tr><tr><td><code>QUERY_STRING</code></td><td>任意可选的查询字符串参数 (例如 <code>?pretty</code> 将格式化地输出 JSON 返回值，使其更容易阅读)</td></tr><tr><td><code>BODY</code></td><td>一个 JSON 格式的请求体 (如果请求需要的话)</td></tr></tbody></table><h2 id="ES-基本概念"><a href="#ES-基本概念" class="headerlink" title="ES 基本概念"></a>ES 基本概念</h2><p><strong>1）节点（Node）</strong></p><p>运行了<strong>单个实例的ES主机称为节点</strong>，它是集群的一个成员，可以存储数据、参与集群索引及搜索操作。节点通过为其配置的ES集群名称确定其所要加入的集群。</p><p><strong>2）集群（cluster）</strong></p><p>ES可以作为一个独立的单个搜索服务器。不过，一般为了处理大型数据集，实现容错和高可用性，ES可以运行在许多互相合作的服务器上。这些服务器的集合称为集群。</p><p><strong>3）分片（Shard）</strong></p><p>ES的“分片(shard)”机制可将一个索引内部的数据分布地存储于多个节点，它通过<strong>将一个索引切分为多个</strong>底层物理的Lucene索引完成<strong>索引数据的分割存储</strong>功能，这每一个物理的Lucene索引称为一个分片(shard)。</p><p>这样的好处是可以<strong>把一个大的索引拆分成多个，分布到不同的节点上</strong>。降低单服务器的压力，构成分布式搜索，<strong>提高整体检索的效率（分片数的最优值与硬件参数和数据量大小有关）。</strong>分片的数量<strong>只能在索引创建前指定，并且索引创建后不能更改。</strong></p><p><strong>4）副本（Replica）</strong></p><p>副本是一个分片的<strong>精确复制</strong>，每个分片可以有零个或多个副本。副本的作用一是<strong>提高系统的容错性</strong>，当某个节点某个分片损坏或丢失时可以从副本中恢复。二是<strong>提高es的查询效率</strong>，es会自动对搜索请求进行负载均衡。</p><p>Elasticsearch中的每个索引默认分配5个主分片和1个副本</p><h2 id="面向文档"><a href="#面向文档" class="headerlink" title="面向文档"></a>面向文档</h2><p>在应用程序中对象很少只是一个简单的键和值的列表。通常，它们拥有更复杂的数据结构，可能包括日期、地理信息、其他对象或者数组等。</p><p>也许有一天你想把这些对象存储在数据库中。使用关系型数据库的行和列存储，这相当于是把一个表现力丰富的对象塞到一个非常大的电子表格中：为了适应表结构，你必须设法将这个对象扁平化—通常一个字段对应一列—而且每次查询时又需要将其重新构造为对象。</p><p>Elasticsearch 是 <em>面向文档</em> 的，意味着它存储整个对象或 <em>文档</em>。<strong>Elasticsearch 不仅存储文档，而且 <em>索引</em> 每个文档的内容，使之可以被检索。在 Elasticsearch 中，我们对文档进行索引、检索、排序和过滤—而不是对行列数据</strong>。这是一种完全不同的思考数据的方式，也是 Elasticsearch 能支持复杂全文检索的原因。</p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>Elasticsearch 使用 JavaScript Object Notation（或者 <a href="http://en.wikipedia.org/wiki/Json"><em>JSON</em></a>）作为文档的序列化格式。JSON 序列化为大多数编程语言所支持，并且已经成为 NoSQL 领域的标准格式</p><p>官方 <a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">Elasticsearch 客户端</a> 自动为您提供 JSON 转化。</p><p>一个 Elasticsearch 集群可以 包含多个 <em>索引</em> ，相应的每个索引可以包含多个 <em>类型</em> 。 这些不同的类型存储着多个 <em>文档</em> ，每个文档又有 多个 <em>属性</em> 。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><pre class="line-numbers language-none"><code class="language-none">核心数据类型字符串型：text、keyword数值型：long、integer、short、byte、double、float、half_float、scaled_float日期类型：date布尔类型：boolean二进制类型：binary范围类型：integer_range、float_range、long_range、double_range、date_range复杂数据类型数组类型：array对象类型：object嵌套类型：nested object地理位置数据类型geo_point(点)、geo_shape(形状)专用类型记录IP地址ip实现自动补全completion记录分词数：token_count记录字符串hash值 murmur3多字段特性multi-fields允许对同一个字段采用不同的配置，比如分词，例如对人名实现拼音搜索，只需要在人名中新增一个子字段为pinyin即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dynamic-严格性设置"><a href="#dynamic-严格性设置" class="headerlink" title="dynamic  严格性设置"></a>dynamic  严格性设置</h3><p>a.true：允许自动新增字段（默认的配置）<br>b.False：不允许自动新增字段，但是文档可以正常写入，无法对字段进行查询操作(可写不能查询)<br>c.strict：文档不能写入（如果写入会报错）</p><h3 id="数据类型text和keyword的区别"><a href="#数据类型text和keyword的区别" class="headerlink" title="数据类型text和keyword的区别"></a>数据类型text和keyword的区别</h3><p>text:text类型的字段值 保存入的数据会被进行分词处理<br>keyword:保存入的数据不会被分词处理</p><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>Elasticsearch 使用一种称为 <em>倒排索引</em> 的结构，它适用于快速的全文搜索。一个倒排索引由文档中所有不重复词的列表构成，对于其中每个词，有一个包含它的文档列表。</p><p>例如，假设我们有两个文档，每个文档的 <code>content</code> 域包含如下内容：</p><ol><li>The quick brown fox jumped over the lazy dog</li><li>Quick brown foxes leap over lazy dogs in summer</li></ol><p>为了创建倒排索引，我们首先将每个文档的 <code>content</code> 域拆分成单独的 词（我们称它为 <code>词条</code> 或 <code>tokens</code> ），创建一个包含所有不重复词条的排序列表，然后列出每个词条出现在哪个文档。结果如下所示：</p><pre class="line-numbers language-none"><code class="language-none">Term      Doc_1  Doc_2-------------------------Quick   |       |  XThe     |   X   |brown   |   X   |  Xdog     |   X   |dogs    |       |  Xfox     |   X   |foxes   |       |  Xin      |       |  Xjumped  |   X   |lazy    |   X   |  Xleap    |       |  Xover    |   X   |  Xquick   |   X   |summer  |       |  Xthe     |   X   |------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们想搜索 <code>quick brown</code> ，我们只需要查找包含每个词条的文档：</p><pre class="line-numbers language-none"><code class="language-none">Term      Doc_1  Doc_2-------------------------brown   |   X   |  Xquick   |   X   |------------------------Total   |   2   |  1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分析-的过程："><a href="#分析-的过程：" class="headerlink" title="分析 的过程："></a><em>分析</em> 的过程：</h2><ul><li>首先，将一块文本分成适合于倒排索引的独立的 <em>词条</em> ，</li><li>之后，将这些词条统一化为标准格式以提高它们的“可搜索性”，或者 <em>recall</em></li></ul><p>分析器执行上面的工作。 <em>分析器</em> 实际上是将三个功能封装到了一个包里：</p><ul><li><p><strong>字符过滤器</strong></p><p>首先，字符串按顺序通过每个 <em>字符过滤器</em> 。他们的任务是在分词前整理字符串。一个字符过滤器可以用来去掉HTML，或者将 <code>&amp;</code> 转化成 <code>and</code>。</p></li><li><p><strong>分词器</strong></p><p>其次，字符串被 <em>分词器</em> 分为单个的词条。一个简单的分词器遇到空格和标点的时候，可能会将文本拆分成词条。</p></li><li><p><strong>Token 过滤器</strong></p><p>最后，词条按顺序通过每个 <em>token 过滤器</em> 。这个过程可能会改变词条（例如，小写化 <code>Quick</code> ），删除词条（例如， 像 <code>a</code>， <code>and</code>， <code>the</code> 等无用词），或者增加词条（例如，像 <code>jump</code> 和 <code>leap</code> 这种同义词）。</p></li></ul><p>Elasticsearch提供了开箱即用的字符过滤器、分词器和token 过滤器。 这些可以组合起来形成自定义的分析器以用于不同的目的。我们会在 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/custom-analyzers.html">自定义分析器</a> 章节详细讨论。</p><h2 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h2><p>Elasticsearch还附带了可以直接使用的预包装的分析器。接下来我们会列出最重要的分析器。为了证明它们的差异，我们看看每个分析器会从下面的字符串得到哪些词条：</p><pre class="line-numbers language-none"><code class="language-none">"Set the shape to semi-transparent by calling set_trans(5)"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Standard（es默认）    支持多语言，按词切分并做小写处理<br>Simple    按照非字母切分，小写处理<br>Whitespace    按照空格来切分<br>Stop    去除语气助词，如the、an、的、这等<br>Keyword    不分词<br>Pattern    正则分词，默认\w+,即非字词符号做分割符<br>Language    常见语言的分词器（30+）</p><ul><li><p><strong>标准分析器</strong></p><p>标准分析器是Elasticsearch默认使用的分析器。它是分析各种语言文本最常用的选择。它根据 <a href="http://www.unicode.org/reports/tr29/">Unicode 联盟</a> 定义的 <em>单词边界</em> 划分文本。删除绝大部分标点。最后，将词条小写。它会产生<code>set, the, shape, to, semi, transparent, by, calling, set_trans, 5</code></p></li><li><p><strong>简单分析器</strong></p><p>简单分析器在任何不是字母的地方分隔文本，将词条小写。它会产生<code>set, the, shape, to, semi, transparent, by, calling, set, trans</code></p></li><li><p><strong>空格分析器</strong></p><p>空格分析器在空格的地方划分文本。它会产生<code>Set, the, shape, to, semi-transparent, by, calling, set_trans(5)</code></p></li><li><p><strong>语言分析器</strong></p><p>特定语言分析器可用于 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/analysis-lang-analyzer.html">很多语言</a>。它们可以考虑指定语言的特点。例如， <code>英语</code> 分析器附带了一组英语无用词（常用单词，例如 <code>and</code> 或者 <code>the</code> ，它们对相关性没有多少影响），它们会被删除。 由于理解英语语法的规则，这个分词器可以提取英语单词的 <em>词干</em> 。<code>英语</code> 分词器会产生下面的词条：<code>set, shape, semi, transpar, call, set_tran, 5</code>注意看 <code>transparent</code>、 <code>calling</code> 和 <code>set_trans</code> 已经变为词根格式。</p></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="添加内容"><a href="#添加内容" class="headerlink" title="添加内容"></a>添加内容</h3><pre class="line-numbers language-sense" data-language="sense"><code class="language-sense">PUT /megacorp/employee/1{    "first_name" : "John",    "last_name" :  "Smith",    "age" :        25,    "about" :      "I love to go rock climbing",    "interests": [ "sports", "music" ]}PUT /megacorp/employee/2{    "first_name" :  "Jane",    "last_name" :   "Smith",    "age" :         32,    "about" :       "I like to collect rock albums",    "interests":  [ "music" ]}PUT /megacorp/employee/3{    "first_name" :  "Douglas",    "last_name" :   "Fir",    "age" :         35,    "about":        "I like to build cabinets",    "interests":  [ "forestry" ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，路径 <code>/megacorp/employee/1</code> 包含了三部分的信息：</p><ul><li><p><strong><code>megacorp</code></strong></p><p>索引名称</p></li><li><p><strong><code>employee</code></strong></p><p>类型名称</p></li><li><p><strong><code>1</code></strong></p><p>特定雇员的ID</p></li></ul><p>请求体 —— JSON 文档 —— 包含了这位员工的所有详细信息，他的名字叫 John Smith ，今年 25 岁，喜欢攀岩。</p><h3 id="获取单条数据"><a href="#获取单条数据" class="headerlink" title="获取单条数据"></a>获取单条数据</h3><p>es查询方式都可以使用postman来进行访问</p><pre class="line-numbers language-sense" data-language="sense"><code class="language-sense">GET /megacorp/employee/1获取的值：{  "_index" :   "megacorp",  "_type" :    "employee",  "_id" :      "1",  "_version" : 1,  "found" :    true,  "_source" :  {      "first_name" :  "John",      "last_name" :   "Smith",      "age" :         25,      "about" :       "I love to go rock climbing",      "interests":  [ "sports", "music" ]  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询所有数据"><a href="#查询所有数据" class="headerlink" title="查询所有数据"></a>查询所有数据</h3><pre class="line-numbers language-sense" data-language="sense"><code class="language-sense">GET /megacorp/employee/_search<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，我们仍然使用索引库 megacorp 以及类型 employee，但与指定一个文档 ID 不同，这次使用 _search 。返回结果包括了所有三个文档，放在数组 hits 中。一个搜索默认返回十条结果。</p><pre class="line-numbers language-none"><code class="language-none">{   "took":      6,   "timed_out": false,   "_shards": { ... },   "hits": {      "total":      3,      "max_score":  1,      "hits": [         {            "_index":         "megacorp",            "_type":          "employee",            "_id":            "3",            "_score":         1,            "_source": {               "first_name":  "Douglas",               "last_name":   "Fir",               "age":         35,               "about":       "I like to build cabinets",               "interests": [ "forestry" ]            }         },         {            "_index":         "megacorp",            "_type":          "employee",            "_id":            "1",            "_score":         1,            "_source": {               "first_name":  "John",               "last_name":   "Smith",               "age":         25,               "about":       "I love to go rock climbing",               "interests": [ "sports", "music" ]            }         },         {            "_index":         "megacorp",            "_type":          "employee",            "_id":            "2",            "_score":         1,            "_source": {               "first_name":  "Jane",               "last_name":   "Smith",               "age":         32,               "about":       "I like to collect rock albums",               "interests": [ "music" ]            }         }      ]   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="轻量搜索-条件查询"><a href="#轻量搜索-条件查询" class="headerlink" title="轻量搜索-条件查询"></a>轻量搜索-条件查询</h3><p>这个方法一般涉及到一个 <em>查询字符串</em> （<em>query-string</em>） 搜索，因为我们通过一个URL参数来传递查询信息给搜索接口：</p><p>尝试下搜索姓氏为 <code>Smith</code> 的雇员：</p><p>就是查询后面加上?q=条件</p><pre class="line-numbers language-none"><code class="language-none">GET /megacorp/employee/_search?q=last_name:Smith<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">{   ...   "hits": {      "total":      2,      "max_score":  0.30685282,      "hits": [         {            ...            "_source": {               "first_name":  "John",               "last_name":   "Smith",               "age":         25,               "about":       "I love to go rock climbing",               "interests": [ "sports", "music" ]            }         },         {            ...            "_source": {               "first_name":  "Jane",               "last_name":   "Smith",               "age":         32,               "about":       "I like to collect rock albums",               "interests": [ "music" ]            }         }      ]   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询表达式-条件查询"><a href="#查询表达式-条件查询" class="headerlink" title="查询表达式-条件查询"></a>查询表达式-条件查询</h3><p>Query-string 搜索通过命令非常方便地进行临时性的即席搜索 ，但它有自身的局限性（参见 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/search-lite.html"><em>轻量</em> 搜索</a> ）。Elasticsearch 提供一个丰富灵活的查询语言叫做 <em>查询表达式</em> ， 它支持构建更加复杂和健壮的查询。</p><p><em>领域特定语言</em> （DSL）， 使用 JSON 构造了一个请求。我们可以像这样重写之前的查询所有名为 Smith 的搜索 ：    </p><pre class="line-numbers language-none"><code class="language-none">GET /megacorp/employee/_search{    "query" : {        "match" : {            "last_name" : "Smith"        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回结果与之前的查询一样，但还是可以看到有一些变化。其中之一是，不再使用 <em>query-string</em> 参数，而是一个请求体替代。这个请求使用 JSON 构造，并使用了一个 <code>match</code> 查询（属于查询类型之一，后面将继续介绍）。</p><h3 id="查询表达式-复杂查询"><a href="#查询表达式-复杂查询" class="headerlink" title="查询表达式-复杂查询"></a>查询表达式-复杂查询</h3><p>同样搜索姓氏为 Smith 的员工，但这次我们只需要年龄大于 30 的。查询需要稍作调整，使用过滤器 <em>filter</em> ，它支持高效地执行一个结构化查询。</p><pre class="line-numbers language-none"><code class="language-none">GET /megacorp/employee/_search{    "query" : {        "bool": {            "must": {                "match" : {                    "last_name" : "smith"                 }            },            "filter": {                "range" : {                    "age" : { "gt" : 30 }                 }            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了bool只要对应的，并且锁定age  的 range 是 gt 大于 30的 </p><pre class="line-numbers language-none"><code class="language-none">结果：{   ...   "hits": {      "total":      1,      "max_score":  0.30685282,      "hits": [         {            ...            "_source": {               "first_name":  "Jane",               "last_name":   "Smith",               "age":         32,               "about":       "I like to collect rock albums",               "interests": [ "music" ]            }         }      ]   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询表达式-全文搜索"><a href="#查询表达式-全文搜索" class="headerlink" title="查询表达式-全文搜索"></a>查询表达式-全文搜索</h3><p>搜索下所有喜欢攀岩（rock climbing）的员工：</p><pre class="line-numbers language-none"><code class="language-none">GET /megacorp/employee/_search{    "query" : {        "match" : {            "about" : "rock climbing"        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然我们依旧使用之前的 <code>match</code> 查询在<code>about</code> 属性上搜索 “rock climbing” 。得到两个匹配的文档：</p><pre class="line-numbers language-none"><code class="language-none">{   ...   "hits": {      "total":      2,      "max_score":  0.16273327,      "hits": [         {            ...            "_score":         0.16273327,             "_source": {               "first_name":  "John",               "last_name":   "Smith",               "age":         25,               "about":       "I love to go rock climbing",               "interests": [ "sports", "music" ]            }         },         {            ...            "_score":         0.016878016,             "_source": {               "first_name":  "Jane",               "last_name":   "Smith",               "age":         32,               "about":       "I like to collect rock albums",               "interests": [ "music" ]            }         }      ]   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找出一个属性中的独立单词是没有问题的，但有时候想要精确匹配一系列单词或者<em>短语</em> 。 比如， 我们想执行这样一个查询，仅匹配同时包含 “rock” <em>和</em> “climbing” ，<em>并且</em> 二者以短语 “rock climbing” 的形式紧挨着的雇员记录。</p><h3 id="查询表达式-短语搜索"><a href="#查询表达式-短语搜索" class="headerlink" title="查询表达式-短语搜索"></a>查询表达式-短语搜索</h3><p>短语就是指把查询的多个词看成一个整体来查询</p><p>找出一个属性中的独立单词是没有问题的，但有时候想要精确匹配一系列单词或者<em>短语</em> 。 比如， 我们想执行这样一个查询，仅匹配同时包含 “rock” <em>和</em> “climbing” ，<em>并且</em> 二者以短语 “rock climbing” 的形式紧挨着的雇员记录。</p><p>为此对 <code>match</code> 查询稍作调整，使用一个叫做 <code>match_phrase</code> 的查询：</p><pre class="line-numbers language-sense" data-language="sense"><code class="language-sense">GET /megacorp/employee/_search{    "query" : {        "match_phrase" : {            "about" : "rock climbing"        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">结果：{   ...   "hits": {      "total":      1,      "max_score":  0.23013961,      "hits": [         {            ...            "_score":         0.23013961,            "_source": {               "first_name":  "John",               "last_name":   "Smith",               "age":         25,               "about":       "I love to go rock climbing",               "interests": [ "sports", "music" ]            }         }      ]   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询表达式-高亮搜索"><a href="#查询表达式-高亮搜索" class="headerlink" title="查询表达式-高亮搜索"></a>查询表达式-高亮搜索</h3><p>许多应用都倾向于在每个搜索结果中 <em>高亮</em> 部分文本片段，以便让用户知道为何该文档符合查询条件。在 Elasticsearch 中检索出高亮片段也很容易。</p><p>再次执行前面的查询，并增加一个新的 <code>highlight</code> 参数：</p><pre class="line-numbers language-none"><code class="language-none">GET /megacorp/employee/_search{    "query" : {        "match_phrase" : {            "about" : "rock climbing"        }    },    "highlight": {        "fields" : {            "about" : {}        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当执行该查询时，返回结果与之前一样，与此同时结果中还多了一个叫做 <code>highlight</code> 的部分。这个部分包含了 <code>about</code> 属性匹配的文本片段，并以 HTML 标签 <code>&lt;em&gt;&lt;/em&gt;</code> 封装：</p><pre class="line-numbers language-none"><code class="language-none">结果：{   ...   "hits": {      "total":      1,      "max_score":  0.23013961,      "hits": [         {            ...            "_score":         0.23013961,            "_source": {               "first_name":  "John",               "last_name":   "Smith",               "age":         25,               "about":       "I love to go rock climbing",               "interests": [ "sports", "music" ]            },            "highlight": {               "about": [                  "I love to go &lt;em&gt;rock&lt;/em&gt; &lt;em&gt;climbing&lt;/em&gt;"                ]            }         }      ]   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询表达式-聚合"><a href="#查询表达式-聚合" class="headerlink" title="查询表达式-聚合"></a>查询表达式-聚合</h3><p>支持管理者对员工目录做分析。 Elasticsearch 有一个功能叫聚合（aggregations），允许我们基于数据生成一些精细的分析结果。聚合与 SQL 中的 <code>GROUP BY</code> 类似但更强大。</p><pre class="line-numbers language-none"><code class="language-none">GET /megacorp/employee/_search{  "aggs": {    "all_interests": {      "terms": { "field": "interests" }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">结果：{   ...   "hits": { ... },   "aggregations": {      "all_interests": {         "buckets": [            {               "key":       "music",               "doc_count": 2            },            {               "key":       "forestry",               "doc_count": 1            },            {               "key":       "sports",               "doc_count": 1            }         ]      }   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，两位员工对音乐感兴趣，一位对林业感兴趣，一位对运动感兴趣。这些聚合的结果数据并非预先统计，而是根据匹配当前查询的文档即时生成的。</p><h3 id="查询表达式-组合查询"><a href="#查询表达式-组合查询" class="headerlink" title="查询表达式-组合查询"></a>查询表达式-组合查询</h3><p>如果想知道叫 Smith 的员工中最受欢迎的兴趣爱好，可以直接构造一个组合查询：</p><pre class="line-numbers language-none"><code class="language-none">GET /megacorp/employee/_search{  "query": {    "match": {      "last_name": "smith"    }  },  "aggs": {    "all_interests": {      "terms": {        "field": "interests"      }     }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>all_interests</code> 聚合已经变为只包含匹配查询的文档：</p><pre class="line-numbers language-none"><code class="language-none">结果：...  "all_interests": {     "buckets": [        {           "key": "music",           "doc_count": 2        },        {           "key": "sports",           "doc_count": 1        }     ]  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新增索引"><a href="#新增索引" class="headerlink" title="新增索引"></a>新增索引</h3><pre class="line-numbers language-none"><code class="language-none">PUT index_name/?prettycurl -XPUT '192.168.247.20:9200/index_name?pretty'//例子://在创建索引时还可以设置默认的分片数量、备份数量和刷新的秒数curl -XPUT 'http://192.168..247.20:9200/index_name?pretty' -H 'Content-Type: application/json' -d'{"settings" : {    "number_of_shards":8,    "number_of_replicas" : 1,    "refresh_interval":"30s"    }   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><pre class="line-numbers language-none"><code class="language-none">curl -XDELETE '192.168.247.20:9200/index_name?pretty'DELETE index_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h2 id="相关性得分"><a href="#相关性得分" class="headerlink" title="相关性得分"></a>相关性得分</h2><p>Elasticsearch 默认按照相关性得分排序，即每个文档跟查询的匹配程度。第一个最高得分的结果很明显：John Smith 的 <code>about</code> 属性清楚地写着 “rock climbing” 。</p><p>但为什么 Jane Smith 也作为结果返回了呢？原因是她的 <code>about</code> 属性里提到了 “rock” 。因为只有 “rock” 而没有 “climbing” ，所以她的相关性得分低于 John 的。</p><p>这是一个很好的案例，阐明了 Elasticsearch 如何 <em>在</em> 全文属性上搜索并返回相关性最强的结果。Elasticsearch中的 <em>相关性</em> 概念非常重要，也是完全区别于传统关系型数据库的一个概念，数据库中的一条记录要么匹配要么不匹配。</p><h1 id="常用搜索引擎框架"><a href="#常用搜索引擎框架" class="headerlink" title="常用搜索引擎框架"></a>常用搜索引擎框架</h1><p>1、<strong>Lucene</strong></p><p>Apache下面的一个开源项目，高性能的、可扩展的工具库，提供搜索的基本架构，如果开发人员需用使用的话，需用自己进行开发,成本比较大，但是性能高</p><p>2、<strong>Solr</strong></p><p>Solr基于Lucene的全文搜索框架，提供了比Lucene更为丰富的功能，同时实现了可配置、可扩展并对查询性能进行了优化<br>建立索引时，搜索效率下降，实时索引搜索效率不高<br>数据量的增加，Solr的搜索效率会变得更低,适合小的搜索应用，对应java客户端的是solrj</p><p>3、<strong>ElasticSearch</strong></p><p>基于Lucene的搜索框架, 它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口<br>上手容易，拓展节点方便，可用于存储和检索海量数据，接近实时搜索，海量数据量增加，搜索响应性能几乎不受影响，分布式搜索框架，自动发现节点，副本机制，保障可用性</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flume</title>
      <link href="2020/11/03/flume/flume/"/>
      <url>2020/11/03/flume/flume/</url>
      
        <content type="html"><![CDATA[<h3 id="Flume是什么"><a href="#Flume是什么" class="headerlink" title="Flume是什么"></a>Flume是什么</h3><p>是cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统</p><p>日志收集</p><p>数据处理</p><h4 id="什么要用flume"><a href="#什么要用flume" class="headerlink" title="什么要用flume"></a>什么要用flume</h4><p>将客户端的请求经过负载均衡，写入到日志文件中，<strong>通过flume采集日志放到flume中，监控变化</strong>，etl对hdfs中的日志数据进行清洗和转换，然后可以放入到hbase或hive中，统计数据的结果(mr,spark,flink)，结果经过sqoop放入到MySQL(mongodb,redis)中，返回给客户端进行展示结果</p><h4 id="高可靠性"><a href="#高可靠性" class="headerlink" title="高可靠性"></a>高可靠性</h4><p>当节点出现故障时，日志能被传送到其他节点上而不会丢失</p><p>三种级别的可靠性保障，从强到弱排序</p><p>end-to-end （收到数据agent首先将event写到磁盘上，当数据传送成功后，再删除，如果数据发送失败，可以重新发送）</p><p>Store on failure（这也是scribe采用的策略，当数据接收方crash时，将数据写到本地，待恢复后，继续发送）</p><p>Best effort（数据发送到接收方后，不会进行确认）</p><h3 id="安装flume"><a href="#安装flume" class="headerlink" title="安装flume"></a>安装flume</h3><p>1、上传flume的tar包</p><p>2、解压tar包</p><pre class="line-numbers language-none"><code class="language-none">tar -zxvf apache-fluem....<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、配置etc环境变量</p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME=/root/Downloads/jdk1.8.0_161export PATH=$PATH:$JAVA_HOME/binexport HADOOP_HOME=/root/Downloads/hadoop-2.6.5export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbinexport ZOOKEEPER_HOME=/root/Downloads/zookeeper-3.4.5export PATH=$PATH:$ZOOKEEPER_HOME/binexport HIVE_HOME=/root/Downloads/apache-hive-1.2.0-binexport PATH=$PATH:$HIVE_HOME/binexport FLUME_HOME=/root/Downloads/apache-flume-1.6.0-binexport PATH=$PATH:$FLUME_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、刷新配置文件</p><pre class="line-numbers language-none"><code class="language-none">source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、验证是否成功</p><pre class="line-numbers language-none"><code class="language-none">flume-ng version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、更改flume的conf下的flume-env.sh</p><p>主要设置JAVA_HOME的变量设置(带env的都是组件的运行环境配置)</p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME=/root/Downloads/jdk1.8.0_161<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="flume的版本"><a href="#flume的版本" class="headerlink" title="flume的版本"></a>flume的版本</h3><p>flume的逻辑分三层架构</p><p>agent,collector,storage</p><h4 id="flume-og"><a href="#flume-og" class="headerlink" title="flume og"></a>flume og</h4><p>og采用了多mast的方式，保证数据一致性而引入了zookeeper，保存配置数据，zookeeper本身可以保证配置数据地一致性和高可用，发生变化zookeeper通知flume master 节点，master间使用gossip协议同步数据</p><h5 id="flume-og的特点"><a href="#flume-og的特点" class="headerlink" title="flume og的特点"></a>flume og的特点</h5><p>三种角色</p><p>代理节点（agent）、收集节点（collector）、主节点（master）</p><p>agent从各个数据源收集日志数据，将收集到的数据集中到collector，然后手机节点汇总hdfs。master负责管理agent，collector的活动</p><p>agent、collector都成为node，node角色根据配置的不同分为logical node（逻辑节点）、physical node（物理节点）</p><p>agent、collector由source、sink组成，代表在当前节点数据是从source传送到sink</p><h4 id="flume-ng"><a href="#flume-ng" class="headerlink" title="flume ng"></a>flume ng</h4><p>ng取消了集中管理配置的zookeeper和master，是一个纯粹的传输工具。</p><p>flume ng的另一个不同点是读入数据和写出数据由不同的工作线程处理(称为runner).在flume ng中读入线程同样做写出工作（除了故障重试），如果写出速度太慢的话（不是完全失败），他将阻塞flume接收数据的能力。这种异步的设计使读入线程可以顺畅的工作，而无需关注下游的任何问题</p><h5 id="flume-ng的特点"><a href="#flume-ng的特点" class="headerlink" title="flume ng的特点"></a>flume ng的特点</h5><p>只有一种角色</p><p>代理节点（agent）</p><p>没有collector、master节点，这是最核心的变化</p><p>去除了physical nodes(物理节点)、logical nodes(逻辑节点)的概念和相关内容</p><p>agent节点的组成也发生了变化，flume ng的agent由source、sink、Channel组成</p><h4 id="Flume-逻辑上分三层架构"><a href="#Flume-逻辑上分三层架构" class="headerlink" title="Flume 逻辑上分三层架构"></a>Flume 逻辑上分三层架构</h4><p>Agent，collector，storage</p><p>Agent<br>用于采集数据，agent 是 flume 中存储数据流的地方，同时 agent 会将产生的数据传输到 collector<br>Coolector<br>Collector 的作用是坚多个 agent 的数据汇总后，加载到 storage 中，多个 collector 之间遵循负载均衡规则<br>Storage<br>Storage 是存储系统，可以是一个普通 file，也可以是 HDFS，HIVE，Hbase 等。<br>————————————————<br>版权声明：本文为CSDN博主「郑斯道」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/zhengshidao/article/details/78312299">https://blog.csdn.net/zhengshidao/article/details/78312299</a></p><h4 id="flume-ng-的组件"><a href="#flume-ng-的组件" class="headerlink" title="flume ng 的组件"></a>flume ng 的组件</h4><h5 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h5><p>flume以agent是flume的最小执行单位。一个agent就是一个jvm，单个agent由source、sink和channel三大组件构成，agent是产生数据流的地方</p><p><img src="/2020/11/03/flume/flume/999804-20171108130603872-780242084.png" alt="img"></p><h6 id="1、source（单线程）"><a href="#1、source（单线程）" class="headerlink" title="1、source（单线程）"></a>1、source（单线程）</h6><p>完成对日志数据的采集，分成transtion和event打入channel</p><p>Event： 一个数据单元，消息头和消息体组成。（Events可以是日志记录、 avro 对象等。）</p><p><img src="/2020/11/03/flume/flume/999804-20171108130931325-512757774.png" alt="img"></p><h6 id="source-avro-类型"><a href="#source-avro-类型" class="headerlink" title="source  avro 类型"></a>source  avro 类型</h6><p>avro是监控的本地文件</p><p>vim avro.conf</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">a1.sources = r1a1.sinks = k1a1.channels = c1#取个别名a1.sources.r1.type = avroa1.sources.r1.bind = localhosta1.sources.r1.port = 6666#类型、地址、端口号，端口号只要不被占用就好a1.sinks.k1.type = logger#sink的类型时logger(不产生实体文件，只在控制台打印)a1.channels.c1.type = memorya1.channels.c1.capacity = 1000#channel最大存储event的数量是1000a1.channels.c1.transactionCapacity = 100#每次送到sink的event数量是100a1.sources.r1.channels = c1a1.sinks.k1.channel = c1                 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动命令</p><pre class="line-numbers language-none"><code class="language-none">flume-ng agent -n a1 -c . -f avro.conf -Dflume.root.logger=INFO,console#-c配置文件的所在位置#-fflume定义组件的配置文件#-n启动agent的名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>监控文件</p><pre class="line-numbers language-none"><code class="language-none">flume-ng avro-client -c /root/Downloads/apache-flume-1.6.0-bin/conf -H linux01 -p 6666 -F /ssss.txt#avro-client   数据远程发送到客户端#-c   flume启动所依赖的配置文件的目录#-H   指定主机#-p   端口号#-F   指定要发送的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行追加数据来测试是否成功</p><pre class="line-numbers language-none"><code class="language-none">echo adf &gt;&gt; /ssss.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="source-exec"><a href="#source-exec" class="headerlink" title="source  exec"></a>source  exec</h6><p>exec是监控指定文件，是一个单线程的，只能监控一个文件</p><p>不支持断点续传，需要手动生成一个索引文件来实现断点续传</p><p>vim file_exec.conf</p><pre class="line-numbers language-none"><code class="language-none">a1.sources=r1a1.sinks=k1a1.channels=c1a1.sources.r1.type=execa1.sources.r1.command=tail -f /root/ssss.txt#tail -f 是命令的结果，不是文件的变化a1.channels.c1.type=memorya1.channels.c1.capacity=1000a1.channels.c1.transactionCapacity=100a1.sinks.k1.type=loggera1.sources.r1.channels=c1a1.sinks.k1.channel=c1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动命令</p><pre class="line-numbers language-none"><code class="language-none">flume-ng agent -n a1 -c . -f file_exec.conf -Dflume.root.logger=INFO,console#-c配置文件的所在位置#-fflume定义组件的配置文件#-n启动agent的名称#Dflume.root.logger 设置日志等级 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在启动或因为已经在配置文件中设置好监控文件，直接进行测试即可</p><pre class="line-numbers language-none"><code class="language-none">echo adf &gt;&gt; /ssss.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="source-tcp"><a href="#source-tcp" class="headerlink" title="source tcp"></a>source tcp</h6><p>读取日志文件产生event，支持tcp和udp两种协议</p><p>vim tcp.conf</p><pre class="line-numbers language-none"><code class="language-none">a1.sources = r1a1.sinks = k1a1.channels = c1a1.sources.r1.type = syslogtcpa1.sources.r1.bind = localhosta1.sources.r1.port = 6666a1.sinks.k1.type = loggera1.channels.c1.type = memorya1.channels.c1.capacity = 1000a1.channels.c1.transactionCapacity = 100a1.sources.r1.channels = c1a1.sinks.k1.channel = c1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动命令</p><pre class="line-numbers language-none"><code class="language-none">flume-ng agent -n a1 -c . -f tcp.conf -Dflume.root.logger=INFO,console#-c配置文件的所在位置#-fflume定义组件的配置文件#-n启动agent的名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>tcp在测试时，需要安装nc的rpm包</p><pre class="line-numbers language-none"><code class="language-none">rpm -ivh nc-1.84-22....<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-none"><code class="language-none">nc localhost 6666#跟上面配置文件中端口号一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="source-http"><a href="#source-http" class="headerlink" title="source http"></a>source http</h6><p> HTTP post或get方式的数据源，支持json、blob表示形式</p><p>vim http.conf</p><pre class="line-numbers language-none"><code class="language-none">a1.sources = r1a1.sinks = k1a1.channels = c1a1.sources.r1.type = org.apache.flume.source.http.HTTPSourcea1.sources.r1.port = 6666a1.sinks.k1.type = loggera1.channels.c1.type = memorya1.channels.c1.capacity = 1000a1.channels.c1.transactionCapacity = 100a1.sources.r1.channels = c1a1.sinks.k1.channel = c1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行测试</p><pre class="line-numbers language-none"><code class="language-none">curl -X post -d '[{"headers":{"a1":"a"},"body":"i am a log"}]' linux01:6666<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果显示</p><p><img src="/2020/11/03/flume/flume/1568806782986.png" alt="1568806782986"></p><h6 id="source-spooldir"><a href="#source-spooldir" class="headerlink" title="source spooldir"></a>source spooldir</h6><p>监控目录下的文件变化，一次性，在采集后不可修改，文件后缀名变为.COMPLETED，此时不能再对文件内容进行改变，否则flume会抛出异常</p><p>即spool source类型只适合采集一次写入。<strong>不支持断点续传</strong></p><p>vim spool.conf</p><pre class="line-numbers language-none"><code class="language-none">a1.sources = r1a1.sinks = k1a1.channels = c1a1.sources.r1.type = spooldira1.sources.r1.spoolDir=/flumee#在此指定的文件夹必须存在a1.sources.r1.fileHeader=truea1.sinks.k1.type = loggera1.channels.c1.type = memorya1.channels.c1.capacity = 1000a1.channels.c1.transactionCapacity = 100a1.sources.r1.channels = c1a1.sinks.k1.channel = c1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动</p><pre class="line-numbers language-none"><code class="language-none">mkdir /flumee//创建文件夹flume-ng agent -n a1 -c . -f spool.conf -Dflume.root.logger=INFO,console#-c配置文件的所在位置#-fflume定义组件的配置文件#-n启动agent的名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><p>在配置文件中指定的文件夹中修改文件就会触发监控</p><h6 id="source-Taildir"><a href="#source-Taildir" class="headerlink" title="source Taildir"></a>source Taildir</h6><p>flume1.7才出来的，建议用1.8，1.8修复了一个taildirsource的bug</p><p><strong>taildirsouce可以自动保存处理出局的偏移量，支持断点续传，还可以同时监控多个目录，是多线程的</strong></p><h5 id="2、channel（缓存区，一次性）"><a href="#2、channel（缓存区，一次性）" class="headerlink" title="2、channel（缓存区，一次性）"></a>2、channel（缓存区，一次性）</h5><p>主要提供队列功能，对source提供的数据进行简单的缓存，是连接Source和Sink的组件</p><p>可以把Channel看作是一个缓冲区，它将保存事件直到Sink处理完该事件。</p><p><img src="/2020/11/03/flume/flume/999804-20171108131248653-2068131817.png" alt="img"></p><h6 id="channel-memory-类型-常用"><a href="#channel-memory-类型-常用" class="headerlink" title="channel memory 类型(常用)"></a>channel memory 类型(常用)</h6><pre class="line-numbers language-none"><code class="language-none">a1.sources = r1a1.sinks = k1a1.channels = c1#取个别名a1.sources.r1.type = avroa1.sources.r1.bind = localhosta1.sources.r1.port = 6666#类型、地址、端口号，端口号只要不被占用就好a1.sinks.k1.type = loggera1.channels.c1.type = memorya1.channels.c1.capacity = 1000#一次输入的容量a1.channels.c1.transactionCapacity = 100#事务的一次输出量a1.sources.r1.channels = c1a1.sinks.k1.channel = c1    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="channel-file"><a href="#channel-file" class="headerlink" title="channel file"></a>channel file</h6><p>数据保存在磁盘中,一般用这个，不用memory，memory不安全还占资源</p><p>vim file-channel.conf</p><pre class="line-numbers language-none"><code class="language-none">a1.sources = r1a1.sinks = k1a1.channels = c1a1.sources.r1.type = spooldira1.sources.r1.spoolDir=/flumeea1.sinks.k1.type = loggera1.channels.c1.type = filea1.channels.c1.dataDir=/flumedata#数据存储的文件夹a1.channels.c1.checkpointDir=/flumecke#检查点的目录## 下面的配置不要产生大量小文件a1.channels.c1.maxFileSize = 2146435071  #存储的最大文件的大小a1.channels.c1.capacity = 1000000   #缓存的容量a1.sources.r1.channels = c1a1.sinks.k1.channel = c1 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="channel-file的优化"><a href="#channel-file的优化" class="headerlink" title="channel file的优化"></a>channel file的优化</h6><p>1）通过配置dataDirs指向多个路径，每个路径对应不同的硬盘，增大Flume吞吐量。</p><p>2）checkpointDir和backupCheckpointDir也尽量配置在不同硬盘对应的目录中，保证checkpoint坏掉后，可以快速使用backupCheckpointDir恢复数据</p><h6 id="channel-kafka"><a href="#channel-kafka" class="headerlink" title="channel kafka"></a>channel kafka</h6><p>直接往kafka中放入数据，省去了sink，提高了效率</p><h6 id="FileChannel和MemoryChannel区别"><a href="#FileChannel和MemoryChannel区别" class="headerlink" title="FileChannel和MemoryChannel区别"></a>FileChannel和MemoryChannel区别</h6><p>MemoryChannel传输数据速度更快，但因为数据保存在JVM的堆内存中，Agent进程挂掉会导致数据丢失，适用于对数据质量要求不高的需求。</p><p>FileChannel传输速度相对于Memory慢，但数据安全保障高，Agent进程挂掉也可以从失败中恢复数据。</p><h5 id="3、sink（单线程）"><a href="#3、sink（单线程）" class="headerlink" title="3、sink（单线程）"></a>3、sink（单线程）</h5><p>取出channel的数据，进行相应的存储文件系统，数据库，或者提交到远程服务器</p><p>Sink负责持久化日志或者把事件推向另一个Source。</p><p><img src="/2020/11/03/flume/flume/999804-20171108131516809-1930573599.png" alt="img"></p><h6 id="sink-hdfs"><a href="#sink-hdfs" class="headerlink" title="sink hdfs"></a>sink hdfs</h6><p>生成的监控文件在hdfs中，在浏览器中 linux:50070  来查看结果，hdfs dfs -text 路径  查看数据</p><p>vim hdfs-sink.conf </p><pre class="line-numbers language-none"><code class="language-none">@sink必配项a1.sources=r1a1.sinks=k1@a1.channels=c1a1.sources.r1.type=spooldira1.sources.r1.spoolDir=/flumeea1.sources.r1.fileHeader=truea1.channels.c1.type=filea1.channels.c1.checkpointDir=/flume_checkpointa1.channels.c1.dataDir=/flume_data@a1.sinks.k1.type=hdfs@a1.sinks.k1.hdfs.path = hdfs://linux01:9000/flumehhaaa1.sinks.k1.hdfs.filePrefix = 1811Aa1.sinks.k1.hdfs.round = truea1.sinks.k1.hdfs.roundValue = 1a1.sinks.k1.hdfs.roundUnit = minutea1.sinks.k1.hdfs.fileType=DataStreama1.sinks.k1.hdfs.writeFormat=Text##下面这3个是文件夹下的文件的控制，谁先满足按谁来#这三个属性一定要配a1.sinks.k1.hdfs.rollInterval=0a1.sinks.k1.hdfs.rollSize=1024a1.sinks.k1.hdfs.rollCountw=0a1.sinks.k1.hdfs.idleTimeout=30type        sinks的类型#path hdfs://linux01:9000/flumehaha  HDFS路径#filePrefix 保存数据文件的前缀名#round是否启用时间上的”舍弃”#roundvalue时间上进行“舍弃”的值#roundunit时间上进行”舍弃”的单位，包含：second,minute,hour#filetype  文件格式，包括：SequenceFile, DataStream,CompressedStre，#writeformat  写 sequence 文件的格式。包含：Text, Writable（默认）#rollinterval  间隔多长将临时文件滚动成最终目标文件，单位：秒,正常一个小时，0就是不使用这个策略。#rollsize    当临时文件达到多少（单位：bytes）时，滚动成目标文件，0就是不使用这个策略。#rolllcount   当events数据达到该数量时候，将临时文件滚动成目标文件，0就是不使用这个策略。#idleTimeout   当目前被打开的临时文件在该参数指定的时间（秒）内，没有任何数据写入，则将该临时文件关闭并重命名成目标文件(闲置N秒后，关闭当前文件（去掉.tmp后缀）)a1.sources.r1.channels=c1a1.sinks.k1.channel=c1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动</p><pre class="line-numbers language-none"><code class="language-none">flume-ng agent -n a1 -c . -f hdfs-sink.conf -Dflume.root.logger=info,console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="sink-file"><a href="#sink-file" class="headerlink" title="sink file"></a>sink file</h6><p>存储数据到本地文件系统</p><p>vim file-sink.conf</p><pre class="line-numbers language-none"><code class="language-none">a1.sources=r1a1.sinks=k1a1.channels=c1a1.sources.r1.type=spooldira1.sources.r1.spoolDir=/flumeea1.channels.c1.type=memorya1.channels.c1.capacity=1000a1.channels.c1.transactionCapacity=100a1.sinks.k1.type=file_rolla1.sinks.k1.sink.directory=/flog#flog文件夹必须存在，建空文件存放在此目录下a1.sinks.k1.sink.serializer=TEXT#序列化器  输出的格式时texta1.sources.r1.channels=c1a1.sinks.k1.channel=c1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动</p><pre class="line-numbers language-none"><code class="language-none">flume-ng agent -n a1 -c . -f file-sink.conf -Dflume.root.logger=info,console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="sink-avro"><a href="#sink-avro" class="headerlink" title="sink avro"></a>sink avro</h6><p>vim ftof-sink.conf</p><pre class="line-numbers language-none"><code class="language-none">a1.sources=r1a1.sinks=k1a1.channels=c1a1.sources.r1.type=spooldira1.sources.r1.spoolDir=/flume_loga1.channels.c1.type=memorya1.channels.c1.capacity=1000a1.channels.transactionCapacity=100a1.sinks.k1.type=avroa1.sinks.k1.hostname=192.168.130.107a1.sinks.k1.port=8888a1.sources.r1.channels=c1a1.sinks.k1.channel=c1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动</p><pre class="line-numbers language-none"><code class="language-none">flume-ng agent -n a1 -c . -f ftof-sink.conf -Dflume.root.logger=info,console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="sink-HDFS存入大量小文件，有什么影响？"><a href="#sink-HDFS存入大量小文件，有什么影响？" class="headerlink" title="sink HDFS存入大量小文件，有什么影响？"></a>sink HDFS存入大量小文件，有什么影响？</h6><p><strong>元数据层面：</strong>每个小文件都有一份元数据，其中包括文件路径，文件名，所有者，所属组，权限，创建时间等，这些信息都保存在Namenode内存中。所以小文件过多，会占用Namenode服务器大量内存，影响Namenode性能和使用寿命.</p><p><strong>计算层面：</strong>默认情况下MR会对每个小文件启用一个Map任务计算，非常影响计算性能。同时也影响磁盘寻址时间。</p><h6 id="sink-hdfs怎么防止写入大量小文件？"><a href="#sink-hdfs怎么防止写入大量小文件？" class="headerlink" title="sink hdfs怎么防止写入大量小文件？"></a>sink hdfs怎么防止写入大量小文件？</h6><p>官方默认的这三个参数配置写入HDFS后会产生小文件，hdfs.rollInterval、hdfs.rollSize、hdfs.rollCount</p><p>基于以上hdfs.rollInterval=3600，hdfs.rollSize=134217728，hdfs.rollCount =0（event个数），hdfs.roundValue=10，hdfs.roundUnit= second（这两个是控制目录）几个参数综合作用，效果如下：</p><p>（1）tmp文件在达到128M时会滚动生成正式文件</p><p>（2）tmp文件创建超10秒时会滚动生成正式文件</p><p>举例：在2018-01-01 05:23的时侯sink接收到数据，那会产生如下tmp文件：</p><p>/home/20180101/admin.201801010520.tmp 时间到了 把tmp去掉 </p><p>即使文件内容没有达到128M，也会在05:33时滚动生成正式文件</p><h4 id="分布式flume配置"><a href="#分布式flume配置" class="headerlink" title="分布式flume配置"></a>分布式flume配置</h4><p>linux01节点的flume负责拉取webserver数据，同时发送给linux02和linux03节点，03  04节点flume接收到linux01的数据并将数据以日志的形式下沉到各自的控制台</p><h6 id="linux01配置文件"><a href="#linux01配置文件" class="headerlink" title="linux01配置文件"></a>linux01配置文件</h6><pre class="line-numbers language-none"><code class="language-none">a1.sources=r1a1.channels=c1 c2a1.sinks=k1 k2a1.sources.r1.type=execa1.sources.r1.command=tail -F /aa.txta1.channels.c1.type=memorya1.channels.c1.capacity=1000a1.channels.c1.transactionCapacity=100a1.channels.c2.type=memorya1.channels.c2.capacity=1000a1.channels.c2.transactionCapacity=100a1.sinks.k1.type=avroa1.sinks.k1.hostname=linux02a1.sinks.k1.port=6666a1.sinks.k2.type=avroa1.sinks.k2.hostname=linux03a1.sinks.k2.port=6665a1.sources.r1.channels=c1 c2a1.sinks.k1.channel=c1a1.sinks.k2.channel=c2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="linux02配置文件"><a href="#linux02配置文件" class="headerlink" title="linux02配置文件"></a>linux02配置文件</h6><pre class="line-numbers language-none"><code class="language-none">a1.sources=r1a1.channels=c1a1.sinks=k1a1.sources.r1.type=avroa1.sources.r1.bind=linux02a1.sources.r1.port=6666a1.channels.c1.type=memorya1.channels.c1.capacity=1000a1.channels.c1.transactionCapacity=100a1.sinks.k1.type=loggera1.sources.r1.channels=c1a1.sinks.k1.channel=c1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="linux03配置文件"><a href="#linux03配置文件" class="headerlink" title="linux03配置文件"></a>linux03配置文件</h6><pre class="line-numbers language-none"><code class="language-none">a1.sources=r1a1.channels=c1a1.sinks=k1a1.sources.r1.type=avroa1.sources.r1.bind=linux03a1.sources.r1.port=6665a1.channels.c1.type=memorya1.channels.c1.capacity=1000a1.channels.c1.transactionCapacity=100a1.sinks.k1.type=loggera1.sources.r1.channels=c1a1.sink.k1.channel=c1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先启动linux02和linux03，然后再启动linux01</p><pre class="line-numbers language-none"><code class="language-none">flume-ng agent -n a1 -c . -f ftof-sink.conf -Dflume.root.logger=INFO,console//-c  配置文件的位置//-f  flume定义组件的配置文件名//-n  启动agent的名称 该名称在配置文件中定义//-Dflume.root.logger 信息打印到控制台<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在linux01中追加数据，linux02,linux03会监控到数据</p><h4 id="flume的运行单位"><a href="#flume的运行单位" class="headerlink" title="flume的运行单位"></a>flume的运行单位</h4><p>flume的最小运行单位是Agent</p><h4 id="flume的最小传输单位"><a href="#flume的最小传输单位" class="headerlink" title="flume的最小传输单位"></a>flume的最小传输单位</h4><p>flume的最小传输单位是event(事件)</p><h4 id="event-事件-的组成"><a href="#event-事件-的组成" class="headerlink" title="event(事件)的组成"></a>event(事件)的组成</h4><p>一行文本内容会被反序列化成一个event </p><p>event是传输数据的核心，他的组成有<strong>header</strong>和<strong>body</strong>两部分组成：Header是一个map，body部分可以是string和**byte[]**等，body是真正存放数据的地方，headers部分是interceptor,可以存放一些数据属性,header默认是空的</p><p> 从source获取数据后会先封装成event，然后将event发送到channel，sink从channel拿event消费 </p><h4 id="interceptor-拦截器）"><a href="#interceptor-拦截器）" class="headerlink" title="interceptor(拦截器）"></a>interceptor(拦截器）</h4><p>拦截器的位置在source传入到channel中时发挥作用，当我们为Source指定拦截器后，我们在拦截器中会得到event，根据需求我们可以对event进行保留还是抛弃，抛弃的数据不会进入Channel中。</p><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><p>channel选择器</p><p>channel选择器有两种，<strong>replicating</strong>和<strong>multiplexing</strong></p><p>replicating是发给下级所有的channel</p><p>multiplexing是根据选择自己配置把不同的数据发送给不同的channel</p><p>（判断header数据，然后把不同event传输给不同的配置对象）</p><p>可以通过拦截器来再header中添加键值对，如果是启动日志(“topic”,”topic_start)，如果是事件日志，(“topic”,”topic_event)</p><p>拦截器可以通过关键字来进行判断日志类型</p><h3 id="自定义source、sink和interceptor"><a href="#自定义source、sink和interceptor" class="headerlink" title="自定义source、sink和interceptor"></a>自定义source、sink和interceptor</h3><p> <a href="https://blog.csdn.net/wangshuminjava/article/details/83550950">https://blog.csdn.net/wangshuminjava/article/details/83550950</a> </p><h4 id="一、自定义source"><a href="#一、自定义source" class="headerlink" title="一、自定义source"></a>一、自定义source</h4><p> 自定义Source，自定义的Event需要继承PollableSource （轮训拉取）或者EventDrivenSource （事件驱动），另外还需要实现Configurable接口。</p><p>PollableSource或者EventDrivenSource的区别在于：PollableSource是通过线程不断去调用process方法，主动拉取消息，而EventDrivenSource是需要触发一个调用机制，即被动等待。 Configurable接口：便于项目中初始化某些配置用的。 </p><h5 id="1、编写自定义source的代码"><a href="#1、编写自定义source的代码" class="headerlink" title="1、编写自定义source的代码"></a>1、编写自定义source的代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomSource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSource</span> <span class="token keyword">implements</span> <span class="token class-name">Configurable</span><span class="token punctuation">,</span><span class="token class-name">PollableSource</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getBackOffSleepIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getMaxBackOffSleepInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Status</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">EventDeliveryException</span> <span class="token punctuation">{</span>         <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> randomNum <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">"Hello world"</span> <span class="token operator">+</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>randomNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getChannelProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">processEvent</span><span class="token punctuation">(</span><span class="token class-name">EventBuilder</span><span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">return</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>READY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Context</span> arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、编写配置文件"><a href="#2、编写配置文件" class="headerlink" title="2、编写配置文件"></a>2、编写配置文件</h5><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 指定Agent的组件名称  a1.sources = r1  a1.sinks = k1  a1.channels = c1   # 指定Flume source(要监听的路径)  a1.sources.r1.type = com.harderxin.flume.test.MySource   # 指定Flume sink  a1.sinks.k1.type = file_roll  # sink的输出目录，根据自己情况定义a1.sinks.k1.sink.directory = /home/hadoop/sinkFolder   # 指定Flume channel  a1.channels.c1.type = memory  a1.channels.c1.capacity = 1000  a1.channels.c1.transactionCapacity = 100 # 绑定source和sink到channel上  a1.sources.r1.channels = c1  a1.sinks.k1.channel = c1  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、项目打jar包，放在flume的lib目录下"><a href="#3、项目打jar包，放在flume的lib目录下" class="headerlink" title="3、项目打jar包，放在flume的lib目录下"></a>3、项目打jar包，放在flume的lib目录下</h5><p>(bin目录网上说成功不了)</p><p>在bin目录下执行</p><pre class="line-numbers language-none"><code class="language-none">flume-ng agent -conf conf -conf-file ../conf/custom_source.conf -name a1 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="二、自定义sink"><a href="#二、自定义sink" class="headerlink" title="二、自定义sink"></a>二、自定义sink</h4><h5 id="1、编写自定义类继承-AbstractSink-实现-Configurable-接口"><a href="#1、编写自定义类继承-AbstractSink-实现-Configurable-接口" class="headerlink" title="1、编写自定义类继承 AbstractSink  实现 Configurable 接口"></a>1、编写自定义类继承 AbstractSink  实现 Configurable 接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomSink</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSink</span> <span class="token keyword">implements</span> <span class="token class-name">Configurable</span><span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Status</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">EventDeliveryException</span> <span class="token punctuation">{</span>         <span class="token class-name">Status</span> status <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>READY<span class="token punctuation">;</span>        <span class="token class-name">Transaction</span> trans <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            trans <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            trans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Event</span> event <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>event <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    status <span class="token operator">=</span> status<span class="token punctuation">.</span>BACKOFF<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            trans<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>trans <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                trans<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>trans <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                trans<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Context</span> arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h5><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">a1.sources = r1a1.sinks = k1a1.channels = c1 # Describe/configure the sourcea1.sources.r1.type = netcata1.sources.r1.bind = 0.0.0.0a1.sources.r1.port = 44444 # Describe the sinka1.sinks.k1.type = com.caoxufeng.MyCustom.CustomSink # Use a channel which buffers events in memorya1.channels.c1.type = memorya1.channels.c1.capacity = 10000a1.channels.c1.transactionCapacity = 100 # Bind the source and sink to the channela1.sources.r1.channels = c1a1.sinks.k1.channel = c1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、项目打成jar包，放入flume下的-lib目录下"><a href="#3、项目打成jar包，放入flume下的-lib目录下" class="headerlink" title="3、项目打成jar包，放入flume下的 lib目录下"></a>3、项目打成jar包，放入flume下的 lib目录下</h5><pre class="line-numbers language-none"><code class="language-none">flume-ng agent -conf conf -conf-file ../conf/custom_sink.conf -name a1 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="三、自定义Interceptor（拦截器）"><a href="#三、自定义Interceptor（拦截器）" class="headerlink" title="三、自定义Interceptor（拦截器）"></a>三、自定义Interceptor（拦截器）</h4><p>Flume中拦截器的作用就是对于event中header的部分可以按需塞入一些属性，当然你如果想要处理event的body内容，也是可以的，但是event的body内容是系统下游阶段真正处理的内容，如果让Flume来修饰body的内容的话，那就是强耦合了，这就违背了当初使用Flume来解耦的初衷了。</p><h5 id="1、编写自定义类实现Interceptor接口"><a href="#1、编写自定义类实现Interceptor接口" class="headerlink" title="1、编写自定义类实现Interceptor接口"></a>1、编写自定义类实现Interceptor接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span><span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> headerKey<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONF_HEADER_KEY <span class="token operator">=</span> <span class="token string">"header"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEFAULT_HEADER <span class="token operator">=</span> <span class="token string">"count"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> currentCount<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">CustomInterceptor</span><span class="token punctuation">(</span><span class="token class-name">Context</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>        headerKey <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>CONF_HEADER_KEY<span class="token punctuation">,</span>DEFAULT_HEADER<span class="token punctuation">)</span><span class="token punctuation">;</span>        currentCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">//运行前的初始化，一般不需要实现</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO Auto-generated method stub  </span>    <span class="token punctuation">}</span>    <span class="token comment">//)处理单个event</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Event</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">long</span> count <span class="token operator">=</span> currentCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        event<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>headerKey<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> event<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//批量处理event，循环出路一面的interceptor(Event event)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">&gt;</span></span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Event</span> e<span class="token operator">:</span>events<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">intercept</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> events<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CounterInterceptorBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">Context</span> ctx<span class="token punctuation">;</span>         <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Interceptor</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomInterceptor</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ctx <span class="token operator">=</span> context<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、编写配置文件-1"><a href="#2、编写配置文件-1" class="headerlink" title="2、编写配置文件"></a>2、编写配置文件</h5><pre class="line-numbers language-none"><code class="language-none">a1.sources = r1a1.sinks = s1a1.channels = c1 a1.sources.r1.type = netcata1.sources.r1.bind = localhosta1.sources.r1.port = 44444a1.sources.r1.interceptors = i1a1.sources.r1.interceptors.i1.type = com.caoxufeng.MyCustom.CustomInterceptor$CounterInterceptorBuildera1.sources.r1.interceptors.i1.perserveExisting = true a1.sinks.s1.type = logger a1.channels.c1.type = memorya1.channels.c1.capacity = 2a1.channels.c1.transactionCapacity = 2 a1.sources.r1.channels = c1a1.sinks.s1.channel = c1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、-项目打成jar包，放入flume下的-lib目录下"><a href="#3、-项目打成jar包，放入flume下的-lib目录下" class="headerlink" title="3、 项目打成jar包，放入flume下的 lib目录下"></a>3、 项目打成jar包，放入flume下的 lib目录下</h5><p>(bin目录网上说成功不了)</p><p>在bin目录下执行</p><pre class="line-numbers language-none"><code class="language-none">flume-ng agent -c conf -f ../conf/custom-interceptor.conf -n a1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Flume内存优化"><a href="#Flume内存优化" class="headerlink" title="Flume内存优化"></a>Flume内存优化</h3><p>1 问题描述：如果启动消费Flume抛出如下异常</p><pre class="line-numbers language-none"><code class="language-none">ERROR hdfs.HDFSEventSink: process failedjava.lang.OutOfMemoryError: GC overhead limit exceeded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2 解决方案步骤：</p><p>1）在服务器的/opt/modules/flume/conf/flume-env.sh文件中增加如下配置</p><pre class="line-numbers language-none"><code class="language-none">export JAVA_OPTS="-Xms100m -Xmx4096m -Dcom.sun.management.jmxremote"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Xms</strong> 是指设定程序启动时占用内存大小。一般来讲，大点，程序会启动的快一点，但是也可能会导致机器暂时间变慢。</p><p><strong>Xmx</strong> 是指设定程序运行期间最大可占用的内存大小。如果程序运行需要占用更多的内存，超出了这个设置值，就会抛出OutOfMemory异常。</p><p><strong>Xss</strong> 是指设定每个线程的堆栈大小。这个就要依据你的程序，看一个线程大约需要占用多少内存，可能会有多少线程同时运行等。</p><p>2）同步配置到98、97服务器</p><pre class="line-numbers language-none"><code class="language-none">[admin@hadoop-yarn conf]$ xsync flume-env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3 Flume内存参数设置及优化</p><p>JVM heap一般设置为4G或更高，部署在单独的服务器上（4核8线程16G内存）</p><p>-Xmx与-Xms最好设置一致，减少内存抖动带来的性能影响，如果设置不一致容易导致频繁fullgc。</p><h3 id="Flume的监控Ganglia"><a href="#Flume的监控Ganglia" class="headerlink" title="Flume的监控Ganglia"></a>Flume的监控Ganglia</h3><h4 id="Ganglia的安装与部署"><a href="#Ganglia的安装与部署" class="headerlink" title="Ganglia的安装与部署"></a>Ganglia的安装与部署</h4><p><strong>1)</strong> <strong>安装httpd**</strong>服务与php**</p><pre class="line-numbers language-none"><code class="language-none">[admin@hadoop-yarn flume]$ sudo yum -y install httpd php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2)</strong> <strong>安装其他依赖</strong></p><pre class="line-numbers language-none"><code class="language-none">[admin@hadoop-yarn flume]$ sudo yum -y install rrdtool perl-rrdtool rrdtool-devel[admin@hadoop-yarn flume]$ sudo yum -y install apr-devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3）<strong>安装Ganglia</strong></p><pre class="line-numbers language-none"><code class="language-none">[admin@hadoop-yarn flume]$ sudo rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm[admin@hadoop-yarn flume]$ sudo yum -y install ganglia-gmetad [admin@hadoop-yarn flume]$ sudo yum -y install ganglia-web[admin@hadoop-yarn flume]$ sudo yum install -y ganglia-gmond<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4)</strong> <strong>修改配置文件/etc/httpd/conf.d/ganglia.conf</strong></p><pre class="line-numbers language-none"><code class="language-none">[admin@hadoop-yarn flume]$ sudo vim /etc/httpd/conf.d/ganglia.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>修改为红颜色的配置：</strong></p><pre class="line-numbers language-none"><code class="language-none">\# Ganglia monitoring system php web frontendAlias /ganglia /usr/share/ganglia&lt;Location /ganglia&gt; Order deny,allow Deny from all Allow from all  Allow from 127.0.0.1 \# Allow from ::1 \# Allow from .example.com&lt;/Location&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5)</strong> <strong>修改配置文件/etc/ganglia/gmetad.conf</strong></p><pre class="line-numbers language-none"><code class="language-none">[admin@hadoop-yarn flume]$ sudo vim /etc/ganglia/gmetad.conf修改为：data_source "bw61" 192.168.137.66<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>6)</strong> <strong>修改配置文件/etc/ganglia/gmond.conf</strong></p><pre class="line-numbers language-none"><code class="language-none">[admin@hadoop-yarn flume]$ sudo vim /etc/ganglia/gmond.conf //修改为cluster {  name = "bw66"  owner = "unspecified"  latlong = "unspecified"  url = "unspecified"}udp_send_channel {  #bind_hostname = yes # Highly recommended, soon to be default.                       # This option tells gmond to use a source address                       # that resolves to the machine's hostname.  Without                       # this, the metrics may appear to come from any                       # interface and the DNS names associated with                       # those IPs will be used to create the RRDs.  # mcast_join = 239.2.11.71  host = bw66  port = 8649  ttl = 1}udp_recv_channel {  # mcast_join = 239.2.11.71  port = 8649  bind = bw66  retry_bind = true  # Size of the UDP buffer. If you are handling lots of metrics you really  # should bump it up to e.g. 10MB or even higher.  # buffer = 10485760}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7)</strong> <strong>修改配置文件/etc/selinux/config</strong></p><pre class="line-numbers language-none"><code class="language-none">[admin@hadoop-yarn flume]$ sudo vim /etc/selinux/config**修改为：**\# This file controls the state of SELinux on the system.\# SELINUX= can take one of these three values:\#   enforcing - SELinux security policy is enforced.\#   permissive - SELinux prints warnings instead of enforcing.\#   disabled - No SELinux policy is loaded.SELINUX=disabled\# SELINUXTYPE= can take one of these two values:\#   targeted - Targeted processes are protected,\#   mls - Multi Level Security protection.SELINUXTYPE=targeted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尖叫提示：selinux本次生效关闭必须重启，如果此时不想重启，可以临时生效之：</p><pre class="line-numbers language-none"><code class="language-none">[admin@hadoop-yarn flume]$ sudo setenforce 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>8）启动ganglia</strong></p><pre class="line-numbers language-none"><code class="language-none">[admin@hadoop-yarn flume]$ sudo service httpd start[admin@hadoop-yarn flume]$ sudo service gmetad start[admin@hadoop-yarn flume]$ sudo service gmond start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>6)</strong> <strong>打开网页浏览ganglia页面</strong></p><pre class="line-numbers language-none"><code class="language-none">http://192.168.137.99/ganglia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尖叫提示：如果完成以上操作依然出现权限不足错误，请修改/var/lib/ganglia目录的权限：</p><p>[admin@hadoop-yarn flume]$ sudo chmod -R 777 /var/lib/ganglia</p><h3 id="Flume思考题"><a href="#Flume思考题" class="headerlink" title="Flume思考题"></a>Flume思考题</h3><p><strong>flume采集断掉，要从上面的进度继续采集，怎么弄？</strong></p><p>使用interceptor设置，创建日志文件，在中断连接时按照这个里面的日志文件来进行继续</p>]]></content>
      
      
      <categories>
          
          <category> Flume </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8文档笔记</title>
      <link href="2020/11/03/java/java8-wen-dang-xue-xi-bi-ji/"/>
      <url>2020/11/03/java/java8-wen-dang-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>Java 有三个显式关键字来设置类中的访问权限：<code>public</code>（公开），<code>private</code>（私有）和<code>protected</code>（受保护）。这些访问修饰符决定了谁能使用它们修饰的方法、变量或类。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a><a href="https://lingcoder.github.io/OnJava8/#/book/01-What-is-an-Object?id=%E5%A4%9A%E6%80%81">多态</a></h4><p>在传统意义上，编译器不能进行函数调用。由非 OOP（面向对象程序设计） 编译器产生的函数调用会引起所谓的<strong>早期绑定</strong>，这个术语你可能从未听说过，不会想过其他的函数调用方式。这意味着编译器生成对特定函数名的调用，该调用会被解析为将执行的代码的绝对地址。</p><p>通过继承，程序直到运行时才能确定代码的地址，因此发送消息给对象时，还需要其他一些方案。为了解决这个问题，面向对象语言使用<strong>后期绑定</strong>的概念。当向对象发送信息时，被调用的代码直到运行时才确定。编译器确保方法存在，并对参数和返回值执行类型检查，但是它不知道要执行的确切代码。</p><p>为了执行后期绑定，Java 使用一个特殊的代码位来代替绝对调用。这段代码使用对象中存储的信息来计算方法主体的地址（此过程在多态性章节中有详细介绍）。因此，每个对象的行为根据特定代码位的内容而不同。当你向对象发送消息时，对象知道该如何处理这条消息。在某些语言中，必须显式地授予方法后期绑定属性的灵活性。例如，C++ 使用 <strong>virtual</strong> 关键字。在这些语言中，默认情况下方法不是动态绑定的。在 Java 中，动态绑定是默认行为，不需要额外的关键字来实现多态性。</p><p>这种把子类当成其基类来处理的过程叫做“向上转型”（<strong>upcasting</strong>）。在面向对象的编程里，经常利用这种方法来给程序解耦。</p><p>发送消息给对象时，如果程序不知道接收的具体类型是什么，但最终执行是正确的，这就是对象的“多态性”（Polymorphism）。面向对象的程序设计语言是通过“动态绑定”的方式来实现对象的多态性的。编译器和运行时系统会负责对所有细节的控制；我们只需知道要做什么，以及如何利用多态性来更好地设计程序。</p><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a><a href="https://lingcoder.github.io/OnJava8/#/book/01-What-is-an-Object?id=%E9%9B%86%E5%90%88">集合</a></h4><p>一般优秀的 OOP 语言都会将“集合”作为其基础包。在 C++ 中，“集合”是其标准库的一部分，通常被称为 STL（Standard Template Library，标准模板库）。SmallTalk 有一套非常完整的集合库。同样，Java 的标准库中也提供许多现成的集合类。</p><p>“集合”这种类型的对象可以存储任意类型、数量的其他对象。它能根据需要自动扩容，我们不用关心过程是如何实现的。</p><p>在一些库中，一两个泛型集合就能满足我们所有的需求了，而在其他一些类库（Java）中，不同类型的集合对应不同的需求：常见的有 List，常用于保存序列；Map，也称为关联数组，常用于将对象与其他对象关联；Set，只能保存非重复的值；其他还包括如队列（Queue）、树（Tree）、栈（Stack）、堆（Heap）等等。从设计的角度来看，我们真正想要的是一个能够解决某个问题的集合。如果一种集合就满足所有需求，那么我们就不需要剩下的了。之所以选择集合有以下两个原因：</p><ol><li>集合可以提供不同类型的接口和外部行为。堆栈、队列的应用场景和集合、列表不同，它们中的一种提供的解决方案可能比其他灵活得多。</li><li>不同的集合对某些操作有不同的效率。例如，List 的两种基本类型：ArrayList 和 LinkedList。虽然两者具有相同接口和外部行为，但是在某些操作中它们的效率差别很大。在 ArrayList 中随机查找元素是很高效的，而 LinkedList 随机查找效率低下。反之，在 LinkedList 中插入元素的效率要比在 ArrayList 中高。由于底层数据结构的不同，每种集合类型在执行相同的操作时会表现出效率上的差异。</li></ol><p>在 Java 5 泛型出来之前，集合中保存的是通用类型 <code>Object</code>。Java 单继承的结构意味着所有元素都基于 <code>Object</code> 类，所以在集合中可以保存任何类型的数据，易于重用。要使用这样的集合，我们先要往集合添加元素。由于 Java 5 版本前的集合只保存 <code>Object</code>，当我们往集合中添加元素时，元素便向上转型成了 <code>Object</code>，从而丢失自己原有的类型特性。这时我们再从集合中取出该元素时，元素的类型变成了 <code>Object</code>。那么我们该怎么将其转回原先具体的类型呢？这里，我们使用了强制类型转换将其转为更具体的类型，这个过程称为对象的“向下转型”。通过“向上转型”，我们知道“圆形”也是一种“形状”，这个过程是安全的。可是我们不能从“Object”看出其就是“圆形”或“形状”，所以除非我们能确定元素的具体类型信息，否则“向下转型”就是不安全的。也不能说这样的错误就是完全危险的，因为一旦我们转化了错误的类型，程序就会运行出错，抛出“运行时异常”（RuntimeException）。（后面的章节会提到） 无论如何，我们要寻找一种在取出集合元素时确定其具体类型的方法。另外，每次取出元素都要做额外的“向下转型”对程序和程序员都是一种开销。以某种方式创建集合，以确认保存元素的具体类型，减少集合元素“向下转型”的开销和可能出现的错误难道不好吗？这种解决方案就是：参数化类型机制（Parameterized Type Mechanism）。</p><p>参数化类型机制可以使得编译器能够自动识别某个 <code>class</code> 的具体类型并正确地执行。举个例子，对集合的参数化类型机制可以让集合仅接受“形状”这种类型的元素，并以“形状”类型取出元素。Java 5 版本支持了参数化类型机制，称之为“泛型”（Generic）。泛型是 Java 5 的主要特性之一。你可以按以下方式向 ArrayList 中添加 Shape（形状）：</p><h4 id="对象创建与生命周期"><a href="#对象创建与生命周期" class="headerlink" title="对象创建与生命周期"></a><a href="https://lingcoder.github.io/OnJava8/#/book/01-What-is-an-Object?id=%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E4%B8%8E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">对象创建与生命周期</a></h4><p>我们在使用对象时要注意的一个关键问题就是对象的创建和销毁方式。每个对象的生存都需要资源，尤其是内存。为了资源的重复利用，当对象不再被使用时，我们应该及时释放资源，清理内存。</p><p>在简单的编程场景下，对象的清理并不是问题。我们创建对象，按需使用，最后销毁它。然而，情况往往要比这更复杂：</p><p>假设，我们正在为机场设计一个空中交通管制的系统（该例也适用于仓库货柜管理、影带出租或者宠物寄养仓库系统）。第一步比较简单：创建一个用来保存飞机的集合，每当有飞机进入交通管制区域时，我们就创建一个“飞机”对象并将其加入到集合中，等到飞机离开时将其从这个集合中清除。与此同时，我们还需要一个记录飞机信息的系统，也许这些数据不像主要控制功能那样引人注意。比如，我们要记录所有飞机中的小型飞机的的信息（比如飞行计划）。此时，我们又创建了第二个集合来记录所有小型飞机。 每当创建一个“飞机”对象的时候，将其放入第一个集合；若它属于小型飞机，也必须同时将其放入第二个集合里。</p><p>现在问题开始棘手了：我们怎么知道何时该清理这些对象呢？当某一个系统处理完成，而其他系统可能还没有处理完成。这样的问题在其他的场景下也可能发生。在 C++ 程序设计中，当使用完一个对象后，必须明确将其删除，这就让问题变复杂了。</p><p>对象的数据在哪？它的生命周期是怎么被控制的？ 在 C++ 设计中采用的观点是效率第一，因此它将选择权交给了程序员。为了获得最大的运行时速度，程序员可以在编写程序时，通过将对象放在栈（Stack，有时称为自动变量或作用域变量）或静态存储区域（static storage area）中来确定内存占用和生存时间。这些区域的对象会被优先分配内存和释放。这种控制在某些情况下非常有用。</p><p>然而相对的，我们也牺牲了程序的灵活性。因为在编写代码时，我们必须要弄清楚对象的数量、生存时间还有类型。如果我们要用它来解决一个相当普遍的问题时（如计算机辅助设计、仓库管理或空中交通管制等），限制就太大了。</p><p>第二种方法是在堆内存（Heap）中动态地创建对象。在这种方式下，直到程序运行我们才能确定需要创建的对象数量、生存时间和类型。什么时候需要，什么时候在堆内存中创建。 因为内存的占用是动态管理的，所以在运行时，在堆内存上开辟空间所需的时间可能比在栈内存上要长（但也不一定）。在栈内存开辟和释放空间通常是一条将栈指针向下移动和一条将栈指针向上移动的汇编指令。开辟堆内存空间的时间取决于内存机制的设计。</p><p>动态方法有这样一个合理假设：对象通常是复杂的，相比于对象创建的整体开销，寻找和释放内存空间的开销微不足道。（原文：*The dynamic approach makes the generally logical assumption that objects tend to be complicated, so the extra overhead of finding storage and releasing that storage will not have an important impact on the creation of an object.*）此外，更好的灵活性对于问题的解决至关重要。</p><p>Java 使用动态内存分配。每次创建对象时，使用 <code>new</code> 关键字构建该对象的动态实例。这又带来另一个问题：对象的生命周期。较之堆内存，在栈内存中创建对象，编译器能够确定该对象的生命周期并自动销毁它；然而如果你在堆内存创建对象的话，编译器是不知道它的生命周期的。在 C++ 中你必须以编程方式确定何时销毁对象，否则可能导致内存泄漏。Java 的内存管理是建立在垃圾收集器上的，它能自动发现对象不再被使用并释放内存。垃圾收集器的存在带来了极大的便利，它减少了我们之前必须要跟踪的问题和编写相关代码的数量。因此，垃圾收集器提供了更高级别的保险，以防止潜在的内存泄漏问题，这个问题使得许多 C++ 项目没落。</p><p>Java 的垃圾收集器被设计用来解决内存释放的问题（虽然这不包括对象清理的其他方面）。垃圾收集器知道对象什么时候不再被使用并且自动释放内存。结合单继承和仅可在堆中创建对象的机制，Java 的编码过程比用 C++ 要简单得多。我们所要做的决定和要克服的障碍也会少很多！</p><h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a><a href="https://lingcoder.github.io/OnJava8/#/book/03-Objects-Everywhere?id=%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8">数据存储</a></h4><p>那么，程序在运行时是如何存储的呢？尤其是内存是怎么分配的。有5个不同的地方可以存储数据：</p><ol><li><strong>寄存器</strong>（Registers）最快的存储区域，位于 CPU 内部 <a href="https://lingcoder.github.io/OnJava8/#/%E5%A4%A7%E5%A4%9A%E6%95%B0%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8%E8%8A%AF%E7%89%87%E9%83%BD%E6%9C%89%E9%A2%9D%E5%A4%96%E7%9A%84%E9%AB%98%E9%80%9F%E7%BC%93%E5%86%B2%E5%AD%98%E5%82%A8%E5%99%A8%EF%BC%8C%E4%BD%86%E8%BF%99%E6%98%AF%E6%8C%89%E7%85%A7%E4%BC%A0%E7%BB%9F%E5%AD%98%E5%82%A8%E5%99%A8%E8%80%8C%E4%B8%8D%E6%98%AF%E5%AF%84%E5%AD%98%E5%99%A8%E3%80%82">^2</a>。然而，寄存器的数量十分有限，所以寄存器根据需求进行分配。我们对其没有直接的控制权，也无法在自己的程序里找到寄存器存在的踪迹（另一方面，C/C++ 允许开发者向编译器建议寄存器的分配）。</li><li><strong>栈内存</strong>（Stack）存在于常规内存 RAM（随机访问存储器，Random Access Memory）区域中，可通过栈指针获得处理器的直接支持。栈指针下移分配内存，上移释放内存。这是一种仅次于寄存器的非常快速有效的分配存储方式。创建程序时，Java 系统必须知道栈内保存的所有项的生命周期。这种约束限制了程序的灵活性。因此，虽然在栈内存上存在一些 Java 数据（如对象引用），但 Java 对象本身的数据却是保存在堆内存的。</li><li><strong>堆内存</strong>（Heap）这是一种通用的内存池（也在 RAM 区域），所有 Java 对象都存在于其中。与栈内存不同，编译器不需要知道对象必须在堆内存上停留多长时间。因此，用堆内存保存数据更具灵活性。创建一个对象时，只需用 <code>new</code> 命令实例化对象即可，当执行代码时，会自动在堆中进行内存分配。这种灵活性是有代价的：分配和清理堆内存要比栈内存需要更多的时间（如果可以用 Java 在栈内存上创建对象，就像在 C++ 中那样的话）。随着时间的推移，Java 的堆内存分配机制现在已经非常快，因此这不是一个值得关心的问题了。</li><li><strong>常量存储</strong>（Constant storage）常量值通常直接放在程序代码中，因为它们永远不会改变。如需严格保护，可考虑将它们置于只读存储器 ROM （只读存储器，Read Only Memory）中 <a href="https://lingcoder.github.io/OnJava8/#/%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E3%80%82%E6%89%80%E6%9C%89%E6%96%87%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%80%BC%E5%B8%B8%E9%87%8F%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%83%BD%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%94%BE%E5%85%A5%E7%89%B9%E6%AE%8A%E7%9A%84%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8%E4%B8%AD%E3%80%82">^3</a>。</li><li><strong>非 RAM 存储</strong>（Non-RAM storage）数据完全存在于程序之外，在程序未运行以及脱离程序控制后依然存在。两个主要的例子：（1）序列化对象：对象被转换为字节流，通常被发送到另一台机器；（2）持久化对象：对象被放置在磁盘上，即使程序终止，数据依然存在。这些存储的方式都是将对象转存于另一个介质中，并在需要时恢复成常规的、基于 RAM 的对象。Java 为轻量级持久化提供了支持。而诸如 JDBC 和 Hibernate 这些类库为使用数据库存储和检索对象信息提供了更复杂的支持。</li></ol><h5 id="基本类型的存储"><a href="#基本类型的存储" class="headerlink" title="基本类型的存储"></a><a href="https://lingcoder.github.io/OnJava8/#/book/03-Objects-Everywhere?id=%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AD%98%E5%82%A8">基本类型的存储</a></h5><p>有一组类型在 Java 中使用频率很高，它们需要特殊对待，这就是 Java 的基本类型。之所以这么说，是因为它们的创建并不是通过 <code>new</code> 关键字来产生。通常 <code>new</code> 出来的对象都是保存在堆内存中的，以此方式创建小而简单的变量往往是不划算的。所以对于这些基本类型的创建方法，Java 使用了和 C/C++ 一样的策略。也就是说，不是使用 <code>new</code> 创建变量，而是使用一个“自动”变量。 这个变量直接存储”值”，并置于栈内存中，因此更加高效。</p><p>Java 确定了每种基本类型的内存占用大小。 这些大小不会像其他一些语言那样随着机器环境的变化而变化。这种不变性也是 Java 更具可移植性的一个原因。</p><h5 id="数组的存储"><a href="#数组的存储" class="headerlink" title="数组的存储"></a><a href="https://lingcoder.github.io/OnJava8/#/book/03-Objects-Everywhere?id=%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%98%E5%82%A8">数组的存储</a></h5><p>许多编程语言都支持数组类型。在 C 和 C++ 中使用数组是危险的，因为那些数组只是内存块。如果程序访问了内存块之外的数组或在初始化之前使用该段内存（常见编程错误），则结果是不可预测的。</p><p>Java 的设计主要目标之一是安全性，因此许多困扰 C 和 C++ 程序员的问题不会在 Java 中再现。在 Java 中，数组使用前需要被初始化，并且不能访问数组长度以外的数据。这种范围检查，是以每个数组上少量的内存开销及运行时检查下标的额外时间为代价的，但由此换来的安全性和效率的提高是值得的。（并且 Java 经常可以优化这些操作）。</p><p>当我们创建对象数组时，实际上是创建了一个引用数组，并且每个引用的初始值都为 <strong>null</strong> 。在使用该数组之前，我们必须为每个引用指定一个对象 。如果我们尝试使用为 <strong>null</strong> 的引用，则会在运行时报错。因此，在 Java 中就防止了数组操作的常规错误。</p><p>我们还可创建基本类型的数组。编译器通过将该数组的内存全部置零来保证初始化。本书稍后将详细介绍数组，特别是在数组章节中。</p><h4 id="对象清理"><a href="#对象清理" class="headerlink" title="对象清理"></a><a href="https://lingcoder.github.io/OnJava8/#/book/03-Objects-Everywhere?id=%E5%AF%B9%E8%B1%A1%E6%B8%85%E7%90%86">对象清理</a></h4><p>我们在 Java 中并没有主动清理这些对象，那么它是如何避免 C++ 中出现的内存被填满从而阻塞程序的问题呢？答案是：Java 的垃圾收集器会检查所有 <code>new</code> 出来的对象并判断哪些不再可达，继而释放那些被占用的内存，供其他新的对象使用。也就是说，我们不必担心内存回收的问题了。你只需简单创建对象即可。当其不再被需要时，能自行被垃圾收集器释放。垃圾回收机制有效防止了因程序员忘记释放内存而造成的“内存泄漏”问题。</p><h4 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a><a href="https://lingcoder.github.io/OnJava8/#/book/03-Objects-Everywhere?id=static%E5%85%B3%E9%94%AE%E5%AD%97">static关键字</a></h4><p>类是对象的外观及行为方式的描述。通常只有在使用 <code>new</code> 创建那个类的对象后，数据存储空间才被分配，对象的方法才能供外界调用。这种方式在两种情况下是不足的。</p><ol><li>有时你只想为特定字段（注：也称为属性、域）分配一个共享存储空间，而不去考虑究竟要创建多少对象，甚至根本就不创建对象。</li><li>创建一个与此类的任何对象无关的方法。也就是说，即使没有创建对象，也能调用该方法。</li></ol><p><strong>static</strong> 关键字（从 C++ 采用）就符合上述两点要求。当我们说某个事物是静态时，就意味着该字段或方法不依赖于任何特定的对象实例 。 即使我们从未创建过该类的对象，也可以调用其静态方法或访问其静态字段。相反，对于普通的非静态字段和方法，我们必须要先创建一个对象并使用该对象来访问字段或方法，因为非静态字段和方法必须与特定对象关联 <a href="https://lingcoder.github.io/OnJava8/#/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%9C%A8%E4%BD%BF%E7%94%A8%E4%B9%8B%E5%89%8D%E4%B8%8D%E9%9C%80%E8%A6%81%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%9B%A0%E6%AD%A4%E5%AE%83%E4%BB%AC%E4%B8%8D%E8%83%BD%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8%E9%9D%9E%E9%9D%99%E6%80%81%E7%9A%84%E6%88%90%E5%91%98%E6%88%96%E6%96%B9%E6%B3%95%EF%BC%88%E5%9B%A0%E4%B8%BA%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%92%8C%E6%96%B9%E6%B3%95%E5%BF%85%E9%A1%BB%E8%A6%81%E5%85%88%E5%AE%9E%E4%BE%8B%E5%8C%96%E4%B8%BA%E5%AF%B9%E8%B1%A1%E6%89%8D%E5%8F%AF%E4%BB%A5%E8%A2%AB%E4%BD%BF%E7%94%A8%EF%BC%89%E3%80%82">^6</a> 。</p><p><strong>static</strong> 关键字不能应用于局部变量，所以只能作用于属性（字段、域）。</p><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=this%E5%85%B3%E9%94%AE%E5%AD%97">this关键字</a></h4><p><strong>this</strong> 关键字只能在非静态方法内部使用。当你调用一个对象的方法时，<strong>this</strong> 生成了一个对象引用。你可以像对待其他引用一样对待这个引用。如果你在一个类的方法里调用该类的其他方法，不要使用 <strong>this</strong>，直接调用即可，<strong>this</strong> 自动地应用于其他方法上了。</p><p><strong>this</strong> 关键字只用在一些必须显式使用当前对象引用的特殊场合。</p><h4 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8">垃圾回收器</a></h4><p>使用完一个对象就不管它并非总是安全的。Java 中有垃圾回收器回收无用对象占用的内存。但现在考虑一种特殊情况：你创建的对象不是通过 <strong>new</strong> 来分配内存的，而垃圾回收器只知道如何释放用 <strong>new</strong> 创建的对象的内存，所以它不知道如何回收不是 <strong>new</strong> 分配的内存。为了处理这种情况，Java 允许在类中定义一个名为 <code>finalize()</code> 的方法。</p><p>在 Java 中，对象并非总是被垃圾回收，或者换句话说：</p><ol><li>对象可能不被垃圾回收。</li><li>垃圾回收不等同于析构。</li></ol><p>也许你会发现，只要程序没有濒临内存用完的那一刻，对象占用的空间就总也得不到释放。如果程序执行结束，而垃圾回收器一直没有释放你创建的任何对象的内存，则当程序退出时，那些资源会全部交还给操作系统。这个策略是恰当的，因为垃圾回收本身也有开销，要是不使用它，那就不用支付这部分开销了。</p><h5 id="finalize-的用途"><a href="#finalize-的用途" class="headerlink" title="finalize() 的用途"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=finalize-%E7%9A%84%E7%94%A8%E9%80%94"><code>finalize()</code> 的用途</a></h5><p>如果你不能将 <code>finalize()</code> 作为通用的清理方法，那么这个方法有什么用呢？</p><p>这引入了要记住的第3点：</p><ol><li>垃圾回收只与内存有关。</li></ol><h5 id="终结条件"><a href="#终结条件" class="headerlink" title="终结条件"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=%E7%BB%88%E7%BB%93%E6%9D%A1%E4%BB%B6">终结条件</a></h5><p>通常，不能指望 <code>finalize()</code> ，你必须创建其他的”清理”方法，并明确地调用它们。所以看起来，<code>finalize()</code> 只对大部分程序员很难用到的一些晦涩内存清理里有用了。但是，<code>finalize()</code> 还有一个有趣的用法，它不依赖于每次都要对 <code>finalize()</code> 进行调用，这就是对象终结条件的验证。</p><p>当对某个对象不感兴趣时——也就是它将被清理了，这个对象应该处于某种状态，这种状态下它占用的内存可以被安全地释放掉。例如，如果对象代表了一个打开的文件，在对象被垃圾回收之前程序员应该关闭这个文件。只要对象中存在没有被适当清理的部分，程序就存在很隐晦的 bug。<code>finalize()</code> 可以用来最终发现这个情况，尽管它并不总是被调用。如果某次 <code>finalize()</code> 的动作使得 bug 被发现，那么就可以据此找出问题所在——这才是人们真正关心的。以下是个简单的例子，示范了 <code>finalize()</code> 的可能使用方式：</p><pre class="line-numbers language-none"><code class="language-none">// housekeeping/TerminationCondition.java// Using finalize() to detect a object that// hasn't been properly cleaned upimport onjava.*;class Book {    boolean checkedOut = false;    Book(boolean checkOut) {        checkedOut = checkOut;    }    void checkIn() {        checkedOut = false;    }    @Override    protected void finalize() throws Throwable {        if (checkedOut) {            System.out.println("Error: checked out");        }        // Normally, you'll also do this:        // super.finalize(); // Call the base-class version    }}public class TerminationCondition {    public static void main(String[] args) {        Book novel = new Book(true);        // Proper cleanup:        novel.checkIn();        // Drop the reference, forget to clean up:        new Book(true);        // Force garbage collection &amp; finalization:        System.gc();        new Nap(1); // One second delay    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本例的终结条件是：所有的 <strong>Book</strong> 对象在被垃圾回收之前必须被登记。但在 <code>main()</code> 方法中，有一本书没有登记。要是没有 <code>finalize()</code> 方法来验证终结条件，将会很难发现这个 bug。</p><p>你可能注意到使用了 <code>@Override</code>。<code>@</code> 意味着这是一个注解，注解是关于代码的额外信息。在这里，该注解告诉编译器这不是偶然地重定义在每个对象中都存在的 <code>finalize()</code> 方法——程序员知道自己在做什么。编译器确保你没有拼错方法名，而且确保那个方法存在于基类中。注解也是对读者的提醒，<code>@Override</code> 在 Java 5 引入，在 Java 7 中改善，本书通篇会出现。</p><p>注意，<code>System.gc()</code> 用于强制进行终结动作。但是即使不这么做，只要重复地执行程序（假设程序将分配大量的存储空间而导致垃圾回收动作的执行），最终也能找出错误的 <strong>Book</strong> 对象。</p><p>你应该总是假设基类版本的 <code>finalize()</code> 也要做一些重要的事情，使用 <strong>super</strong> 调用它，就像在 <code>Book.finalize()</code> 中看到的那样。本例中，它被注释掉了，因为它需要进行异常处理，而我们到现在还没有涉及到。</p><h5 id="垃圾回收器如何工作"><a href="#垃圾回收器如何工作" class="headerlink" title="垃圾回收器如何工作"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C">垃圾回收器如何工作</a></h5><p>重点</p><h4 id="初始化的顺序"><a href="#初始化的顺序" class="headerlink" title="初始化的顺序"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E9%A1%BA%E5%BA%8F">初始化的顺序</a></h4><p>class初始化会先初始化全部变量值，然后再调用构造器</p><h4 id="静态数据的初始化"><a href="#静态数据的初始化" class="headerlink" title="静态数据的初始化"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96">静态数据的初始化</a></h4><p>静态数据在class初始化变量之前初始化数据，静态初始化只有在必要时刻才会进行</p><p>无论创建多少个对象，静态数据都只占用一份存储区域。<strong>static</strong> 关键字不能应用于局部变量，所以只能作用于属性（字段、域）。如果一个字段是静态的基本类型，你没有初始化它，那么它就会获得基本类型的标准初值。如果它是对象引用，那么它的默认初值就是 <strong>null</strong>。</p><p>如果在定义时进行初始化，那么静态变量看起来就跟非静态变量一样。</p><h5 id="创建对象的过程"><a href="#创建对象的过程" class="headerlink" title="创建对象的过程"></a>创建对象的过程</h5><p>创建对象的过程，假设有个名为 <strong>Dog</strong> 的类：</p><ol><li>即使没有显式地使用 <strong>static</strong> 关键字，构造器实际上也是静态方法。所以，当首次创建 <strong>Dog</strong> 类型的对象或是首次访问 <strong>Dog</strong> 类的静态方法或属性时，Java 解释器必须在类路径中查找，以定位 <strong>Dog.class</strong>。</li><li>当加载完 <strong>Dog.class</strong> 后（后面会学到，这将创建一个 <strong>Class</strong> 对象），有关静态初始化的所有动作都会执行。因此，静态初始化只会在首次加载 <strong>Class</strong> 对象时初始化一次。</li><li>当用 <code>new Dog()</code> 创建对象时，首先会在堆上为 <strong>Dog</strong> 对象分配足够的存储空间。</li><li>分配的存储空间首先会被清零，即会将 <strong>Dog</strong> 对象中的所有基本类型数据设置为默认值（数字会被置为 0，布尔型和字符型也相同），引用被置为 <strong>null</strong>。</li><li>执行所有出现在字段定义处的初始化动作。</li><li>执行构造器</li></ol><h5 id="显式的静态初始化"><a href="#显式的静态初始化" class="headerlink" title="显式的静态初始化"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=%E6%98%BE%E5%BC%8F%E7%9A%84%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96">显式的静态初始化</a></h5><p>你可以将一组静态初始化动作放在类里面一个特殊的”静态子句”（有时叫做静态块）中</p><p>与其他静态初始化动作一样，这段代码仅执行一次：当首次创建这个类的对象或首次访问这个类的静态成员（甚至不需要创建该类的对象）时。</p><h4 id="非静态实例初始化"><a href="#非静态实例初始化" class="headerlink" title="非静态实例初始化"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=%E9%9D%9E%E9%9D%99%E6%80%81%E5%AE%9E%E4%BE%8B%E5%88%9D%E5%A7%8B%E5%8C%96">非静态实例初始化</a></h4><p>Java 提供了被称为<em>实例初始化</em>的类似语法，用来初始化每个对象的非静态变量，例如：</p><pre class="line-numbers language-none"><code class="language-none">class Mug {    Mug(int marker) {        System.out.println("Mug(" + marker + ")");    }}public class Mugs {    Mug mug1;    Mug mug2;    { // [1]        mug1 = new Mug(1);        mug2 = new Mug(2);        System.out.println("mug1 &amp; mug2 initialized");    }    Mugs() {        System.out.println("Mugs()");    }    Mugs(int i) {        System.out.println("Mugs(int)");    }     public static void main(String[] args) {        System.out.println("Inside main()");        new Mugs();        System.out.println("new Mugs() completed");        new Mugs(1);        System.out.println("new Mugs(1) completed");    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">Inside mainMug(1)Mug(2)mug1 &amp; mug2 initializedMugs()new Mugs() completedMug(1)Mug(2)mug1 &amp; mug2 initializedMugs(int)new Mugs(1) completed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看起来它很像静态代码块，只不过少了 <strong>static</strong> 关键字。</p><p>他会随着类的初始化执行，会执行多次，而static只会执行一次，并保存在存储区域中</p><h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a><a href="https://lingcoder.github.io/OnJava8/#/book/06-Housekeeping?id=%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B">枚举类型</a></h4><p>Java 5 中添加了一个看似很小的特性 <strong>enum</strong> 关键字，它使得我们在需要群组并使用枚举类型集时，可以很方便地处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// housekeeping/Spiciness.java</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Spiciness</span> <span class="token punctuation">{</span>    NOT<span class="token punctuation">,</span> MILD<span class="token punctuation">,</span> MEDIUM<span class="token punctuation">,</span> HOT<span class="token punctuation">,</span> FLAMING<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里创建了一个名为 <strong>Spiciness</strong> 的枚举类型，它有5个值。由于枚举类型的实例是常量，因此按照命名惯例，它们都用大写字母表示（如果名称中含有多个单词，使用下划线分隔）。</p><p>要使用 <strong>enum</strong>，需要创建一个该类型的引用，然后将其赋值给某个实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// housekeeping/SimpleEnumUse.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleEnumUse</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Spiciness</span> howHot <span class="token operator">=</span> <span class="token class-name">Spiciness</span><span class="token punctuation">.</span>MEDIUM<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>howHot<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在你创建 <strong>enum</strong> 时，编译器会自动添加一些有用的特性。例如，它会创建 <code>toString()</code> 方法，以便你方便地显示某个 <strong>enum</strong> 实例的名称，这从上面例子中的输出可以看出。编译器还会创建 <code>ordinal()</code> 方法表示某个特定 <strong>enum</strong> 常量的声明顺序，<code>static values()</code> 方法按照 enum 常量的声明顺序，生成这些常量值构成的数组：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumOrder</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Spiciness</span> s<span class="token operator">:</span> <span class="token class-name">Spiciness</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">", ordinal "</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">NOT, ordinal 0MILD, ordinal 1MEDIUM, ordinal 2HOT, ordinal 3FLAMING, ordinal 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>enum</strong> 有一个很实用的特性，就是在 <strong>switch</strong> 语句中使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// housekeeping/Burrito.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Burrito</span> <span class="token punctuation">{</span>    <span class="token class-name">Spiciness</span> degree<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Burrito</span><span class="token punctuation">(</span><span class="token class-name">Spiciness</span> degree<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>degree <span class="token operator">=</span> degree<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"This burrito is "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>degree<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> NOT<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"not spicy at all."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MILD<span class="token operator">:</span>            <span class="token keyword">case</span> MEDIUM<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a little hot."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> HOT<span class="token operator">:</span>            <span class="token keyword">case</span> FLAMING<span class="token operator">:</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"maybe too hot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Burrito</span> plain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Burrito</span><span class="token punctuation">(</span><span class="token class-name">Spiciness</span><span class="token punctuation">.</span>NOT<span class="token punctuation">)</span><span class="token punctuation">,</span>        greenChile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Burrito</span><span class="token punctuation">(</span><span class="token class-name">Spiciness</span><span class="token punctuation">.</span>MEDIUM<span class="token punctuation">)</span><span class="token punctuation">,</span>        jalapeno <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Burrito</span><span class="token punctuation">(</span><span class="token class-name">Spiciness</span><span class="token punctuation">.</span>HOT<span class="token punctuation">)</span><span class="token punctuation">;</span>        plain<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        greenChile<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jalapeno<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>复制<span class="token class-name">ErrorOK</span><span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">This burrito is not spicy at all.This burrito is a little hot.This burrito is maybe too hot.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将数据和方法包装进类中并把具体实现隐藏被称作是<em>封装</em>（encapsulation）</p><p>访问控制通常被称为<em>隐藏实现</em>（implementation hiding）。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop学习笔记</title>
      <link href="2020/11/03/cdh/hadoop/hadoop/"/>
      <url>2020/11/03/cdh/hadoop/hadoop/</url>
      
        <content type="html"><![CDATA[<h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><h3 id="Hadoop是什么？"><a href="#Hadoop是什么？" class="headerlink" title="Hadoop是什么？"></a>Hadoop是什么？</h3><p>分布式系统基础架构。</p><h3 id="配置jdk和hadoop的环境"><a href="#配置jdk和hadoop的环境" class="headerlink" title="配置jdk和hadoop的环境"></a>配置jdk和hadoop的环境</h3><p>1.使用 SSH Secure Shell 上传文件<br>2.上传到 ~/Downloads/下并解压<br>3.配置/etc下面的profile文件的JAVA_HOME和HADOOP_HOME</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.重启服务  Source profile</p><h3 id="Hadoop-1"><a href="#Hadoop-1" class="headerlink" title="Hadoop"></a>Hadoop</h3><h4 id="Namenode和Datanode的关系图"><a href="#Namenode和Datanode的关系图" class="headerlink" title="Namenode和Datanode的关系图"></a>Namenode和Datanode的关系图</h4><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565334786917.png" alt="1565334786917"></p><h4 id="Hadoop1-0和Hadoop2-0-系统的区别"><a href="#Hadoop1-0和Hadoop2-0-系统的区别" class="headerlink" title="Hadoop1.0和Hadoop2.0 系统的区别"></a>Hadoop1.0和Hadoop2.0 系统的区别</h4><p> HADOOP1.0主要是由MapReduce和HDFS构成的，其中MapReduce是一个离线处理框架，由编程模型（新旧API）、运行时环境（JobTracker和TaskTracker）和数据处理引擎（MapTask和ReduceTask）三部分组成。</p><p>HADOOP2.0主要由HDFS、MapReduce和YARN三个系统组成，其中YARN是一个资源管理系统，负责集群资源管理和调度，MapReduce则是运行在YARN上的离线处理框架，它与Hadoop 1.0中的MapReduce在编程模型（新旧API）和数据处理引擎（MapTask和ReduceTask）两个方面是相同的。</p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565432697598.png" alt="1565432697598"></p><h4 id="Hadoop2的三大核心"><a href="#Hadoop2的三大核心" class="headerlink" title="Hadoop2的三大核心"></a>Hadoop2的三大核心</h4><p>HDFS、MapReduce、YARN</p><p>MapReduce、YARN</p><p>YARN（通用资源管理系统）</p><h4 id="Hadoop的四个模块"><a href="#Hadoop的四个模块" class="headerlink" title="Hadoop的四个模块"></a>Hadoop的四个模块</h4><p>1.Hadoop Common 为其他 Hadoop模块提供基础设施</p><p>2.Hadoop HDFS 一个高可靠、高吞吐量的分布式文件系统 </p><p>3.Hadoop MapReduce 一个分布式的离线并行计算框架</p><p>4.Hadoop YARN  新的MapReduce框架，资源管理 任务调度 </p><h4 id="HDFS三个服务"><a href="#HDFS三个服务" class="headerlink" title="HDFS三个服务"></a>HDFS三个服务</h4><p>NameNode</p><p>Secondary NameNode  秘书</p><p>DataNode 数据 （多个）</p><p>三个进程 相互合作产生结果实现大量数据存储 </p><h4 id="安全模式-SafeMode"><a href="#安全模式-SafeMode" class="headerlink" title="安全模式 (SafeMode)"></a>安全模式 (SafeMode)</h4><p>1.查询当前是否是安全模式 </p><p>hdfs dfsadmin -safemode get </p><p>2.退出安全模式 </p><p>hdfs dfsadmin -safemode leave</p><p>3.进入安全模式</p><p>hdfs dfsadmin -safemode enter </p><p>4.在执行某条命令之前退出安全模式(在进行一些集群维护操作时很有用，可以保持数据依然可读。也可以在集群已是安全模式使执行，确保进入安全模式。)</p><p>hdfs dfsadmin -safemode wait </p><h4 id="HDFS架构-——NameNode"><a href="#HDFS架构-——NameNode" class="headerlink" title="HDFS架构 ——NameNode"></a>HDFS架构 ——NameNode</h4><p> 1.Namenode 是一个中心服务器，单一节点，负责管理文件系统的名字空间(namespace)以及客户端对文件的访问，NameNode  是主节点，存储文件的元数据<br> 2.NameNode 负责文件元数据的操作，DataNode负责处理文件内容的读写请求<br> 3.读取文件时NameNode尽量让用户先读取最近的副本，降低带块消耗和读取时延（机架感知）<br> 4.Namenode 全权管理数据块的复制（namenode发送指令让datanode 来复制文件块），<br> 它周期性地从集群中的每个Datanode接收心跳信号和块状态报告(Blockreport)(元数据)。<br> 接收到心跳信号意味着该Datanode节点工作正常。<br> 块状态报告包含了一个该Datanode上所有数据块的列表</p><h6 id="NameNode启动过程"><a href="#NameNode启动过程" class="headerlink" title="NameNode启动过程"></a>NameNode启动过程</h6><p>1.NameNode启动时首先将fsimage（镜像）载入内存，并执行编译日志editlog的各项操作，（secondaryNamenode和namenode不要在同一台机器上）</p><p>2.一旦在内存中建立文件系统元数据映射，则创建一个新的fsimage文件（这个过程不需SecondaryNameNode）和一个空的editlog</p><p>3.在安全模式下各个datanode回向namenode发送块列表的最新情况（向namenode注册时，文件是否大量损坏不能用）</p><p>4.namenode在安全模式中，namenode的文件系统对于客户端来说是只读的。</p><p>5.NameNode开始监听RPC和HTTP请求（namenode开始接受心跳）</p><p>6.系统中的数据块是以块的形式存储在datanode中的</p><p>7.正常操作期间，namenode在内存中保留所有块的映射信息</p><p> 1.加载fsimage和edits文件<br> 2.生成新的fsimage和edits_new文件<br> 3.等待DataNode注册与发送Block Report（块报告）</p><h6 id="NameNode的两个重要文件"><a href="#NameNode的两个重要文件" class="headerlink" title="NameNode的两个重要文件"></a>NameNode的两个重要文件</h6><p>fsimage 元数据镜像文件（保存文件系统的目录树）</p><p>edits 元数据操作日志 （针对目录树的修改操作）</p><h6 id="元数据镜像"><a href="#元数据镜像" class="headerlink" title="元数据镜像"></a>元数据镜像</h6><p>内存中保持最新的一份 （实时更新）</p><p>内存中的镜像 =fsiamge+edits</p><h4 id="HDFS架构-——DataNode"><a href="#HDFS架构-——DataNode" class="headerlink" title="HDFS架构 ——DataNode"></a>HDFS架构 ——DataNode</h4><p> 1.一个数据块在DataNode以文件存储在磁盘上，包括两个文件，一个是数据本身，<br> 一个是元数据包括数据块的长度，块数据的校验和（自检块信息）以及时间戳<br> 2.DataNode启动后向NameNode注册，（谁先启动）通过后，周期性的向NameNode上报所有的块信息（namenode被动的）<br> 3.心跳是每3秒一次，心跳返回结果带有NameNode给该DataNode的命令，如删除某个数据块。（namenode被动发送信息，发送指令给block块删除备份）如果超过10分钟没有收到某个DataNode 的心跳，则认为该节点不可用。<br> 4.集群运行中可以安全加入和退出一些机器</p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565342966100.png" alt="1565342966100"></p><h6 id="DataNode启动过程"><a href="#DataNode启动过程" class="headerlink" title="DataNode启动过程"></a>DataNode启动过程</h6><p>先NameNode注册、发送Block Report </p><h4 id="HDFS架构-——文件"><a href="#HDFS架构-——文件" class="headerlink" title="HDFS架构 ——文件"></a>HDFS架构 ——文件</h4><p> 1.文件切分成块（默认大小128M ，文件切分成块（默认大小128M），以块为单位，每个块有多个副本存储在不同的机器上，副本数可在文件生成时指定（默认3）<br> 2.可以创建、删除、移动或重命名文件，当文件创建、写入和关闭之后不能修改文件内容。（易读不易写）</p><h4 id="HDFS架构——Client"><a href="#HDFS架构——Client" class="headerlink" title="HDFS架构——Client"></a>HDFS架构——Client</h4><h6 id="Client职责"><a href="#Client职责" class="headerlink" title="Client职责"></a>Client职责</h6><p>1.文件切分成块（128M）</p><p>2.与NameNode交互，获取文件位置信息</p><p>3.与DataNode交互，读取或者写入数据</p><p>4.管理HDFS</p><p>5.访问HDFS</p><h4 id="HDFS架构——SNN"><a href="#HDFS架构——SNN" class="headerlink" title="HDFS架构——SNN"></a>HDFS架构——SNN</h4><h6 id="Secondary-NameNode职责"><a href="#Secondary-NameNode职责" class="headerlink" title="Secondary NameNode职责"></a>Secondary NameNode职责</h6><p>SecondaryNameNode有两个作用：</p><p><strong>一是镜像备份，二是日志与镜像的定期合并</strong></p><p>辅助NameNode分担工作量</p><p>edits文件过大将导致NameNode重启速度慢，定期合并fsimage和fsedits推送给namenode</p><p>在紧急情况下，辅助namenode恢复</p><h6 id="secondary-NameNode-工作流程"><a href="#secondary-NameNode-工作流程" class="headerlink" title="secondary NameNode 工作流程"></a>secondary NameNode 工作流程</h6><p><img src="https://img-blog.csdn.net/20150104202517828" alt="img"></p><p>1.SecondaryNameNode通知NameNode准备提交edits文件，此时主节点产生edits.new<br>SecondaryNameNode通过http get方式获取NameNode的fsimage与edits文件（在SecondaryNameNode的current同级目录下可见到 temp.check-point或者previous-checkpoint目录，这些目录中存储着从namenode拷贝来的镜像文件）<br>SecondaryNameNode开始合并获取的上述两个文件，产生一个新的fsimage文件fsimage.ckpt<br>SecondaryNameNode用http post方式发送fsimage.ckpt至NameNode<br>NameNode将fsimage.ckpt与edits.new文件分别重命名为fsimage与edits，然后更新fstime，整个checkpoint过程到此结束。 在新版本的hadoop中（hadoop0.21.0）,SecondaryNameNode两个作用被两个节点替换， checkpoint node与backup node. SecondaryNameNode备份由三个参数控制fs.checkpoint.period控制周期，fs.checkpoint.size控制日志文件超过多少大小时合并， dfs.http.address表示http地址，这个参数在SecondaryNameNode为单独节点时需要设置。</p><h6 id="fsimage和edits文件查看位置"><a href="#fsimage和edits文件查看位置" class="headerlink" title="fsimage和edits文件查看位置"></a>fsimage和edits文件查看位置</h6><p>/home/hadoopdata/dfs/name/current  目录下查看fsimage和edits文件</p><h6 id="block块文件查看位置"><a href="#block块文件查看位置" class="headerlink" title="block块文件查看位置"></a>block块文件查看位置</h6><p>/home/hadoopdata/dfs/data/current/BP-747889207-192.168.10.11-1456891004770/current/finalized/subdir0/subdir0   目录下查看block文件</p><h3 id="HDFS写流程"><a href="#HDFS写流程" class="headerlink" title="HDFS写流程"></a>HDFS写流程</h3><p>block<br>文件上传前需要分块，这个块就是block，一般为128MB，当然你可以去改，不顾不推荐。因为块太小：寻址时间占比过高。块太大：Map任务数太少，作业执行速度变慢。它是最大的一个单位。</p><p>packet<br>packet是第二大的单位，它是client端向DataNode，或DataNode的PipLine之间传数据的基本单位，默认64KB。</p><p>chunk<br>chunk是最小的单位，它是client向DataNode，或DataNode的PipLine之间进行数据校验的基本单位，默认512Byte，因为用作校验，故每个chunk需要带有4Byte的校验位。所以实际每个chunk写入packet的大小为516Byte。由此可见真实数据与校验值数据的比值约为128 : 1。（即64*1024 / 512）<br>————————————————<br>版权声明：本文为CSDN博主「bw_233」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/whdxjbw/article/details/81072207">https://blog.csdn.net/whdxjbw/article/details/81072207</a></p><p><img src="https://img2018.cnblogs.com/blog/699090/201906/699090-20190626155745864-1227676006.png" alt="img"></p><p>1、客户端向NameNode发出写文件请求。</p><p>2、查是否已存在文件、检查权限。若通过检查，<strong>直接先将操作写入EditLog</strong>，并返回输出流对象。</p><p>3、client端<strong>按128MB的块切分文件</strong></p><p>4、client将NameNode返回的分配的可写的<strong>DataNode列表</strong>和<strong>Data数据</strong>一同发送给最近的第一个DataNode节点，此后client端和NameNode分配的多个DataNode构成pipeline管道，client端向输出流对象中写数据。</p><p>5、每个DataNode写完一个块后，会返回<strong>确认信息</strong>。</p><p>6、写完数据，关闭输出流。</p><p>7、发送完后发送完成信号给NameNode。</p><h3 id="HDFS读流程"><a href="#HDFS读流程" class="headerlink" title="HDFS读流程"></a>HDFS读流程</h3><p><img src="https://images2018.cnblogs.com/blog/1228818/201803/1228818-20180312131601322-859729566.png" alt="img"></p><p>1、client访问NameNode，查询元数据信息，获得这个文件的数据块位置列表，返回输入流对象。</p><p>2、就近挑选一台datanode服务器，请求建立输入流 。</p><p>3、DataNode向输入流中中写数据，以packet为单位来校验。</p><p>4、关闭输入流</p><h3 id="MR流程"><a href="#MR流程" class="headerlink" title="MR流程"></a>MR流程</h3><p>1、一个mr程序启动的时候，最先启动的是MRAppMaster，MRAppMaster启动后根据本次job的描述信息，计算出需要的maptask实例数量，然后向集群申请机器启动相应数量的maptask进程</p><p>2、maptask进程启动之后，根据给定的数据切片范围进行数据处理，主体流程为：<br>1）利用客户指定的inputformat来获取RecordReader读取数据，形成输入KV对<br>2）将输入KV对传递给客户定义的map()方法，做逻辑运算，并将map()方法输出的KV对收集到缓存<br>3）将缓存中的KV对按照K分区排序后不断溢写到磁盘文件</p><p>3、MRAppMaster监控到所有maptask进程任务完成之后，会根据客户指定的参数启动相应数量的reducetask进程，并告知reducetask进程要处理的数据范围（数据分区）</p><p>4、Reducetask进程启动之后，根据MRAppMaster告知的待处理数据所在位置，从若干台maptask运行所在机器上获取到若干个maptask输出结果文件，并在本地进行重新归并排序，然后按照相同key的KV为一个组，调用客户定义的reduce()方法进行逻辑运算，并收集运算输出的结果KV，然后调用客户指定的outputformat将结果数据输出到外部存储</p><h3 id="MR的shuffle流程"><a href="#MR的shuffle流程" class="headerlink" title="MR的shuffle流程"></a>MR的shuffle流程</h3><p>一个block文件就是一个mr任务</p><p>map阶段</p><p>通过行读取器按行读取(k,v)，在内存中执行自定义的map()方法，因为频繁的磁盘I/O操作会严重的降低效率，因此“中间结果”不会立马写入磁盘，存储到map节点的环形缓冲区，环形缓冲区默认100M，当写入数据到预先设置好的阀值后，默认0.8，便会溢写文件到磁盘上生成一个小的临时文件。溢写之前在写出的过程中进行分区(按照k的索引根据字典顺序排序 [ 快排 ])排序合并(combiner)(可选)，整个map全部溢写完毕后，进行merge合并(捏合默认一次拉取10)和排序，合并成一个已分区且已排序大文件，这里的捏合是将分区相同的数据进行捏合。溢出写文件归并完毕后，Map将删除所有的临时溢出写文件</p><p>reduce阶段</p><p>reducetask来copy数据，先放入到缓冲区中，这个缓冲区不同Map端的，大小是jvm的堆内存大小。</p><p>在内存中每个Map对应一块数据，当内存缓存区中存储的Map数据占用空间达到一定程度的时候，开始启动内存中merge，把内存中的数据merge输出到磁盘上一个文件中，即<strong>内存到磁盘merge</strong>。默认是JVM的heap size的70%。（如果拖取的所有map数据总量都没有内存缓冲区，则数据就只存在于内存中）</p><p>reduce从map磁盘中拉取数据（默认拉取5个），当属于该reducer的map输出全部拷贝完成，则会在reducer上生成多个文件这时开始执行合并操作，即<strong>磁盘到磁盘merge</strong>。最终Reduce shuffle过程会输出一个整体有序的数据块。采用归并排序将内存和磁盘中的数据都<strong>进行排序</strong></p><p>然后进行分组，只要这个比较器比较的两个Key相同，它们就属于同一组，它们的 Value就会放在一个Value迭代器</p><p>然后执行reduce方法。</p><h3 id="MRshuffle的优化"><a href="#MRshuffle的优化" class="headerlink" title="MRshuffle的优化"></a>MRshuffle的优化</h3><p>1、在map端的环形缓冲区可以调大，调成200M，溢写的阈值可以改成90%，这样做为的是把溢写的文件数量减少。</p><p>2、map的压缩，可以在三个地方对数据进行压缩。</p><p>1）map之前</p><p>2）map之后</p><p>3）reduce之后</p><p>map之前讲究切片，可以使用lzo和bzip2，他们都支持切片</p><p>map之后讲究快，可以使用snappy和lzo，他们都挺快</p><p>reduce之后看用途，如果是下一个使用的，就使用一个可以压缩的，如果是最终的结果了，那么选一个压缩比最高的。</p><p>3、reduce缓冲区调大，提高拉取的个数，默认5个，改成一分钟10个。</p><p>4、调整maptask和reducetask内存大小，正常默认1G，把他们调成4-5个G</p><p>5、增大他们失败重试的次数</p><p>6、增大他们cpu的核数</p><h3 id="MR数据倾斜"><a href="#MR数据倾斜" class="headerlink" title="MR数据倾斜"></a>MR数据倾斜</h3><p>1、自定义分区器，按照自己的规则将不同的key归类到不同的partition。</p><pre class="line-numbers language-none"><code class="language-none">//每个分区对应一个ReduceTask//通过自定义分区控制最后结果输出在哪个文件public class MyPartition extends Partitioner&lt;Text, NullWritable&gt; {@Override    public int getPartition(Text text, NullWritable nullWritable, int i) {        //获取数据        String Phnum = text.toString();        //截取号码前三位，判断运营商        String s=Phnum.substring(0,3);        //移动0区，联通1区，电信2区        if(Arrays.asList(YD).contains(s)) return 0;        else if(Arrays.asList(LT).contains(s)) return 1;        else return 2;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、第一次在 map 阶段对那些导致了数据倾斜的 key 加上 1 到 n 的随机前缀，这样本来相</p><p>同的 key 也会被分到多个 Reducer 中进行局部聚合，数量就会大大降低。</p><p>第二次 mapreduce，去掉 key 的随机前缀，进行全局聚合。</p><p>思想：二次 mr，第一次将 key 随机散列到不同 reducer 进行处理达到负载均衡目的。第</p><p>二次再根据去掉 key 的随机前缀，按原 key 进行 reduce 处理。</p><p>这个方法进行两次 mapreduce，性能稍差。</p><p>3、增加reduce数量，提高并行度</p><h4 id="HDFS特性"><a href="#HDFS特性" class="headerlink" title="HDFS特性"></a>HDFS特性</h4><p>1.自动快速检测应对硬件错误 </p><p>2.额定备份</p><p>3.流式访问数据 （易读不易写）</p><p>4.移动数据不如移动计算 </p><ol start="4"><li>1减少io损耗4.2分布式处理 并行计算 </li><li>简单一致性模型</li><li>异构平台可移植</li></ol><h5 id="HDFS心跳机制"><a href="#HDFS心跳机制" class="headerlink" title="HDFS心跳机制"></a>HDFS心跳机制</h5><p>1.报活3秒一次<br>2.发送 namenode–&gt;datanode（namenode从不主动，namenode被动发送指令给datanode）<br>3.datanode发送的自身情况 </p><h5 id="HDFS-优点"><a href="#HDFS-优点" class="headerlink" title="HDFS 优点"></a>HDFS 优点</h5><p>1.高可靠性 （自动备份数据，在block块中 ）<br>2.高容错性 （自动保存多个副本，失败任务重新分配）<br>3.高效性   （能够在节点中动态的移动数据，保证节点平衡，处理速度快）<br>4.高扩展性 （可以动态的增删节点）</p><h5 id="HDFS-缺点"><a href="#HDFS-缺点" class="headerlink" title="HDFS  缺点"></a>HDFS  缺点</h5><p>一 不适合快速的访问数据<br>二 无法高效存储大量小文件<br>三 不支持多用户写入及修改文件</p><h5 id="HDFS-块放置策略"><a href="#HDFS-块放置策略" class="headerlink" title="HDFS 块放置策略"></a>HDFS 块放置策略</h5><p>两个机架分开放，相同的备份不能放在同一台机器上 </p><h5 id="HDFS-的读写流程"><a href="#HDFS-的读写流程" class="headerlink" title="HDFS 的读写流程"></a>HDFS 的读写流程</h5><p>写：clien请求上传文件，切块（128M），</p><p>读：client发送请求，拉取块数据，获取块地址，namenode控制datanode中的数据（自己的话） </p><h3 id="伪分布式的搭建"><a href="#伪分布式的搭建" class="headerlink" title="伪分布式的搭建"></a>伪分布式的搭建</h3><p>准备：</p><p>关防火墙</p><p>按jdk、hadoop和配置hadoop</p><p>ip地址和主机名设置</p><p>映射文件配置</p><p>ssh免密登陆 </p><h6 id="1-配置文件-5个"><a href="#1-配置文件-5个" class="headerlink" title="1.配置文件(5个)"></a>1.配置文件(5个)</h6><p>hadoop-env.sh   修改JAVA_HOME和HADOOP_HOME的路径<br>core-site.xml       node主机名    tmpdir 放feimage和edits  format时必须将tmpdir删除 （没删起冲突）<br>hdfs-site.xml       文件备份数量<br>yarn-site.xml  yarn    给mr提供资源<br>mapread-site.xml.template  因为识别不了得改个名字 mv mapred-site.xml.template mapred-site.xml<br>mapread-site.xml                   提供work工作 的名字 具体给他分配资源的是yarn</p><p>在配置文件完成后 通过 hadoop namenode -format 进行格式化 </p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565333152187.png" alt="1565333152187"></p><h6 id="2-格式化成功后-启动进程"><a href="#2-格式化成功后-启动进程" class="headerlink" title="2.格式化成功后 启动进程"></a>2.格式化成功后 启动进程</h6><p>start-dfs.sh        　启动namenode 和datanode</p><p>start-yarn.sh        启动yarn进程 </p><p>start-all.sh            还包括yarn的resourcemanager 和nodemanager</p><p>查看当前运行进程   jps</p><p>杀死进程      kill -9 进程编号 </p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565333901204.png" alt="1565333901204"></p><p> stop-all.sh   关闭所有进程 </p><p>hadoop jar jar包名称   描述名称    </p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565334501352.png" alt="1565334501352"></p><h2 id="Hadoop全分布式环境部署"><a href="#Hadoop全分布式环境部署" class="headerlink" title="Hadoop全分布式环境部署"></a>Hadoop全分布式环境部署</h2><p>克隆好的虚拟机</p><p>1.安装jdk</p><p>2.安装hadoop</p><p>3.配置/root/Downloads/hadoop-2.6.5/etc/hadoop的文件（一共有8个，如果配置过伪分布要删除根目录下的hadoop下的tmpdir文件夹，和重新解压hadoop）</p><h5 id="3-1-hadoop-env-sh"><a href="#3-1-hadoop-env-sh" class="headerlink" title="3.1  hadoop-env.sh"></a>3.1  hadoop-env.sh</h5><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># The java implementation to use.export JAVA_HOME=/opt/modules/jdk# The jsvc implementation to use. Jsvc is required to run secure datanodes# that bind to privileged ports to provide authentication of data transfer# protocol.  Jsvc is not required if SASL is configured for authentication of# data transfer protocol using non-privileged ports.#export JSVC_HOME=${JSVC_HOME}export HADOOP_CONF_DIR=${HADOOP_CONF_DIR:-"/etc/hadoop"}export HADOOP_CLASSPATH="&lt;extra_entries&gt;:$HADOOP_CLASSPATH:${HADOOP_HOME}/share/hadoop/common"export JAVA_LIBRARY_PATH=${JAVA_LIBRARY_PATH}:/opt/modules/hadoop/lib/native# Extra Java CLASSPATH elements.  Automatically insert capacity-scheduler.for f in $HADOOP_HOME/contrib/capacity-scheduler/*.jar; do  if [ "$HADOOP_CLASSPATH" ]; then    export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:$f  else    export HADOOP_CLASSPATH=$f  fidone# The maximum amount of heap to use, in MB. Default is 1000.#export HADOOP_HEAPSIZE=#export HADOOP_NAMENODE_INIT_HEAPSIZE=""# Extra Java runtime options.  Empty by default.export HADOOP_OPTS="$HADOOP_OPTS -Djava.net.preferIPv4Stack=true"# Command specific options appended to HADOOP_OPTS when specifiedexport HADOOP_NAMENODE_OPTS="-Dhadoop.security.logger=${HADOOP_SECURITY_LOGGER:-INFO,RFAS} -Dhdfs.audit.logger=${HDFS_AUDIT_LOGGER:-INFO,NullAppender} $HADOOP_NAMENODE_OPTS"export HADOOP_DATANODE_OPTS="-Dhadoop.security.logger=ERROR,RFAS $HADOOP_DATANODE_OPTS"export HADOOP_SECONDARYNAMENODE_OPTS="-Dhadoop.security.logger=${HADOOP_SECURITY_LOGGER:-INFO,RFAS} -Dhdfs.audit.logger=${HDFS_AUDIT_LOGGER:-INFO,NullAppender} $HADOOP_SECONDARYNAMENODE_OPTS"export HADOOP_NFS3_OPTS="$HADOOP_NFS3_OPTS"export HADOOP_PORTMAP_OPTS="-Xmx512m $HADOOP_PORTMAP_OPTS"# The following applies to multiple commands (fs, dfs, fsck, distcp etc)export HADOOP_CLIENT_OPTS="-Xmx512m $HADOOP_CLIENT_OPTS"#HADOOP_JAVA_PLATFORM_OPTS="-XX:-UsePerfData $HADOOP_JAVA_PLATFORM_OPTS"# On secure datanodes, user to run the datanode as after dropping privileges.# This **MUST** be uncommented to enable secure HDFS if using privileged ports# to provide authentication of data transfer protocol.  This **MUST NOT** be# defined if SASL is configured for authentication of data transfer protocol# using non-privileged ports.export HADOOP_SECURE_DN_USER=${HADOOP_SECURE_DN_USER}# Where log files are stored.  $HADOOP_HOME/logs by default.#export HADOOP_LOG_DIR=${HADOOP_LOG_DIR}/$USER# Where log files are stored in the secure data environment.export HADOOP_SECURE_DN_LOG_DIR=${HADOOP_LOG_DIR}/${HADOOP_HDFS_USER}#### HDFS Mover specific parameters#### Specify the JVM options to be used when starting the HDFS Mover.# These options will be appended to the options specified as HADOOP_OPTS# and therefore may override any similar flags set in HADOOP_OPTS## export HADOOP_MOVER_OPTS=""#### Advanced Users Only!#### The directory where pid files are stored. /tmp by default.# NOTE: this should be set to a directory that can only be written to by #       the user that will run the hadoop daemons.  Otherwise there is the#       potential for a symlink attack.export HADOOP_PID_DIR=${HADOOP_PID_DIR}export HADOOP_SECURE_DN_PID_DIR=${HADOOP_PID_DIR}# A string representing this instance of hadoop. $USER by default.export HADOOP_IDENT_STRING=$USER<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>集群规划：</p><table><thead><tr><th></th><th>服务器61</th><th>服务器62</th><th>服务器63</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode  DataNode</td><td>DataNode</td><td>DataNode  SecondaryNameNode</td></tr><tr><td>Yarn</td><td>NodeManager</td><td>Resourcemanager  NodeManager</td><td>NodeManager</td></tr></tbody></table><h5 id="3-2-core-site-xml"><a href="#3-2-core-site-xml" class="headerlink" title="3.2  core-site.xml"></a>3.2  core-site.xml</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--配置hadoop的压缩方式，用哪个--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>io.compression.codecs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>org.apache.hadoop.io.compress.GzipCodec,org.apache.hadoop.io.compress.DefaultCodec,org.apache.hadoop.io.compress.BZip2Codec,org.apache.hadoop.io.compress.SnappyCodec,com.hadoop.compression.lzo.LzoCodec,com.hadoop.compression.lzo.LzopCodec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>io.compression.codec.lzo.class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>com.hadoop.compression.lzo.LzoCodec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hdfs://bw61:8020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/opt/modules/hadoop/data/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-3-hdfs-site-xml"><a href="#3-3-hdfs-site-xml" class="headerlink" title="3.3  hdfs-site.xml"></a>3.3  hdfs-site.xml</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--打开权限hdfs--&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.permissions.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 查看secondarynamenode的访问页面 --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>bw62:50090<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--hdfs通过web查看时的端口号--&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>bw61:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- block块在每台机器上的地址 --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/opt/modules/hadoop/data/dfs/dn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 放置的是namenode中的fsimage --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/opt/modules/hadoop/data/dfs/nn/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 放置的是namenode中的edits --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/opt/modules/hadoop/data/dfs/nn/edits<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- snn的fsimage日志文件的地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.checkpoint.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/opt/modules/hadoop/data/dfs/snn/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- snn的edits日志文件的地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.checkpoint.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/opt/modules/hadoop/data/dfs/snn/edits<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-4-yarn-site-xml"><a href="#3-4-yarn-site-xml" class="headerlink" title="3.4  yarn-site.xml"></a>3.4  yarn-site.xml</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- Site specific YARN configuration properties --&gt;</span><span class="token comment">&lt;!-- 是否需要mr shuffle--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 指定resourcemanager在那一台机器上 --&gt;</span>    <span class="token comment">&lt;!--resourcemanager分配的端口地址 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>bw62<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!-- 日志聚合功能 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.log-aggregation-enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!-- 日志的保存时长 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.log-aggregation.retain-seconds<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>604800<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.nodemanager.vmem-check-enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-5-mapred-site-xml"><a href="#3-5-mapred-site-xml" class="headerlink" title="3.5  mapred-site.xml"></a>3.5  mapred-site.xml</h5><p>(注意修改名称)</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- mr由yarn来分配资源 --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>local<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 历史服务器web访问地址 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.jobhistory.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>bw61:19888<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 启动历史服务器 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.jobhistory.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>bw61:10020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--user模式--&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.job.ubertask.enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-6-yarn-env-sh"><a href="#3-6-yarn-env-sh" class="headerlink" title="3.6  yarn-env.sh"></a>3.6  yarn-env.sh</h5><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">export JAVA_HOME=/opt/modules/jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-7-mapred-env-sh"><a href="#3-7-mapred-env-sh" class="headerlink" title="3.7  mapred_env.sh"></a>3.7  mapred_env.sh</h5><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">export JAVA_HOME=/opt/modules/jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-8-配置slave文件"><a href="#3-8-配置slave文件" class="headerlink" title="3.8  配置slave文件"></a>3.8  配置slave文件</h5><p>(指定节点，在此文件下编写所有节点的名称)</p><p>vim slaves </p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">linux01linux02linux03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.发送hadoop文件夹到所有的机器上</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">scp -r hadoop root@linux02:/opt/modules/hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、格式化</p><pre class="line-numbers language-none"><code class="language-none">hdfs namenode -format<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、启动集群</p><pre class="line-numbers language-none"><code class="language-none">//第一台启动start-dfs.sh//第二台启动start-yarn.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Hadoop的历史服务器"><a href="#Hadoop的历史服务器" class="headerlink" title="Hadoop的历史服务器"></a>Hadoop的历史服务器</h3><p>历史服务器可以常看已经运行完的mapreduce的提交时间，用论多少个Reduce等信息</p><p>在默认情况下，Hadoop历史服务器是没有启动的，</p><p>mr-jobhistory-daemon.sh start historyserver        启动历史服务器</p><h3 id="Hadoop启动命令列表"><a href="#Hadoop启动命令列表" class="headerlink" title="Hadoop启动命令列表"></a>Hadoop启动命令列表</h3><p>start-all.sh        启动所有</p><p>stop-all.sh        关闭所有</p><p>start-dfs.sh        启动5个</p><p>start-yarn.sh        启动2个</p><p>hadoop namenode -format         格式化进程</p><h3 id="单独启动进程命令"><a href="#单独启动进程命令" class="headerlink" title="单独启动进程命令"></a>单独启动进程命令</h3><p>hadoop-daemon.sh start datanode        只启动datanode</p><p>hadoop-daemon.sh start namenode        只启动namenode</p><p>yarn-daemon.sh start nodemanager        只启动yarn</p><p>yarn-daemon.sh start resourcemanager        只启动resourcemanager</p><p>yarn-daemon.sh start proxyserver        </p><p>mr-jobhistory-daemon.sh start historyserver 启动jobhistory服务</p><h3 id="HDFS命令总结"><a href="#HDFS命令总结" class="headerlink" title="HDFS命令总结"></a>HDFS命令总结</h3><p>新建HDFS目录dir：hadoop fs -mkdir dir<br>显示文件内容：hadoop fs -cat file<br>查看某一路径下的所有文件：hdfs dfs -ls [filePath]<br>上 传 文 件 ： hdfs dfs -put [local filePath] [hdfs<br>filePath]<br>下 载 文 件 ： hdfs dfs -get [hdfs filePath] [local<br>filePath]<br>删除文件：hdfs dfs -rm -r [hdfs filePath]<br>查看某一文件内容：hdfs dfs -cat [filePath]</p><h3 id="端口号功能总结"><a href="#端口号功能总结" class="headerlink" title="端口号功能总结"></a>端口号功能总结</h3><p><a href="https://blog.csdn.net/qq_40757296/article/details/82490831">https://blog.csdn.net/qq_40757296/article/details/82490831</a></p><p>8020        namenode的RPC调用端口（接收client连接的RPC端口 ，获取文件系统的metadata信息）</p><p>&lt;8030-8033resourcemanage组件&gt;</p><p>2181    zookeeper端口号</p><p>2888    zk节点通信端口号</p><p>3306    mysql端口号</p><p>3888      选举的端口号</p><p>4040        Spark当前执行的任务页面查看端口</p><p>7077        spark端口号</p><p>8030        RPC的分配资源端口号</p><p>8031        心跳机制的端口 </p><p>8032        resourcemanager的通信端口号</p><p>8033        admin模块的地址 </p><p>8088        yarn的web监控端口</p><p>8089        web application proxy web代理 </p><p>9000        namenode常用端口 给机子   hdfs的默认(host)</p><p>10020        历史服务器端口号 （host）</p><p>19888        历史服务器web的监控端口号（web）</p><p>50070        hdfs 的web服务器的监控端口号(web)</p><p>50010        datanode　控制端口</p><p>50090        secondaryNamenode web管理端口</p><h4 id="静态增加删除节点"><a href="#静态增加删除节点" class="headerlink" title="静态增加删除节点"></a>静态增加删除节点</h4><p>静态添加节点时需要关闭hadoop集群，配置相应配置，重启集群</p><p>考虑hdfs和yarn这两个平台的问题</p><p>1.修改slave文件 重启hadoop集群，添加的是从节点</p><p>优点：改动少 </p><p>缺点：暴力  需要停止服务 </p><p>检查：50070 和 8088 端口检查  进行页面访问 </p><h4 id="动态增加删除节点"><a href="#动态增加删除节点" class="headerlink" title="动态增加删除节点"></a>动态增加删除节点</h4><p>在不重启集群的情况下添加节点</p><p>1.设置新节点的免密登陆</p><p>2.子节点 hosts添加主机名称</p><p>3.修改主节点上的slaves文件</p><p>4.在新节点中启动进程，可以单独起，不需要一起服务了（需要配置配置文件）</p><p>优点：非暴力，不需要停止服务 </p><p>缺点：改动多，一次上很多会乱</p><p>检查：50070 和 8088 端口检查  进行页面访问 </p><h5 id="集群上线节点"><a href="#集群上线节点" class="headerlink" title="集群上线节点"></a>集群上线节点</h5><p>启动datanode </p><p>hadoop-daemon.sh start datanode   启动linux04自身datanode</p><p>(只是自身启动, 其它主机并不识别)</p><p>1.在/root/Downloads/hadoop-2.6.5/etc/hadoop新建dfs-hosts.conf文件，添加所有从节点的主机名</p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565741909177.png" alt="1565741909177"></p><p>2.在hdfs-site添加dfs.hosts标签，将文件引入</p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565708859953.png" alt="1565708859953"></p><p>3.hadoop dfsadmin  -refreshNodes  刷新节点(在linux01中)</p><p>4.hdfs dfsadmin  -report        列举所有的从节点(slaves) </p><p>5.从新节点中启动：start-balancer.sh 均衡当前的hdfs块</p><h5 id="动态添加yarn节点"><a href="#动态添加yarn节点" class="headerlink" title="动态添加yarn节点"></a>动态添加yarn节点</h5><p>1.在/root/Downloads/hadoop-2.6.5/etc/hadoop下新建include文件</p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565761607025.png" alt="1565761607025"></p><p>2.在yarn-site文件中添加yarn.resourcemanager.nodes.include-path标签</p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565709061576.png" alt="1565709061576"></p><p>3.Yarn rmadmin -refreshNodes        刷新节点</p><h5 id="集群下线节点"><a href="#集群下线节点" class="headerlink" title="集群下线节点"></a>集群下线节点</h5><p>1.在hdfs-site.xml配置文件中配置</p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565709227787.png" alt="1565709227787"></p><p>2.exclude文件中添加需要删除的节点</p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565742284106.png" alt="1565742284106"></p><p>3.hadoop dfsadmin  -refreshNodes  刷新节点</p><p>4.hdfs dfsadmin -report         列举所有的从节点(slaves)</p><p>5.在节点中关闭进程</p><p>sbin/hadoop-daemon.sh stop datanode<br>sbin/yarn-daemon.sh stop nodemanager</p><h5 id="动态卸载yarn节点"><a href="#动态卸载yarn节点" class="headerlink" title="动态卸载yarn节点"></a>动态卸载yarn节点</h5><p>1.在/root/Downloads/hadoop-2.6.5/etc/hadoop新建include文件</p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565761658204.png" alt="1565761658204"></p><p>2.在yarn-site.xml文件中添加yarn.resourcemanager.nodes.exclude-path标签</p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565761905492.png" alt="1565761905492"></p><p>3.yarn rmadmin -refreshNodes        刷新节点 </p><h3 id="NN故障-SNN解决流程"><a href="#NN故障-SNN解决流程" class="headerlink" title="NN故障     SNN解决流程"></a>NN故障     SNN解决流程</h3><p>演示</p><p>1.删除主机的元数据(name nameedits中的<br>current)</p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565745283334.png" alt="1565745283334"></p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565745292245.png" alt="1565745292245"></p><p>2.start-dfs.sh启动元数据丢失(namenode进程丢失)</p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565745547739.png" alt="1565745547739"></p><p>3.恢复namenode(启动只会读取name和nameedits所以需要恢复)</p><p><img src="/2020/11/03/cdh/hadoop/hadoop/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1565745507670.png" alt="1565745507670"></p><p>4.恢复namenode（启动会读取name和nameedits，所有得恢复）</p><p>hadoop namennode -importCheckpoint</p><h2 id="HA（高可用集群）双机集群系统简称"><a href="#HA（高可用集群）双机集群系统简称" class="headerlink" title="HA（高可用集群）双机集群系统简称"></a>HA（高可用集群）双机集群系统简称</h2><p>HDFS通常由两个NameNode组成，一个处于active状态，另一个处于standby状态。Active NameNode对外提供服务，比如处理来自客户端的RPC请求，而Standby NameNode则不对外提供服务，仅同步Active NameNode的状态，以便能够在它失败时快速进行切换。</p><p>一个典型的HA集群，NameNode会被配置在两台独立的机器上，在任何时间上，一个NameNode处于活动状态，而另一个NameNode处于备份状态，活动状态的NameNode会响应集群中所有的客户端，备份状态的NameNode只是作为一个副本，保证在必要的时候提供一个快速的转移。</p><p><a href="https://www.cnblogs.com/luhaojie/p/9236839.html">https://www.cnblogs.com/luhaojie/p/9236839.html</a></p><h3 id="HDFS自动故障转移"><a href="#HDFS自动故障转移" class="headerlink" title="HDFS自动故障转移"></a>HDFS自动故障转移</h3><p>HDFS的自动故障转移主要由Zookeeper（Zookeeper很重要）和ZKFC两个组件组成。</p><h3 id="zookeeper在ha中的作用"><a href="#zookeeper在ha中的作用" class="headerlink" title="zookeeper在ha中的作用"></a>zookeeper在ha中的作用</h3><p>Zookeeper集群作用主要有：</p><p>一：是故障监控。每个NameNode将会和Zookeeper建立一个持久session，如果NameNode失效，那么此session将会过期失效，此后Zookeeper将会通知另一个Namenode，然后触发Failover；</p><p>二：是NameNode选举。ZooKeeper提供了简单的机制来实现Acitve Node选举，如果当前Active失效，Standby将会获取一个特定的排他锁，那么获取锁的Node接下来将会成为Active。</p><p>ZKFC是一个Zookeeper的客户端，，它主要用来监测和管理NameNodes的状态，每个NameNode机器上都会运行一个ZKFC程序，它的职责主要有：一是健康监控。ZKFC间歇性的ping NameNode，得到NameNode返回状态，如果NameNode失效或者不健康，那么ZKFS将会标记其为不健康；二是Zookeeper会话管理。当本地NaneNode运行良好时，ZKFC将会持有一个Zookeeper session，如果本地NameNode为Active，它同时也持有一个“排他锁”znode，如果session过期，那么次lock所对应的znode也将被删除；三是选举。当集群中其中一个NameNode宕机，Zookeeper会自动将另一个激活。</p><h3 id="三台机器的HA环境搭建"><a href="#三台机器的HA环境搭建" class="headerlink" title="三台机器的HA环境搭建"></a>三台机器的HA环境搭建</h3><p>删除hadoop解压包，删除临时位置存放的tmpdir</p><pre class="line-numbers language-none"><code class="language-none">//搭建准备映射关系修改 ssh免密登陆 java环境zookeeper安装 环境变量 proflie<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正式配置</p><p>1、hadoop-env.sh</p><pre class="line-numbers language-none"><code class="language-none">//解压hadoop安装包后修改配置文件 1、hadoop-env.shexport JAVA_HOME=/root/Downloads/jdk1.8.0_161<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、core-site.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 指定hdfs的nameservice为ns(任取) --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hdfs://ns<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 指定hadoop临时目录 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/hadoop/tmpdir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--流文件的缓冲区单位KB&gt; &lt;property&gt; &lt;name&gt;io.file.buffer.size&lt;/name&gt; &lt;value&gt;4096&lt;/value&gt; &lt;/property&gt; &lt;!-- 指定zookeeper集群的地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>ha.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>linux01:2181,linux02:2181,linux03:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、hdfs-site.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--指定hdfs的nameservice为ns，需要和core-site.xml中的保持一致 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.nameservices<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>ns<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- ns下面有两个NameNode，分别是nn1，nn2 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.ha.namenodes.ns<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>nn1, nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- nn1的RPC通信地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.rpc-address.ns.nn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>linux01:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- nn1的http通信地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.http-address.ns.nn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>linux01:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- nn2的RPC通信地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.rpc-address.ns.nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>linux02:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- nn2的http通信地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.http-address.ns.nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>linux02:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 指定NameNode的元数据在JournalNode上的存放位置 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.shared.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>qjournal://linux01:8485;linux02:8485;linux03:8485/ns<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.journalnode.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/root/hadoop/journal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 开启NameNode失败自动切换 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.ha.automatic-failover.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 配置失败自动切换实现方式 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.client.failover.proxy.provider.ns<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 配置隔离机制方法，多个机制用换行分割，即每个机制暂用一行 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.ha.fencing.methods<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>sshfenceshell(/bin/true)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 使用sshfence隔离机制时需要ssh免登陆 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.ha.fencing.ssh.private-key-files<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/root/.ssh/id_rsa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 配置sshfence隔离机制超时时间 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.ha.fencing.ssh.connect-timeout<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>30000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--设置副本数为2 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、mapred-site.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 指定mr框架为yarn方式 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--map任务内存大小，默认1G --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.map.memory.mb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>230<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--reduce任务内存大小，默认1G --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.reduce.memory.mb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>460<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--map任务运行的JVM进程内存大小,默认-Xmx200M --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.map.java.opts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>-Xmx184m<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--reduce任务运行的JVM进程内存,默认-Xmx200M --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.reduce.java.opts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>-Xmx368m<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--MR AppMaster运行需要内存，默认1536M --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.app.mapreduce.am.resource.mb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>460<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--MR AppMaster运行的JVM进程内存，默认-Xmx1024m --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.app.mapreduce.am.command-opts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>-Xmx368m<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.yarn-site.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 分别指定RM的地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>linux03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 指定zk集群地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.zk-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>linux01:2181,linux02:2181,linux03:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--RM中分配容器的内存最小值，默认1G --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.scheduler.minimum-allocation-mb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>230<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--RM中分配容器的内存最大值，默认8G --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.scheduler.maximum-allocation-mb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>700<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--可用物理内存大小,默认8G --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.nodemanager.resource.memory-mb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>700<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--虚拟内存检查是否开始 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.nodemanager.vmem-check-enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、slaves</p><pre class="line-numbers language-none"><code class="language-none">linux01linux02linux03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7、更改zoo.cfg和myid</p><pre class="line-numbers language-none"><code class="language-none">//重命名/root/Downloads/zookeeper/conf/zoo_sample.cfg文件为zoo.cfg#修改dataDir=/root/zookeeper-3.4.12/datadataLogDir=/root/zookeeper-3.4.12/datalog#末尾添加(内网IP)server.1=hadoop1:2888:3888       server.2=hadoop2:2888:3888server.3=hadoop3:2888:3888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搭建完成启动集群"><a href="#搭建完成启动集群" class="headerlink" title="搭建完成启动集群"></a>搭建完成启动集群</h3><p>在三台节点上全部启动zookeeper</p><pre class="line-numbers language-none"><code class="language-none">//启动zookeeperzkServer.sh start//查看当前状态zkServer.sh status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在linux01上启动journalnode进程</p><pre class="line-numbers language-none"><code class="language-none">//三个节点全部多了journalNode进程hadoop-daemons.sh start journalnode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在linux01上格式化hdfs，根据core-site.xml中的位置来生成tmpdir文件夹</p><pre class="line-numbers language-oz" data-language="oz"><code class="language-oz"><span class="token operator">/</span><span class="token operator">/</span>格式化hdfshdfs namenode <span class="token operator">-</span>format<span class="token operator">/</span><span class="token operator">/</span>将生成的tmpdir文件夹发送给其他节点scp <span class="token operator">-</span>r tmpdir root<span class="token operator">@</span>主机名<span class="token punctuation">:</span>发送的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在linux1格式化ZK</p><pre class="line-numbers language-none"><code class="language-none">hdfs zkfc -formatZK<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>linux01上启动hdfs</p><pre class="line-numbers language-none"><code class="language-none">//启动HDFSstart-dfs.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>linux03启动yarn</p><pre class="line-numbers language-none"><code class="language-none">start-yarn.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动完成后的结果"><a href="#启动完成后的结果" class="headerlink" title="启动完成后的结果"></a>启动完成后的结果</h3><pre class="line-numbers language-none"><code class="language-none">#hadoop1和hadoop2root@hadoop1:~/hadoop-2.8.4# jpsNodeManagerJournalNodeJpsDataNodeDFSZKFailoverControllerNameNodeQuorumPeerMain#hadoop3root@hadoop3:~# jpsQuorumPeerMainResourceManagerDataNodeJpsJournalNodeNodeManager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>安装Hadoop需要修改多少个文件： 8个 4个xml 以及对应的env + slaves </p><p>修改8个配置文件</p><p>hdfs-site.xml  yarn-site.xml hadoop-env.sh core-site.xml </p><p>yarn-env.sh mapred-site.xml  slaves  mapred-env.sh </p><p>1）集群规划：</p><table><thead><tr><th></th><th>服务器61</th><th>服务器62</th><th>服务器63</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode  DataNode</td><td>DataNode</td><td>DataNode  SecondaryNameNode</td></tr><tr><td>Yarn</td><td>NodeManager</td><td>Resourcemanager  NodeManager</td><td>NodeManager</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadopp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
